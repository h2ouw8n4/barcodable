note
 description:"[
		Barcodable.com API
 		Barcodable.com API
  		The version of the OpenAPI document: 1.5.0
 	    Contact: support@barcodable.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class INLINE_RESPONSE_200 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    upcs: detachable LIST [STRING_32] 
      -- A list of UPCs
    eans: detachable LIST [STRING_32] 
      -- A list of EANs
    asins: detachable LIST [STRING_32] 
      -- A list of ASINs
    message: detachable STRING_32 
      

feature -- Change Element  
 
    set_upcs (a_name: like upcs)
        -- Set 'upcs' with 'a_name'.
      do
        upcs := a_name
      ensure
        upcs_set: upcs = a_name		
      end

    set_eans (a_name: like eans)
        -- Set 'eans' with 'a_name'.
      do
        eans := a_name
      ensure
        eans_set: eans = a_name		
      end

    set_asins (a_name: like asins)
        -- Set 'asins' with 'a_name'.
      do
        asins := a_name
      ensure
        asins_set: asins = a_name		
      end

    set_message (a_name: like message)
        -- Set 'message' with 'a_name'.
      do
        message := a_name
      ensure
        message_set: message = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass INLINE_RESPONSE_200%N")
        if attached upcs as l_upcs then
          across l_upcs as ic loop
            Result.append ("%N upcs:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached eans as l_eans then
          across l_eans as ic loop
            Result.append ("%N eans:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached asins as l_asins then
          across l_asins as ic loop
            Result.append ("%N asins:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached message as l_message then
          Result.append ("%Nmessage:")
          Result.append (l_message.out)
          Result.append ("%N")    
        end  
      end
end


