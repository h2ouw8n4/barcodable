# coding: utf-8

"""
    Barcodable.com API

    Barcodable.com API  # noqa: E501

    OpenAPI spec version: 1.5.0
    Contact: support@barcodable.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse200(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'upcs': 'list[str]',
        'eans': 'list[str]',
        'asins': 'list[str]',
        'message': 'str'
    }

    attribute_map = {
        'upcs': 'upcs',
        'eans': 'eans',
        'asins': 'asins',
        'message': 'message'
    }

    def __init__(self, upcs=["190198155795"], eans=[1.90198155795E11], asins=["B01M1EXQY4"], message='OK'):  # noqa: E501
        """InlineResponse200 - a model defined in OpenAPI"""  # noqa: E501

        self._upcs = None
        self._eans = None
        self._asins = None
        self._message = None
        self.discriminator = None

        if upcs is not None:
            self.upcs = upcs
        if eans is not None:
            self.eans = eans
        if asins is not None:
            self.asins = asins
        if message is not None:
            self.message = message

    @property
    def upcs(self):
        """Gets the upcs of this InlineResponse200.  # noqa: E501

        A list of UPCs  # noqa: E501

        :return: The upcs of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._upcs

    @upcs.setter
    def upcs(self, upcs):
        """Sets the upcs of this InlineResponse200.

        A list of UPCs  # noqa: E501

        :param upcs: The upcs of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """

        self._upcs = upcs

    @property
    def eans(self):
        """Gets the eans of this InlineResponse200.  # noqa: E501

        A list of EANs  # noqa: E501

        :return: The eans of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._eans

    @eans.setter
    def eans(self, eans):
        """Sets the eans of this InlineResponse200.

        A list of EANs  # noqa: E501

        :param eans: The eans of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """

        self._eans = eans

    @property
    def asins(self):
        """Gets the asins of this InlineResponse200.  # noqa: E501

        A list of ASINs  # noqa: E501

        :return: The asins of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._asins

    @asins.setter
    def asins(self, asins):
        """Sets the asins of this InlineResponse200.

        A list of ASINs  # noqa: E501

        :param asins: The asins of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """

        self._asins = asins

    @property
    def message(self):
        """Gets the message of this InlineResponse200.  # noqa: E501


        :return: The message of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse200.


        :param message: The message of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
