# coding: utf-8

"""
    Barcodable.com API

    Barcodable.com API  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@barcodable.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Item(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'upc': 'str',
        'ean': 'str',
        'isbn': 'str',
        'asin': 'str',
        'title': 'str',
        'sku': 'str',
        'mpn': 'str',
        'part_number': 'str',
        'upcs': 'list[str]',
        'description': 'str',
        'brand': 'str',
        'manufacturer': 'str',
        'color': 'str',
        'new_price': 'float',
        'used_price': 'float',
        'currency_code': 'str',
        'url': 'str',
        'features': 'list[str]',
        'dimensions': 'list[object]',
        'images': 'list[str]',
        'matched_items': 'list[object]',
        'iso_country_codes': 'list[str]',
        'company_name': 'str',
        'company_address': 'str',
        'categories': 'list[str]',
        'category_hierarchies': 'list[str]'
    }

    attribute_map = {
        'upc': 'upc',
        'ean': 'ean',
        'isbn': 'isbn',
        'asin': 'asin',
        'title': 'title',
        'sku': 'sku',
        'mpn': 'mpn',
        'part_number': 'part_number',
        'upcs': 'upcs',
        'description': 'description',
        'brand': 'brand',
        'manufacturer': 'manufacturer',
        'color': 'color',
        'new_price': 'new_price',
        'used_price': 'used_price',
        'currency_code': 'currency_code',
        'url': 'url',
        'features': 'features',
        'dimensions': 'dimensions',
        'images': 'images',
        'matched_items': 'matched_items',
        'iso_country_codes': 'iso_country_codes',
        'company_name': 'company_name',
        'company_address': 'company_address',
        'categories': 'categories',
        'category_hierarchies': 'category_hierarchies'
    }

    def __init__(self, upc=None, ean=None, isbn=None, asin=None, title=None, sku=None, mpn=None, part_number=None, upcs=None, description=None, brand=None, manufacturer=None, color=None, new_price=None, used_price=None, currency_code=None, url=None, features=None, dimensions=None, images=None, matched_items=None, iso_country_codes=None, company_name=None, company_address=None, categories=None, category_hierarchies=None, local_vars_configuration=None):  # noqa: E501
        """Item - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._upc = None
        self._ean = None
        self._isbn = None
        self._asin = None
        self._title = None
        self._sku = None
        self._mpn = None
        self._part_number = None
        self._upcs = None
        self._description = None
        self._brand = None
        self._manufacturer = None
        self._color = None
        self._new_price = None
        self._used_price = None
        self._currency_code = None
        self._url = None
        self._features = None
        self._dimensions = None
        self._images = None
        self._matched_items = None
        self._iso_country_codes = None
        self._company_name = None
        self._company_address = None
        self._categories = None
        self._category_hierarchies = None
        self.discriminator = None

        if upc is not None:
            self.upc = upc
        if ean is not None:
            self.ean = ean
        if isbn is not None:
            self.isbn = isbn
        if asin is not None:
            self.asin = asin
        if title is not None:
            self.title = title
        if sku is not None:
            self.sku = sku
        if mpn is not None:
            self.mpn = mpn
        if part_number is not None:
            self.part_number = part_number
        if upcs is not None:
            self.upcs = upcs
        if description is not None:
            self.description = description
        if brand is not None:
            self.brand = brand
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if color is not None:
            self.color = color
        if new_price is not None:
            self.new_price = new_price
        if used_price is not None:
            self.used_price = used_price
        if currency_code is not None:
            self.currency_code = currency_code
        if url is not None:
            self.url = url
        if features is not None:
            self.features = features
        if dimensions is not None:
            self.dimensions = dimensions
        if images is not None:
            self.images = images
        if matched_items is not None:
            self.matched_items = matched_items
        if iso_country_codes is not None:
            self.iso_country_codes = iso_country_codes
        if company_name is not None:
            self.company_name = company_name
        if company_address is not None:
            self.company_address = company_address
        if categories is not None:
            self.categories = categories
        if category_hierarchies is not None:
            self.category_hierarchies = category_hierarchies

    @property
    def upc(self):
        """Gets the upc of this Item.  # noqa: E501


        :return: The upc of this Item.  # noqa: E501
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this Item.


        :param upc: The upc of this Item.  # noqa: E501
        :type: str
        """

        self._upc = upc

    @property
    def ean(self):
        """Gets the ean of this Item.  # noqa: E501


        :return: The ean of this Item.  # noqa: E501
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this Item.


        :param ean: The ean of this Item.  # noqa: E501
        :type: str
        """

        self._ean = ean

    @property
    def isbn(self):
        """Gets the isbn of this Item.  # noqa: E501


        :return: The isbn of this Item.  # noqa: E501
        :rtype: str
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn):
        """Sets the isbn of this Item.


        :param isbn: The isbn of this Item.  # noqa: E501
        :type: str
        """

        self._isbn = isbn

    @property
    def asin(self):
        """Gets the asin of this Item.  # noqa: E501


        :return: The asin of this Item.  # noqa: E501
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this Item.


        :param asin: The asin of this Item.  # noqa: E501
        :type: str
        """

        self._asin = asin

    @property
    def title(self):
        """Gets the title of this Item.  # noqa: E501


        :return: The title of this Item.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Item.


        :param title: The title of this Item.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def sku(self):
        """Gets the sku of this Item.  # noqa: E501


        :return: The sku of this Item.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Item.


        :param sku: The sku of this Item.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def mpn(self):
        """Gets the mpn of this Item.  # noqa: E501


        :return: The mpn of this Item.  # noqa: E501
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this Item.


        :param mpn: The mpn of this Item.  # noqa: E501
        :type: str
        """

        self._mpn = mpn

    @property
    def part_number(self):
        """Gets the part_number of this Item.  # noqa: E501


        :return: The part_number of this Item.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this Item.


        :param part_number: The part_number of this Item.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def upcs(self):
        """Gets the upcs of this Item.  # noqa: E501

        A list of matching upc codes.  # noqa: E501

        :return: The upcs of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._upcs

    @upcs.setter
    def upcs(self, upcs):
        """Sets the upcs of this Item.

        A list of matching upc codes.  # noqa: E501

        :param upcs: The upcs of this Item.  # noqa: E501
        :type: list[str]
        """

        self._upcs = upcs

    @property
    def description(self):
        """Gets the description of this Item.  # noqa: E501


        :return: The description of this Item.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item.


        :param description: The description of this Item.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def brand(self):
        """Gets the brand of this Item.  # noqa: E501


        :return: The brand of this Item.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Item.


        :param brand: The brand of this Item.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Item.  # noqa: E501


        :return: The manufacturer of this Item.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Item.


        :param manufacturer: The manufacturer of this Item.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def color(self):
        """Gets the color of this Item.  # noqa: E501


        :return: The color of this Item.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Item.


        :param color: The color of this Item.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def new_price(self):
        """Gets the new_price of this Item.  # noqa: E501


        :return: The new_price of this Item.  # noqa: E501
        :rtype: float
        """
        return self._new_price

    @new_price.setter
    def new_price(self, new_price):
        """Sets the new_price of this Item.


        :param new_price: The new_price of this Item.  # noqa: E501
        :type: float
        """

        self._new_price = new_price

    @property
    def used_price(self):
        """Gets the used_price of this Item.  # noqa: E501


        :return: The used_price of this Item.  # noqa: E501
        :rtype: float
        """
        return self._used_price

    @used_price.setter
    def used_price(self, used_price):
        """Sets the used_price of this Item.


        :param used_price: The used_price of this Item.  # noqa: E501
        :type: float
        """

        self._used_price = used_price

    @property
    def currency_code(self):
        """Gets the currency_code of this Item.  # noqa: E501


        :return: The currency_code of this Item.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Item.


        :param currency_code: The currency_code of this Item.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def url(self):
        """Gets the url of this Item.  # noqa: E501


        :return: The url of this Item.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Item.


        :param url: The url of this Item.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def features(self):
        """Gets the features of this Item.  # noqa: E501

        A list of product feature descriptions.  # noqa: E501

        :return: The features of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Item.

        A list of product feature descriptions.  # noqa: E501

        :param features: The features of this Item.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def dimensions(self):
        """Gets the dimensions of this Item.  # noqa: E501

        Product dimensions and weight.  ('meters', 'centimeters', 'millimeters', 'inches', 'feet', 'yards', 'ounces', 'pounds', 'grams', 'milligrams', 'kilograms')  # noqa: E501

        :return: The dimensions of this Item.  # noqa: E501
        :rtype: list[object]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Item.

        Product dimensions and weight.  ('meters', 'centimeters', 'millimeters', 'inches', 'feet', 'yards', 'ounces', 'pounds', 'grams', 'milligrams', 'kilograms')  # noqa: E501

        :param dimensions: The dimensions of this Item.  # noqa: E501
        :type: list[object]
        """

        self._dimensions = dimensions

    @property
    def images(self):
        """Gets the images of this Item.  # noqa: E501

        A list product images.  # noqa: E501

        :return: The images of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Item.

        A list product images.  # noqa: E501

        :param images: The images of this Item.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    @property
    def matched_items(self):
        """Gets the matched_items of this Item.  # noqa: E501

        Matched items for this product.  # noqa: E501

        :return: The matched_items of this Item.  # noqa: E501
        :rtype: list[object]
        """
        return self._matched_items

    @matched_items.setter
    def matched_items(self, matched_items):
        """Sets the matched_items of this Item.

        Matched items for this product.  # noqa: E501

        :param matched_items: The matched_items of this Item.  # noqa: E501
        :type: list[object]
        """

        self._matched_items = matched_items

    @property
    def iso_country_codes(self):
        """Gets the iso_country_codes of this Item.  # noqa: E501

        A list of country codes from which this item belongs.  # noqa: E501

        :return: The iso_country_codes of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._iso_country_codes

    @iso_country_codes.setter
    def iso_country_codes(self, iso_country_codes):
        """Sets the iso_country_codes of this Item.

        A list of country codes from which this item belongs.  # noqa: E501

        :param iso_country_codes: The iso_country_codes of this Item.  # noqa: E501
        :type: list[str]
        """

        self._iso_country_codes = iso_country_codes

    @property
    def company_name(self):
        """Gets the company_name of this Item.  # noqa: E501

        The company name registered to the product's UPC or EAN.  # noqa: E501

        :return: The company_name of this Item.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Item.

        The company name registered to the product's UPC or EAN.  # noqa: E501

        :param company_name: The company_name of this Item.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def company_address(self):
        """Gets the company_address of this Item.  # noqa: E501

        The company address registered to the product's UPC or EAN.  # noqa: E501

        :return: The company_address of this Item.  # noqa: E501
        :rtype: str
        """
        return self._company_address

    @company_address.setter
    def company_address(self, company_address):
        """Sets the company_address of this Item.

        The company address registered to the product's UPC or EAN.  # noqa: E501

        :param company_address: The company_address of this Item.  # noqa: E501
        :type: str
        """

        self._company_address = company_address

    @property
    def categories(self):
        """Gets the categories of this Item.  # noqa: E501

        A list of categories for this product.  # noqa: E501

        :return: The categories of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Item.

        A list of categories for this product.  # noqa: E501

        :param categories: The categories of this Item.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def category_hierarchies(self):
        """Gets the category_hierarchies of this Item.  # noqa: E501

        A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.  # noqa: E501

        :return: The category_hierarchies of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._category_hierarchies

    @category_hierarchies.setter
    def category_hierarchies(self, category_hierarchies):
        """Sets the category_hierarchies of this Item.

        A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.  # noqa: E501

        :param category_hierarchies: The category_hierarchies of this Item.  # noqa: E501
        :type: list[str]
        """

        self._category_hierarchies = category_hierarchies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Item):
            return True

        return self.to_dict() != other.to_dict()
