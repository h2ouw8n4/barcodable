{-
   Barcodable.com API
   Barcodable.com API

   The version of the OpenAPI document: 1.5.0
   Contact: support@barcodable.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.ProductLookup exposing (getItemByASIN, getItemByEAN, getItemByUPC)

import Data.Item as Item exposing (Item)
import Data.InvalidCode as InvalidCode exposing (InvalidCode)
import Data.NotFound as NotFound exposing (NotFound)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url




basePath : String
basePath =
    "https://virtserver.swaggerhub.com/magicCashew/barcodable/1.0.0"


{-| Returns a single item
-}
getItemByASIN :
    { onSend : Result Http.Error Item -> msg



    , asin : String

    }
    -> Cmd msg
getItemByASIN params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["api", "v1", "asin", identity params.asin]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Item.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns a single item
-}
getItemByEAN :
    { onSend : Result Http.Error Item -> msg



    , ean : String

    }
    -> Cmd msg
getItemByEAN params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["api", "v1", "ean", identity params.ean]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Item.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns a single item
-}
getItemByUPC :
    { onSend : Result Http.Error Item -> msg



    , upc : String

    }
    -> Cmd msg
getItemByUPC params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["api", "v1", "upc", identity params.upc]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Item.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
