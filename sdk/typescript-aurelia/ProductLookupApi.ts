/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  Item,
} from './models';

/**
 * getItemByASIN - parameters interface
 */
export interface IGetItemByASINParams {
  asin: string;
}

/**
 * getItemByEAN - parameters interface
 */
export interface IGetItemByEANParams {
  ean: string;
}

/**
 * getItemByUPC - parameters interface
 */
export interface IGetItemByUPCParams {
  upc: string;
}

/**
 * ProductLookupApi - API class
 */
@autoinject()
export class ProductLookupApi extends Api {

  /**
   * Creates a new ProductLookupApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Find item by asin code
   * Returns a single item
   * @param params.asin ASIN code of item to return
   */
  async getItemByASIN(params: IGetItemByASINParams): Promise<Item> {
    // Verify required parameters are set
    this.ensureParamIsSet('getItemByASIN', params, 'asin');

    // Create URL to call
    const url = `${this.basePath}/api/v1/asin/{asin}`
      .replace(`{${'asin'}}`, encodeURIComponent(`${params['asin']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Find item by UPC code
   * Returns a single item
   * @param params.ean EAN code of item to return
   */
  async getItemByEAN(params: IGetItemByEANParams): Promise<Item> {
    // Verify required parameters are set
    this.ensureParamIsSet('getItemByEAN', params, 'ean');

    // Create URL to call
    const url = `${this.basePath}/api/v1/ean/{ean}`
      .replace(`{${'ean'}}`, encodeURIComponent(`${params['ean']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Find item by UPC code
   * Returns a single item
   * @param params.upc UPC code of item to return
   */
  async getItemByUPC(params: IGetItemByUPCParams): Promise<Item> {
    // Verify required parameters are set
    this.ensureParamIsSet('getItemByUPC', params, 'upc');

    // Create URL to call
    const url = `${this.basePath}/api/v1/upc/{upc}`
      .replace(`{${'upc'}}`, encodeURIComponent(`${params['upc']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

