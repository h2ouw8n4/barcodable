/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "ProductConversionApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ProductConversionApi::ProductConversionApi() {
	std::shared_ptr<ProductConversionApiApiV1ConvertUpc | ean | asinResource> spProductConversionApiApiV1ConvertUpc | ean | asinResource = std::make_shared<ProductConversionApiApiV1ConvertUpc | ean | asinResource>();
	this->publish(spProductConversionApiApiV1ConvertUpc | ean | asinResource);

}

ProductConversionApi::~ProductConversionApi() {}

void ProductConversionApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/magicCashew/barcodable/1.0.0");
	
	this->start(settings);
}

void ProductConversionApi::stopService() {
	this->stop();
}

ProductConversionApiApiV1ConvertUpc | ean | asinResource::ProductConversionApiApiV1ConvertUpc | ean | asinResource()
{
	this->set_path("/api/v1/convert/{upc | ean | asin: .*}/");
	this->set_method_handler("GET",
		std::bind(&ProductConversionApiApiV1ConvertUpc | ean | asinResource::GET_method_handler, this,
			std::placeholders::_1));
}

ProductConversionApiApiV1ConvertUpc | ean | asinResource::~ProductConversionApiApiV1ConvertUpc | ean | asinResource()
{
}

void ProductConversionApiApiV1ConvertUpc | ean | asinResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void ProductConversionApiApiV1ConvertUpc | ean | asinResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string upc_Pipe_ean_Pipe_asin = request->get_path_parameter("upc_Pipe_ean_Pipe_asin", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					upc_Pipe_ean_Pipe_asin
				);
			}

			if (status_code == 200) {
				// Description: A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;.
				session->set_header("X-ValidAuthorization", ""); // Change second param to your header value
				// Description: An integer specifying the number of requests available per day. This number is definied by your subscription plan.
				session->set_header("X-RateLimit-Limit", ""); // Change second param to your header value
				// Description: An integer specifying the number of remaining requests per day.
				session->set_header("X-RateLimit-Remaining", ""); // Change second param to your header value
				// Description: A timestamp specifying the time in which the daily rate limit is reset.
				session->set_header("X-RateLimit-Reset", ""); // Change second param to your header value
				session->close(200, result.empty() ? "successful operation" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "search results matching criteria" : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

