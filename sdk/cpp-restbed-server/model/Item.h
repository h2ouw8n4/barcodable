/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Item.h
 *
 * 
 */

#ifndef Item_H_
#define Item_H_



#include <string>
#include "Object.h"
#include <vector>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Item 
{
public:
    Item();
    virtual ~Item();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Item members

    /// <summary>
    /// 
    /// </summary>
    std::string getUpc() const;
    void setUpc(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getEan() const;
    void setEan(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getIsbn() const;
    void setIsbn(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAsin() const;
    void setAsin(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getTitle() const;
    void setTitle(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getSku() const;
    void setSku(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getMpn() const;
    void setMpn(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPartNumber() const;
    void setPartNumber(std::string value);

    /// <summary>
    /// A list of matching upc codes.
    /// </summary>
    std::vector<std::string> getUpcs() const;
    void setUpcs(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getBrand() const;
    void setBrand(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getManufacturer() const;
    void setManufacturer(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getColor() const;
    void setColor(std::string value);

    /// <summary>
    /// 
    /// </summary>
    double getNewPrice() const;
    void setNewPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    double getUsedPrice() const;
    void setUsedPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCurrencyCode() const;
    void setCurrencyCode(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// A list of product feature descriptions.
    /// </summary>
    std::vector<std::string> getFeatures() const;
    void setFeatures(std::vector<std::string> value);

    /// <summary>
    /// Product dimensions and weight.  (&#39;meters&#39;, &#39;centimeters&#39;, &#39;millimeters&#39;, &#39;inches&#39;, &#39;feet&#39;, &#39;yards&#39;, &#39;ounces&#39;, &#39;pounds&#39;, &#39;grams&#39;, &#39;milligrams&#39;, &#39;kilograms&#39;)
    /// </summary>
    std::vector<std::shared_ptr<Object>> getDimensions() const;
    void setDimensions(std::vector<std::shared_ptr<Object>> value);

    /// <summary>
    /// A list product images.
    /// </summary>
    std::vector<std::string> getImages() const;
    void setImages(std::vector<std::string> value);

    /// <summary>
    /// Matched items for this product.
    /// </summary>
    std::vector<std::shared_ptr<Object>> getMatchedItems() const;
    void setMatchedItems(std::vector<std::shared_ptr<Object>> value);

    /// <summary>
    /// A list of country codes from which this item belongs.
    /// </summary>
    std::vector<std::string> getIsoCountryCodes() const;
    void setIsoCountryCodes(std::vector<std::string> value);

    /// <summary>
    /// The company name registered to the product&#39;s UPC or EAN.
    /// </summary>
    std::string getCompanyName() const;
    void setCompanyName(std::string value);

    /// <summary>
    /// The company address registered to the product&#39;s UPC or EAN.
    /// </summary>
    std::string getCompanyAddress() const;
    void setCompanyAddress(std::string value);

    /// <summary>
    /// A list of categories for this product.
    /// </summary>
    std::vector<std::string> getCategories() const;
    void setCategories(std::vector<std::string> value);

    /// <summary>
    /// A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.
    /// </summary>
    std::vector<std::string> getCategoryHierarchies() const;
    void setCategoryHierarchies(std::vector<std::string> value);
protected:
    std::string m_Upc;
    std::string m_Ean;
    std::string m_Isbn;
    std::string m_Asin;
    std::string m_Title;
    std::string m_Sku;
    std::string m_Mpn;
    std::string m_Part_number;
    std::vector<std::string> m_Upcs;
    std::string m_Description;
    std::string m_Brand;
    std::string m_Manufacturer;
    std::string m_Color;
    double m_New_price;
    double m_Used_price;
    std::string m_Currency_code;
    std::string m_Url;
    std::vector<std::string> m_Features;
    std::vector<std::shared_ptr<Object>> m_Dimensions;
    std::vector<std::string> m_Images;
    std::vector<std::shared_ptr<Object>> m_Matched_items;
    std::vector<std::string> m_Iso_country_codes;
    std::string m_Company_name;
    std::string m_Company_address;
    std::vector<std::string> m_Categories;
    std::vector<std::string> m_Category_hierarchies;
};

}
}
}
}

#endif /* Item_H_ */
