/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Item.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Item::Item()
{
    m_Upc = "";
    m_Ean = "";
    m_Isbn = "";
    m_Asin = "";
    m_Title = "";
    m_Sku = "";
    m_Mpn = "";
    m_Part_number = "";
    m_Description = "";
    m_Brand = "";
    m_Manufacturer = "";
    m_Color = "";
    m_New_price = 0.0;
    m_Used_price = 0.0;
    m_Currency_code = "";
    m_Url = "";
    m_Company_name = "";
    m_Company_address = "";
    
}

Item::~Item()
{
}

std::string Item::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("Upc", m_Upc);
	pt.put("Ean", m_Ean);
	pt.put("Isbn", m_Isbn);
	pt.put("Asin", m_Asin);
	pt.put("Title", m_Title);
	pt.put("Sku", m_Sku);
	pt.put("Mpn", m_Mpn);
	pt.put("Part_number", m_Part_number);
	pt.put("Description", m_Description);
	pt.put("Brand", m_Brand);
	pt.put("Manufacturer", m_Manufacturer);
	pt.put("Color", m_Color);
	pt.put("New_price", m_New_price);
	pt.put("Used_price", m_Used_price);
	pt.put("Currency_code", m_Currency_code);
	pt.put("Url", m_Url);
	pt.put("Company_name", m_Company_name);
	pt.put("Company_address", m_Company_address);
	write_json(ss, pt, false);
	return ss.str();
}

void Item::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m_Upc = pt.get("Upc", "");
	m_Ean = pt.get("Ean", "");
	m_Isbn = pt.get("Isbn", "");
	m_Asin = pt.get("Asin", "");
	m_Title = pt.get("Title", "");
	m_Sku = pt.get("Sku", "");
	m_Mpn = pt.get("Mpn", "");
	m_Part_number = pt.get("Part_number", "");
	m_Description = pt.get("Description", "");
	m_Brand = pt.get("Brand", "");
	m_Manufacturer = pt.get("Manufacturer", "");
	m_Color = pt.get("Color", "");
	m_New_price = pt.get("New_price", 0.0);
	m_Used_price = pt.get("Used_price", 0.0);
	m_Currency_code = pt.get("Currency_code", "");
	m_Url = pt.get("Url", "");
	m_Company_name = pt.get("Company_name", "");
	m_Company_address = pt.get("Company_address", "");
}

std::string Item::getUpc() const
{
    return m_Upc;
}
void Item::setUpc(std::string value)
{
    m_Upc = value;
}
std::string Item::getEan() const
{
    return m_Ean;
}
void Item::setEan(std::string value)
{
    m_Ean = value;
}
std::string Item::getIsbn() const
{
    return m_Isbn;
}
void Item::setIsbn(std::string value)
{
    m_Isbn = value;
}
std::string Item::getAsin() const
{
    return m_Asin;
}
void Item::setAsin(std::string value)
{
    m_Asin = value;
}
std::string Item::getTitle() const
{
    return m_Title;
}
void Item::setTitle(std::string value)
{
    m_Title = value;
}
std::string Item::getSku() const
{
    return m_Sku;
}
void Item::setSku(std::string value)
{
    m_Sku = value;
}
std::string Item::getMpn() const
{
    return m_Mpn;
}
void Item::setMpn(std::string value)
{
    m_Mpn = value;
}
std::string Item::getPartNumber() const
{
    return m_Part_number;
}
void Item::setPartNumber(std::string value)
{
    m_Part_number = value;
}
std::vector<std::string> Item::getUpcs() const
{
    return m_Upcs;
}
void Item::setUpcs(std::vector<std::string> value)
{
    m_Upcs = value;
}
std::string Item::getDescription() const
{
    return m_Description;
}
void Item::setDescription(std::string value)
{
    m_Description = value;
}
std::string Item::getBrand() const
{
    return m_Brand;
}
void Item::setBrand(std::string value)
{
    m_Brand = value;
}
std::string Item::getManufacturer() const
{
    return m_Manufacturer;
}
void Item::setManufacturer(std::string value)
{
    m_Manufacturer = value;
}
std::string Item::getColor() const
{
    return m_Color;
}
void Item::setColor(std::string value)
{
    m_Color = value;
}
double Item::getNewPrice() const
{
    return m_New_price;
}
void Item::setNewPrice(double value)
{
    m_New_price = value;
}
double Item::getUsedPrice() const
{
    return m_Used_price;
}
void Item::setUsedPrice(double value)
{
    m_Used_price = value;
}
std::string Item::getCurrencyCode() const
{
    return m_Currency_code;
}
void Item::setCurrencyCode(std::string value)
{
    m_Currency_code = value;
}
std::string Item::getUrl() const
{
    return m_Url;
}
void Item::setUrl(std::string value)
{
    m_Url = value;
}
std::vector<std::string> Item::getFeatures() const
{
    return m_Features;
}
void Item::setFeatures(std::vector<std::string> value)
{
    m_Features = value;
}
std::vector<std::shared_ptr<Object>> Item::getDimensions() const
{
    return m_Dimensions;
}
void Item::setDimensions(std::vector<std::shared_ptr<Object>> value)
{
    m_Dimensions = value;
}
std::vector<std::string> Item::getImages() const
{
    return m_Images;
}
void Item::setImages(std::vector<std::string> value)
{
    m_Images = value;
}
std::vector<std::shared_ptr<Object>> Item::getMatchedItems() const
{
    return m_Matched_items;
}
void Item::setMatchedItems(std::vector<std::shared_ptr<Object>> value)
{
    m_Matched_items = value;
}
std::vector<std::string> Item::getIsoCountryCodes() const
{
    return m_Iso_country_codes;
}
void Item::setIsoCountryCodes(std::vector<std::string> value)
{
    m_Iso_country_codes = value;
}
std::string Item::getCompanyName() const
{
    return m_Company_name;
}
void Item::setCompanyName(std::string value)
{
    m_Company_name = value;
}
std::string Item::getCompanyAddress() const
{
    return m_Company_address;
}
void Item::setCompanyAddress(std::string value)
{
    m_Company_address = value;
}
std::vector<std::string> Item::getCategories() const
{
    return m_Categories;
}
void Item::setCategories(std::vector<std::string> value)
{
    m_Categories = value;
}
std::vector<std::string> Item::getCategoryHierarchies() const
{
    return m_Category_hierarchies;
}
void Item::setCategoryHierarchies(std::vector<std::string> value)
{
    m_Category_hierarchies = value;
}

}
}
}
}

