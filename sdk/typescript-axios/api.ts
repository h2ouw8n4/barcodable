// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "https://virtserver.swaggerhub.com/mindviser/barcodable/1.0.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * A list of UPCs
     * @type {Array<string>}
     * @memberof InlineResponse200
     */
    upcs?: Array<string>;
    /**
     * A list of EANs
     * @type {Array<string>}
     * @memberof InlineResponse200
     */
    eans?: Array<string>;
    /**
     * A list of ASINs
     * @type {Array<string>}
     * @memberof InlineResponse200
     */
    asins?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse400
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface InvalidCode
 */
export interface InvalidCode {
    /**
     * 
     * @type {string}
     * @memberof InvalidCode
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof InvalidCode
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    upc?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    ean?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    isbn?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    asin?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    sku?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    mpn?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    partNumber?: string;
    /**
     * A list of matching upc codes.
     * @type {Array<string>}
     * @memberof Item
     */
    upcs?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    brand?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    manufacturer?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    color?: string;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    newPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    usedPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    url?: string;
    /**
     * A list of product feature descriptions.
     * @type {Array<string>}
     * @memberof Item
     */
    features?: Array<string>;
    /**
     * Product dimensions and weight.  ('meters', 'centimeters', 'millimeters', 'inches', 'feet', 'yards', 'ounces', 'pounds', 'grams', 'milligrams', 'kilograms')
     * @type {Array<any>}
     * @memberof Item
     */
    dimensions?: Array<any>;
    /**
     * A list product images.
     * @type {Array<string>}
     * @memberof Item
     */
    images?: Array<string>;
    /**
     * Matched items for this product.
     * @type {Array<any>}
     * @memberof Item
     */
    matchedItems?: Array<any>;
    /**
     * A list of country codes from which this item belongs.
     * @type {Array<string>}
     * @memberof Item
     */
    isoCountryCodes?: Array<string>;
    /**
     * The company name registered to the product's UPC or EAN.
     * @type {string}
     * @memberof Item
     */
    companyName?: string;
    /**
     * The company address registered to the product's UPC or EAN.
     * @type {string}
     * @memberof Item
     */
    companyAddress?: string;
    /**
     * A list of categories for this product.
     * @type {Array<string>}
     * @memberof Item
     */
    categories?: Array<string>;
    /**
     * A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.
     * @type {Array<string>}
     * @memberof Item
     */
    categoryHierarchies?: Array<string>;
}

/**
 * 
 * @export
 * @interface NotFound
 */
export interface NotFound {
    /**
     * 
     * @type {string}
     * @memberof NotFound
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof NotFound
     */
    status?: number;
}


/**
 * ProductConversionApi - axios parameter creator
 * @export
 */
export const ProductConversionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the converted UPC, EAN, and ASIN codes.
         * @summary Convert between UPC, EAN, and ASIN product codes.
         * @param {string} upcEanAsin UPC, EAN, or ASIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCode(upcEanAsin: string, options: any = {}): RequestArgs {
            // verify required parameter 'upcEanAsin' is not null or undefined
            if (upcEanAsin === null || upcEanAsin === undefined) {
                throw new RequiredError('upcEanAsin','Required parameter upcEanAsin was null or undefined when calling convertCode.');
            }
            const localVarPath = `/api/v1/convert/{upc | ean | asin}`
                .replace(`{${"upc | ean | asin"}}`, encodeURIComponent(String(upcEanAsin)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductConversionApi - functional programming interface
 * @export
 */
export const ProductConversionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the converted UPC, EAN, and ASIN codes.
         * @summary Convert between UPC, EAN, and ASIN product codes.
         * @param {string} upcEanAsin UPC, EAN, or ASIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCode(upcEanAsin: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = ProductConversionApiAxiosParamCreator(configuration).convertCode(upcEanAsin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * ProductConversionApi - factory interface
 * @export
 */
export const ProductConversionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the converted UPC, EAN, and ASIN codes.
         * @summary Convert between UPC, EAN, and ASIN product codes.
         * @param {string} upcEanAsin UPC, EAN, or ASIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCode(upcEanAsin: string, options?: any) {
            return ProductConversionApiFp(configuration).convertCode(upcEanAsin, options)(axios, basePath);
        },
    };
};

/**
 * ProductConversionApi - object-oriented interface
 * @export
 * @class ProductConversionApi
 * @extends {BaseAPI}
 */
export class ProductConversionApi extends BaseAPI {
    /**
     * Returns the converted UPC, EAN, and ASIN codes.
     * @summary Convert between UPC, EAN, and ASIN product codes.
     * @param {string} upcEanAsin UPC, EAN, or ASIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductConversionApi
     */
    public convertCode(upcEanAsin: string, options?: any) {
        return ProductConversionApiFp(this.configuration).convertCode(upcEanAsin, options)(this.axios, this.basePath);
    }

}

/**
 * ProductLookupApi - axios parameter creator
 * @export
 */
export const ProductLookupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single item
         * @summary Find item by asin code
         * @param {string} asin ASIN code of item to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByASIN(asin: string, options: any = {}): RequestArgs {
            // verify required parameter 'asin' is not null or undefined
            if (asin === null || asin === undefined) {
                throw new RequiredError('asin','Required parameter asin was null or undefined when calling getItemByASIN.');
            }
            const localVarPath = `/api/v1/asin/{asin}`
                .replace(`{${"asin"}}`, encodeURIComponent(String(asin)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single item
         * @summary Find item by UPC code
         * @param {string} ean EAN code of item to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByEAN(ean: string, options: any = {}): RequestArgs {
            // verify required parameter 'ean' is not null or undefined
            if (ean === null || ean === undefined) {
                throw new RequiredError('ean','Required parameter ean was null or undefined when calling getItemByEAN.');
            }
            const localVarPath = `/api/v1/ean/{ean}`
                .replace(`{${"ean"}}`, encodeURIComponent(String(ean)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single item
         * @summary Find item by UPC code
         * @param {string} upc UPC code of item to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByUPC(upc: string, options: any = {}): RequestArgs {
            // verify required parameter 'upc' is not null or undefined
            if (upc === null || upc === undefined) {
                throw new RequiredError('upc','Required parameter upc was null or undefined when calling getItemByUPC.');
            }
            const localVarPath = `/api/v1/upc/{upc}`
                .replace(`{${"upc"}}`, encodeURIComponent(String(upc)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductLookupApi - functional programming interface
 * @export
 */
export const ProductLookupApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a single item
         * @summary Find item by asin code
         * @param {string} asin ASIN code of item to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByASIN(asin: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item> {
            const localVarAxiosArgs = ProductLookupApiAxiosParamCreator(configuration).getItemByASIN(asin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns a single item
         * @summary Find item by UPC code
         * @param {string} ean EAN code of item to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByEAN(ean: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item> {
            const localVarAxiosArgs = ProductLookupApiAxiosParamCreator(configuration).getItemByEAN(ean, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns a single item
         * @summary Find item by UPC code
         * @param {string} upc UPC code of item to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByUPC(upc: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item> {
            const localVarAxiosArgs = ProductLookupApiAxiosParamCreator(configuration).getItemByUPC(upc, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * ProductLookupApi - factory interface
 * @export
 */
export const ProductLookupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns a single item
         * @summary Find item by asin code
         * @param {string} asin ASIN code of item to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByASIN(asin: string, options?: any) {
            return ProductLookupApiFp(configuration).getItemByASIN(asin, options)(axios, basePath);
        },
        /**
         * Returns a single item
         * @summary Find item by UPC code
         * @param {string} ean EAN code of item to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByEAN(ean: string, options?: any) {
            return ProductLookupApiFp(configuration).getItemByEAN(ean, options)(axios, basePath);
        },
        /**
         * Returns a single item
         * @summary Find item by UPC code
         * @param {string} upc UPC code of item to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByUPC(upc: string, options?: any) {
            return ProductLookupApiFp(configuration).getItemByUPC(upc, options)(axios, basePath);
        },
    };
};

/**
 * ProductLookupApi - object-oriented interface
 * @export
 * @class ProductLookupApi
 * @extends {BaseAPI}
 */
export class ProductLookupApi extends BaseAPI {
    /**
     * Returns a single item
     * @summary Find item by asin code
     * @param {string} asin ASIN code of item to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductLookupApi
     */
    public getItemByASIN(asin: string, options?: any) {
        return ProductLookupApiFp(this.configuration).getItemByASIN(asin, options)(this.axios, this.basePath);
    }

    /**
     * Returns a single item
     * @summary Find item by UPC code
     * @param {string} ean EAN code of item to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductLookupApi
     */
    public getItemByEAN(ean: string, options?: any) {
        return ProductLookupApiFp(this.configuration).getItemByEAN(ean, options)(this.axios, this.basePath);
    }

    /**
     * Returns a single item
     * @summary Find item by UPC code
     * @param {string} upc UPC code of item to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductLookupApi
     */
    public getItemByUPC(upc: string, options?: any) {
        return ProductLookupApiFp(this.configuration).getItemByUPC(upc, options)(this.axios, this.basePath);
    }

}

