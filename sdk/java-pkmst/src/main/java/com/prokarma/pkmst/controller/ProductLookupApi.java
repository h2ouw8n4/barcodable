/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.InvalidCode;
import com.prokarma.pkmst.model.Item;
import com.prokarma.pkmst.model.NotFound;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2020-03-27T18:10:02.490-04:00[America/New_York]")

@Api(value = "ProductLookup", description = "the ProductLookup API")
public interface ProductLookupApi {

    @ApiOperation(value = "Find item by asin code", notes = "Returns a single item", response = Item.class, tags={ "Product Lookup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Item.class),
        @ApiResponse(code = 400, message = "search results matching criteria", response = InvalidCode.class),
        @ApiResponse(code = 404, message = "search results matching criteria", response = NotFound.class) })
    @RequestMapping(value = "/api/v1/asin/{asin}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Item> getItemByASIN(@ApiParam(value = "ASIN code of item to return",required=true ) @PathVariable("asin") String asin, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Find item by UPC code", notes = "Returns a single item", response = Item.class, tags={ "Product Lookup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Item.class),
        @ApiResponse(code = 400, message = "search results matching criteria", response = InvalidCode.class),
        @ApiResponse(code = 404, message = "search results matching criteria", response = NotFound.class) })
    @RequestMapping(value = "/api/v1/ean/{ean}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Item> getItemByEAN(@ApiParam(value = "EAN code of item to return",required=true ) @PathVariable("ean") String ean, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Find item by UPC code", notes = "Returns a single item", response = Item.class, tags={ "Product Lookup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Item.class),
        @ApiResponse(code = 400, message = "search results matching criteria", response = InvalidCode.class),
        @ApiResponse(code = 404, message = "search results matching criteria", response = NotFound.class) })
    @RequestMapping(value = "/api/v1/upc/{upc}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Item> getItemByUPC(@ApiParam(value = "UPC code of item to return",required=true ) @PathVariable("upc") String upc, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
