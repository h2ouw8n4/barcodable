/*
 * Barcodable.com API
 *
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse200 : IEquatable<InlineResponse200>
    { 
        /// <summary>
        /// A list of UPCs
        /// </summary>
        /// <value>A list of UPCs</value>
        [DataMember(Name="upcs")]
        public List<string> Upcs { get; set; }

        /// <summary>
        /// A list of EANs
        /// </summary>
        /// <value>A list of EANs</value>
        [DataMember(Name="eans")]
        public List<string> Eans { get; set; }

        /// <summary>
        /// A list of ASINs
        /// </summary>
        /// <value>A list of ASINs</value>
        [DataMember(Name="asins")]
        public List<string> Asins { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message")]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200 {\n");
            sb.Append("  Upcs: ").Append(Upcs).Append("\n");
            sb.Append("  Eans: ").Append(Eans).Append("\n");
            sb.Append("  Asins: ").Append(Asins).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse200)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse200 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse200 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200 other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Upcs == other.Upcs ||
                    Upcs != null &&
                    Upcs.SequenceEqual(other.Upcs)
                ) && 
                (
                    Eans == other.Eans ||
                    Eans != null &&
                    Eans.SequenceEqual(other.Eans)
                ) && 
                (
                    Asins == other.Asins ||
                    Asins != null &&
                    Asins.SequenceEqual(other.Asins)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Upcs != null)
                    hashCode = hashCode * 59 + Upcs.GetHashCode();
                    if (Eans != null)
                    hashCode = hashCode * 59 + Eans.GetHashCode();
                    if (Asins != null)
                    hashCode = hashCode * 59 + Asins.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse200 left, InlineResponse200 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse200 left, InlineResponse200 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
