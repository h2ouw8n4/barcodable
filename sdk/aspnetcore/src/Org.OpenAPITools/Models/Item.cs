/*
 * Barcodable.com API
 *
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Item : IEquatable<Item>
    {
        /// <summary>
        /// Gets or Sets Upc
        /// </summary>
        [DataMember(Name="upc", EmitDefaultValue=false)]
        public string Upc { get; set; }

        /// <summary>
        /// Gets or Sets Ean
        /// </summary>
        [DataMember(Name="ean", EmitDefaultValue=false)]
        public string Ean { get; set; }

        /// <summary>
        /// Gets or Sets Isbn
        /// </summary>
        [DataMember(Name="isbn", EmitDefaultValue=false)]
        public string Isbn { get; set; }

        /// <summary>
        /// Gets or Sets Asin
        /// </summary>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or Sets Mpn
        /// </summary>
        [DataMember(Name="mpn", EmitDefaultValue=false)]
        public string Mpn { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name="part_number", EmitDefaultValue=false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// A list of matching upc codes.
        /// </summary>
        /// <value>A list of matching upc codes.</value>
        [DataMember(Name="upcs", EmitDefaultValue=false)]
        public List<string> Upcs { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets NewPrice
        /// </summary>
        [DataMember(Name="new_price", EmitDefaultValue=false)]
        public decimal NewPrice { get; set; }

        /// <summary>
        /// Gets or Sets UsedPrice
        /// </summary>
        [DataMember(Name="used_price", EmitDefaultValue=false)]
        public decimal UsedPrice { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// A list of product feature descriptions.
        /// </summary>
        /// <value>A list of product feature descriptions.</value>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public List<string> Features { get; set; }

        /// <summary>
        /// Product dimensions and weight.  (&#39;meters&#39;, &#39;centimeters&#39;, &#39;millimeters&#39;, &#39;inches&#39;, &#39;feet&#39;, &#39;yards&#39;, &#39;ounces&#39;, &#39;pounds&#39;, &#39;grams&#39;, &#39;milligrams&#39;, &#39;kilograms&#39;)
        /// </summary>
        /// <value>Product dimensions and weight.  (&#39;meters&#39;, &#39;centimeters&#39;, &#39;millimeters&#39;, &#39;inches&#39;, &#39;feet&#39;, &#39;yards&#39;, &#39;ounces&#39;, &#39;pounds&#39;, &#39;grams&#39;, &#39;milligrams&#39;, &#39;kilograms&#39;)</value>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public List<Object> Dimensions { get; set; }

        /// <summary>
        /// A list product images.
        /// </summary>
        /// <value>A list product images.</value>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<string> Images { get; set; }

        /// <summary>
        /// Matched items for this product.
        /// </summary>
        /// <value>Matched items for this product.</value>
        [DataMember(Name="matched_items", EmitDefaultValue=false)]
        public List<Object> MatchedItems { get; set; }

        /// <summary>
        /// A list of country codes from which this item belongs.
        /// </summary>
        /// <value>A list of country codes from which this item belongs.</value>
        [DataMember(Name="iso_country_codes", EmitDefaultValue=false)]
        public List<string> IsoCountryCodes { get; set; }

        /// <summary>
        /// The company name registered to the product&#39;s UPC or EAN.
        /// </summary>
        /// <value>The company name registered to the product&#39;s UPC or EAN.</value>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The company address registered to the product&#39;s UPC or EAN.
        /// </summary>
        /// <value>The company address registered to the product&#39;s UPC or EAN.</value>
        [DataMember(Name="company_address", EmitDefaultValue=false)]
        public string CompanyAddress { get; set; }

        /// <summary>
        /// A list of categories for this product.
        /// </summary>
        /// <value>A list of categories for this product.</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.
        /// </summary>
        /// <value>A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.</value>
        [DataMember(Name="category_hierarchies", EmitDefaultValue=false)]
        public List<string> CategoryHierarchies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("  Ean: ").Append(Ean).Append("\n");
            sb.Append("  Isbn: ").Append(Isbn).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  Upcs: ").Append(Upcs).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  NewPrice: ").Append(NewPrice).Append("\n");
            sb.Append("  UsedPrice: ").Append(UsedPrice).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  MatchedItems: ").Append(MatchedItems).Append("\n");
            sb.Append("  IsoCountryCodes: ").Append(IsoCountryCodes).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  CategoryHierarchies: ").Append(CategoryHierarchies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Item)obj);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="other">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Upc == other.Upc ||
                    Upc != null &&
                    Upc.Equals(other.Upc)
                ) && 
                (
                    Ean == other.Ean ||
                    Ean != null &&
                    Ean.Equals(other.Ean)
                ) && 
                (
                    Isbn == other.Isbn ||
                    Isbn != null &&
                    Isbn.Equals(other.Isbn)
                ) && 
                (
                    Asin == other.Asin ||
                    Asin != null &&
                    Asin.Equals(other.Asin)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Sku == other.Sku ||
                    Sku != null &&
                    Sku.Equals(other.Sku)
                ) && 
                (
                    Mpn == other.Mpn ||
                    Mpn != null &&
                    Mpn.Equals(other.Mpn)
                ) && 
                (
                    PartNumber == other.PartNumber ||
                    PartNumber != null &&
                    PartNumber.Equals(other.PartNumber)
                ) && 
                (
                    Upcs == other.Upcs ||
                    Upcs != null &&
                    other.Upcs != null &&
                    Upcs.SequenceEqual(other.Upcs)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Brand == other.Brand ||
                    Brand != null &&
                    Brand.Equals(other.Brand)
                ) && 
                (
                    Manufacturer == other.Manufacturer ||
                    Manufacturer != null &&
                    Manufacturer.Equals(other.Manufacturer)
                ) && 
                (
                    Color == other.Color ||
                    Color != null &&
                    Color.Equals(other.Color)
                ) && 
                (
                    NewPrice == other.NewPrice ||
                    
                    NewPrice.Equals(other.NewPrice)
                ) && 
                (
                    UsedPrice == other.UsedPrice ||
                    
                    UsedPrice.Equals(other.UsedPrice)
                ) && 
                (
                    CurrencyCode == other.CurrencyCode ||
                    CurrencyCode != null &&
                    CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Features == other.Features ||
                    Features != null &&
                    other.Features != null &&
                    Features.SequenceEqual(other.Features)
                ) && 
                (
                    Dimensions == other.Dimensions ||
                    Dimensions != null &&
                    other.Dimensions != null &&
                    Dimensions.SequenceEqual(other.Dimensions)
                ) && 
                (
                    Images == other.Images ||
                    Images != null &&
                    other.Images != null &&
                    Images.SequenceEqual(other.Images)
                ) && 
                (
                    MatchedItems == other.MatchedItems ||
                    MatchedItems != null &&
                    other.MatchedItems != null &&
                    MatchedItems.SequenceEqual(other.MatchedItems)
                ) && 
                (
                    IsoCountryCodes == other.IsoCountryCodes ||
                    IsoCountryCodes != null &&
                    other.IsoCountryCodes != null &&
                    IsoCountryCodes.SequenceEqual(other.IsoCountryCodes)
                ) && 
                (
                    CompanyName == other.CompanyName ||
                    CompanyName != null &&
                    CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    CompanyAddress == other.CompanyAddress ||
                    CompanyAddress != null &&
                    CompanyAddress.Equals(other.CompanyAddress)
                ) && 
                (
                    Categories == other.Categories ||
                    Categories != null &&
                    other.Categories != null &&
                    Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    CategoryHierarchies == other.CategoryHierarchies ||
                    CategoryHierarchies != null &&
                    other.CategoryHierarchies != null &&
                    CategoryHierarchies.SequenceEqual(other.CategoryHierarchies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Upc != null)
                    hashCode = hashCode * 59 + Upc.GetHashCode();
                    if (Ean != null)
                    hashCode = hashCode * 59 + Ean.GetHashCode();
                    if (Isbn != null)
                    hashCode = hashCode * 59 + Isbn.GetHashCode();
                    if (Asin != null)
                    hashCode = hashCode * 59 + Asin.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Sku != null)
                    hashCode = hashCode * 59 + Sku.GetHashCode();
                    if (Mpn != null)
                    hashCode = hashCode * 59 + Mpn.GetHashCode();
                    if (PartNumber != null)
                    hashCode = hashCode * 59 + PartNumber.GetHashCode();
                    if (Upcs != null)
                    hashCode = hashCode * 59 + Upcs.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                    if (Manufacturer != null)
                    hashCode = hashCode * 59 + Manufacturer.GetHashCode();
                    if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                    
                    hashCode = hashCode * 59 + NewPrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + UsedPrice.GetHashCode();
                    if (CurrencyCode != null)
                    hashCode = hashCode * 59 + CurrencyCode.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Features != null)
                    hashCode = hashCode * 59 + Features.GetHashCode();
                    if (Dimensions != null)
                    hashCode = hashCode * 59 + Dimensions.GetHashCode();
                    if (Images != null)
                    hashCode = hashCode * 59 + Images.GetHashCode();
                    if (MatchedItems != null)
                    hashCode = hashCode * 59 + MatchedItems.GetHashCode();
                    if (IsoCountryCodes != null)
                    hashCode = hashCode * 59 + IsoCountryCodes.GetHashCode();
                    if (CompanyName != null)
                    hashCode = hashCode * 59 + CompanyName.GetHashCode();
                    if (CompanyAddress != null)
                    hashCode = hashCode * 59 + CompanyAddress.GetHashCode();
                    if (Categories != null)
                    hashCode = hashCode * 59 + Categories.GetHashCode();
                    if (CategoryHierarchies != null)
                    hashCode = hashCode * 59 + CategoryHierarchies.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Item left, Item right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Item left, Item right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
