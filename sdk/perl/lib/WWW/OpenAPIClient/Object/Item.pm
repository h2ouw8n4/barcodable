=begin comment

Barcodable.com API

Barcodable.com API

The version of the OpenAPI document: 1.5.0
Contact: support@barcodable.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::Item;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;


use base ("Class::Accessor", "Class::Data::Inheritable");

#
#
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

Barcodable.com API

Barcodable.com API

The version of the OpenAPI document: 1.5.0
Contact: support@barcodable.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'Item',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'upc' => {
        datatype => 'string',
        base_name => 'upc',
        description => '',
        format => '',
        read_only => '',
            },
    'ean' => {
        datatype => 'string',
        base_name => 'ean',
        description => '',
        format => '',
        read_only => '',
            },
    'isbn' => {
        datatype => 'string',
        base_name => 'isbn',
        description => '',
        format => '',
        read_only => '',
            },
    'asin' => {
        datatype => 'string',
        base_name => 'asin',
        description => '',
        format => '',
        read_only => '',
            },
    'title' => {
        datatype => 'string',
        base_name => 'title',
        description => '',
        format => '',
        read_only => '',
            },
    'sku' => {
        datatype => 'string',
        base_name => 'sku',
        description => '',
        format => '',
        read_only => '',
            },
    'mpn' => {
        datatype => 'string',
        base_name => 'mpn',
        description => '',
        format => '',
        read_only => '',
            },
    'part_number' => {
        datatype => 'string',
        base_name => 'part_number',
        description => '',
        format => '',
        read_only => '',
            },
    'upcs' => {
        datatype => 'ARRAY[string]',
        base_name => 'upcs',
        description => 'A list of matching upc codes.',
        format => '',
        read_only => '',
            },
    'description' => {
        datatype => 'string',
        base_name => 'description',
        description => '',
        format => '',
        read_only => '',
            },
    'brand' => {
        datatype => 'string',
        base_name => 'brand',
        description => '',
        format => '',
        read_only => '',
            },
    'manufacturer' => {
        datatype => 'string',
        base_name => 'manufacturer',
        description => '',
        format => '',
        read_only => '',
            },
    'color' => {
        datatype => 'string',
        base_name => 'color',
        description => '',
        format => '',
        read_only => '',
            },
    'new_price' => {
        datatype => 'double',
        base_name => 'new_price',
        description => '',
        format => '',
        read_only => '',
            },
    'used_price' => {
        datatype => 'double',
        base_name => 'used_price',
        description => '',
        format => '',
        read_only => '',
            },
    'currency_code' => {
        datatype => 'string',
        base_name => 'currency_code',
        description => '',
        format => '',
        read_only => '',
            },
    'url' => {
        datatype => 'string',
        base_name => 'url',
        description => '',
        format => '',
        read_only => '',
            },
    'features' => {
        datatype => 'ARRAY[string]',
        base_name => 'features',
        description => 'A list of product feature descriptions.',
        format => '',
        read_only => '',
            },
    'dimensions' => {
        datatype => 'ARRAY[object]',
        base_name => 'dimensions',
        description => 'Product dimensions and weight.  (&#39;meters&#39;, &#39;centimeters&#39;, &#39;millimeters&#39;, &#39;inches&#39;, &#39;feet&#39;, &#39;yards&#39;, &#39;ounces&#39;, &#39;pounds&#39;, &#39;grams&#39;, &#39;milligrams&#39;, &#39;kilograms&#39;)',
        format => '',
        read_only => '',
            },
    'images' => {
        datatype => 'ARRAY[string]',
        base_name => 'images',
        description => 'A list product images.',
        format => '',
        read_only => '',
            },
    'matched_items' => {
        datatype => 'ARRAY[object]',
        base_name => 'matched_items',
        description => 'Matched items for this product.',
        format => '',
        read_only => '',
            },
    'iso_country_codes' => {
        datatype => 'ARRAY[string]',
        base_name => 'iso_country_codes',
        description => 'A list of country codes from which this item belongs.',
        format => '',
        read_only => '',
            },
    'company_name' => {
        datatype => 'string',
        base_name => 'company_name',
        description => 'The company name registered to the product&#39;s UPC or EAN.',
        format => '',
        read_only => '',
            },
    'company_address' => {
        datatype => 'string',
        base_name => 'company_address',
        description => 'The company address registered to the product&#39;s UPC or EAN.',
        format => '',
        read_only => '',
            },
    'categories' => {
        datatype => 'ARRAY[string]',
        base_name => 'categories',
        description => 'A list of categories for this product.',
        format => '',
        read_only => '',
            },
    'category_hierarchies' => {
        datatype => 'ARRAY[string]',
        base_name => 'category_hierarchies',
        description => 'A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'upc' => 'string',
    'ean' => 'string',
    'isbn' => 'string',
    'asin' => 'string',
    'title' => 'string',
    'sku' => 'string',
    'mpn' => 'string',
    'part_number' => 'string',
    'upcs' => 'ARRAY[string]',
    'description' => 'string',
    'brand' => 'string',
    'manufacturer' => 'string',
    'color' => 'string',
    'new_price' => 'double',
    'used_price' => 'double',
    'currency_code' => 'string',
    'url' => 'string',
    'features' => 'ARRAY[string]',
    'dimensions' => 'ARRAY[object]',
    'images' => 'ARRAY[string]',
    'matched_items' => 'ARRAY[object]',
    'iso_country_codes' => 'ARRAY[string]',
    'company_name' => 'string',
    'company_address' => 'string',
    'categories' => 'ARRAY[string]',
    'category_hierarchies' => 'ARRAY[string]'
} );

__PACKAGE__->attribute_map( {
    'upc' => 'upc',
    'ean' => 'ean',
    'isbn' => 'isbn',
    'asin' => 'asin',
    'title' => 'title',
    'sku' => 'sku',
    'mpn' => 'mpn',
    'part_number' => 'part_number',
    'upcs' => 'upcs',
    'description' => 'description',
    'brand' => 'brand',
    'manufacturer' => 'manufacturer',
    'color' => 'color',
    'new_price' => 'new_price',
    'used_price' => 'used_price',
    'currency_code' => 'currency_code',
    'url' => 'url',
    'features' => 'features',
    'dimensions' => 'dimensions',
    'images' => 'images',
    'matched_items' => 'matched_items',
    'iso_country_codes' => 'iso_country_codes',
    'company_name' => 'company_name',
    'company_address' => 'company_address',
    'categories' => 'categories',
    'category_hierarchies' => 'category_hierarchies'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
