/**
* Barcodable.com API
* Barcodable.com API
*
* The version of the OpenAPI document: 1.5.0
* Contact: support@barcodable.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ProductConversionApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

ProductConversionApi::ProductConversionApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
}

void ProductConversionApi::init() {
    setupRoutes();
}

void ProductConversionApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/api/v1/convert/:upc | ean | asin", Routes::bind(&ProductConversionApi::convert_code_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&ProductConversionApi::product_conversion_api_default_handler, this));
}

void ProductConversionApi::convert_code_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto upc_Pipe_ean_Pipe_asin = request.param(":upc_Pipe_ean_Pipe_asin").as<std::string>();
    
    try {
      this->convert_code(upc_Pipe_ean_Pipe_asin, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}

void ProductConversionApi::product_conversion_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

