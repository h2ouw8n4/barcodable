/**
* Barcodable.com API
* Barcodable.com API
*
* OpenAPI spec version: 1.5.0
* Contact: support@barcodable.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ProductLookupApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

ProductLookupApi::ProductLookupApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void ProductLookupApi::init() {
    setupRoutes();
}

void ProductLookupApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/api/v1/asin/:asin", Routes::bind(&ProductLookupApi::get_item_by_asin_handler, this));
    Routes::Get(*router, base + "/api/v1/ean/:ean", Routes::bind(&ProductLookupApi::get_item_by_ean_handler, this));
    Routes::Get(*router, base + "/api/v1/upc/:upc", Routes::bind(&ProductLookupApi::get_item_by_upc_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&ProductLookupApi::product_lookup_api_default_handler, this));
}

void ProductLookupApi::get_item_by_asin_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto asin = request.param(":asin").as<std::string>();
    
    try {
      this->get_item_by_asin(asin, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ProductLookupApi::get_item_by_ean_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto ean = request.param(":ean").as<std::string>();
    
    try {
      this->get_item_by_ean(ean, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ProductLookupApi::get_item_by_upc_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto upc = request.param(":upc").as<std::string>();
    
    try {
      this->get_item_by_upc(upc, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void ProductLookupApi::product_lookup_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

