/**
* Barcodable.com API
* Barcodable.com API
*
* The version of the OpenAPI document: 1.5.0
* Contact: support@barcodable.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Item.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Item::Item()
{
    m_Upc = "";
    m_UpcIsSet = false;
    m_Ean = "";
    m_EanIsSet = false;
    m_Isbn = "";
    m_IsbnIsSet = false;
    m_Asin = "";
    m_AsinIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_Sku = "";
    m_SkuIsSet = false;
    m_Mpn = "";
    m_MpnIsSet = false;
    m_Part_number = "";
    m_Part_numberIsSet = false;
    m_UpcsIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Brand = "";
    m_BrandIsSet = false;
    m_Manufacturer = "";
    m_ManufacturerIsSet = false;
    m_Color = "";
    m_ColorIsSet = false;
    m_New_price = 0.0;
    m_New_priceIsSet = false;
    m_Used_price = 0.0;
    m_Used_priceIsSet = false;
    m_Currency_code = "";
    m_Currency_codeIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    m_FeaturesIsSet = false;
    m_DimensionsIsSet = false;
    m_ImagesIsSet = false;
    m_Matched_itemsIsSet = false;
    m_Iso_country_codesIsSet = false;
    m_Company_name = "";
    m_Company_nameIsSet = false;
    m_Company_address = "";
    m_Company_addressIsSet = false;
    m_CategoriesIsSet = false;
    m_Category_hierarchiesIsSet = false;
    
}

Item::~Item()
{
}

void Item::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const Item& o)
{
    j = nlohmann::json();
    if(o.upcIsSet())
        j["upc"] = o.m_Upc;
    if(o.eanIsSet())
        j["ean"] = o.m_Ean;
    if(o.isbnIsSet())
        j["isbn"] = o.m_Isbn;
    if(o.asinIsSet())
        j["asin"] = o.m_Asin;
    if(o.titleIsSet())
        j["title"] = o.m_Title;
    if(o.skuIsSet())
        j["sku"] = o.m_Sku;
    if(o.mpnIsSet())
        j["mpn"] = o.m_Mpn;
    if(o.partNumberIsSet())
        j["part_number"] = o.m_Part_number;
    if(o.upcsIsSet() || !o.m_Upcs.empty())
        j["upcs"] = o.m_Upcs;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.brandIsSet())
        j["brand"] = o.m_Brand;
    if(o.manufacturerIsSet())
        j["manufacturer"] = o.m_Manufacturer;
    if(o.colorIsSet())
        j["color"] = o.m_Color;
    if(o.newPriceIsSet())
        j["new_price"] = o.m_New_price;
    if(o.usedPriceIsSet())
        j["used_price"] = o.m_Used_price;
    if(o.currencyCodeIsSet())
        j["currency_code"] = o.m_Currency_code;
    if(o.urlIsSet())
        j["url"] = o.m_Url;
    if(o.featuresIsSet() || !o.m_Features.empty())
        j["features"] = o.m_Features;
    if(o.dimensionsIsSet() || !o.m_Dimensions.empty())
        j["dimensions"] = o.m_Dimensions;
    if(o.imagesIsSet() || !o.m_Images.empty())
        j["images"] = o.m_Images;
    if(o.matchedItemsIsSet() || !o.m_Matched_items.empty())
        j["matched_items"] = o.m_Matched_items;
    if(o.isoCountryCodesIsSet() || !o.m_Iso_country_codes.empty())
        j["iso_country_codes"] = o.m_Iso_country_codes;
    if(o.companyNameIsSet())
        j["company_name"] = o.m_Company_name;
    if(o.companyAddressIsSet())
        j["company_address"] = o.m_Company_address;
    if(o.categoriesIsSet() || !o.m_Categories.empty())
        j["categories"] = o.m_Categories;
    if(o.categoryHierarchiesIsSet() || !o.m_Category_hierarchies.empty())
        j["category_hierarchies"] = o.m_Category_hierarchies;
}

void from_json(const nlohmann::json& j, Item& o)
{
    if(j.find("upc") != j.end())
    {
        j.at("upc").get_to(o.m_Upc);
        o.m_UpcIsSet = true;
    } 
    if(j.find("ean") != j.end())
    {
        j.at("ean").get_to(o.m_Ean);
        o.m_EanIsSet = true;
    } 
    if(j.find("isbn") != j.end())
    {
        j.at("isbn").get_to(o.m_Isbn);
        o.m_IsbnIsSet = true;
    } 
    if(j.find("asin") != j.end())
    {
        j.at("asin").get_to(o.m_Asin);
        o.m_AsinIsSet = true;
    } 
    if(j.find("title") != j.end())
    {
        j.at("title").get_to(o.m_Title);
        o.m_TitleIsSet = true;
    } 
    if(j.find("sku") != j.end())
    {
        j.at("sku").get_to(o.m_Sku);
        o.m_SkuIsSet = true;
    } 
    if(j.find("mpn") != j.end())
    {
        j.at("mpn").get_to(o.m_Mpn);
        o.m_MpnIsSet = true;
    } 
    if(j.find("part_number") != j.end())
    {
        j.at("part_number").get_to(o.m_Part_number);
        o.m_Part_numberIsSet = true;
    } 
    if(j.find("upcs") != j.end())
    {
        j.at("upcs").get_to(o.m_Upcs);
        o.m_UpcsIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("brand") != j.end())
    {
        j.at("brand").get_to(o.m_Brand);
        o.m_BrandIsSet = true;
    } 
    if(j.find("manufacturer") != j.end())
    {
        j.at("manufacturer").get_to(o.m_Manufacturer);
        o.m_ManufacturerIsSet = true;
    } 
    if(j.find("color") != j.end())
    {
        j.at("color").get_to(o.m_Color);
        o.m_ColorIsSet = true;
    } 
    if(j.find("new_price") != j.end())
    {
        j.at("new_price").get_to(o.m_New_price);
        o.m_New_priceIsSet = true;
    } 
    if(j.find("used_price") != j.end())
    {
        j.at("used_price").get_to(o.m_Used_price);
        o.m_Used_priceIsSet = true;
    } 
    if(j.find("currency_code") != j.end())
    {
        j.at("currency_code").get_to(o.m_Currency_code);
        o.m_Currency_codeIsSet = true;
    } 
    if(j.find("url") != j.end())
    {
        j.at("url").get_to(o.m_Url);
        o.m_UrlIsSet = true;
    } 
    if(j.find("features") != j.end())
    {
        j.at("features").get_to(o.m_Features);
        o.m_FeaturesIsSet = true;
    } 
    if(j.find("dimensions") != j.end())
    {
        j.at("dimensions").get_to(o.m_Dimensions);
        o.m_DimensionsIsSet = true;
    } 
    if(j.find("images") != j.end())
    {
        j.at("images").get_to(o.m_Images);
        o.m_ImagesIsSet = true;
    } 
    if(j.find("matched_items") != j.end())
    {
        j.at("matched_items").get_to(o.m_Matched_items);
        o.m_Matched_itemsIsSet = true;
    } 
    if(j.find("iso_country_codes") != j.end())
    {
        j.at("iso_country_codes").get_to(o.m_Iso_country_codes);
        o.m_Iso_country_codesIsSet = true;
    } 
    if(j.find("company_name") != j.end())
    {
        j.at("company_name").get_to(o.m_Company_name);
        o.m_Company_nameIsSet = true;
    } 
    if(j.find("company_address") != j.end())
    {
        j.at("company_address").get_to(o.m_Company_address);
        o.m_Company_addressIsSet = true;
    } 
    if(j.find("categories") != j.end())
    {
        j.at("categories").get_to(o.m_Categories);
        o.m_CategoriesIsSet = true;
    } 
    if(j.find("category_hierarchies") != j.end())
    {
        j.at("category_hierarchies").get_to(o.m_Category_hierarchies);
        o.m_Category_hierarchiesIsSet = true;
    } 
}

std::string Item::getUpc() const
{
    return m_Upc;
}
void Item::setUpc(std::string const& value)
{
    m_Upc = value;
    m_UpcIsSet = true;
}
bool Item::upcIsSet() const
{
    return m_UpcIsSet;
}
void Item::unsetUpc()
{
    m_UpcIsSet = false;
}
std::string Item::getEan() const
{
    return m_Ean;
}
void Item::setEan(std::string const& value)
{
    m_Ean = value;
    m_EanIsSet = true;
}
bool Item::eanIsSet() const
{
    return m_EanIsSet;
}
void Item::unsetEan()
{
    m_EanIsSet = false;
}
std::string Item::getIsbn() const
{
    return m_Isbn;
}
void Item::setIsbn(std::string const& value)
{
    m_Isbn = value;
    m_IsbnIsSet = true;
}
bool Item::isbnIsSet() const
{
    return m_IsbnIsSet;
}
void Item::unsetIsbn()
{
    m_IsbnIsSet = false;
}
std::string Item::getAsin() const
{
    return m_Asin;
}
void Item::setAsin(std::string const& value)
{
    m_Asin = value;
    m_AsinIsSet = true;
}
bool Item::asinIsSet() const
{
    return m_AsinIsSet;
}
void Item::unsetAsin()
{
    m_AsinIsSet = false;
}
std::string Item::getTitle() const
{
    return m_Title;
}
void Item::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool Item::titleIsSet() const
{
    return m_TitleIsSet;
}
void Item::unsetTitle()
{
    m_TitleIsSet = false;
}
std::string Item::getSku() const
{
    return m_Sku;
}
void Item::setSku(std::string const& value)
{
    m_Sku = value;
    m_SkuIsSet = true;
}
bool Item::skuIsSet() const
{
    return m_SkuIsSet;
}
void Item::unsetSku()
{
    m_SkuIsSet = false;
}
std::string Item::getMpn() const
{
    return m_Mpn;
}
void Item::setMpn(std::string const& value)
{
    m_Mpn = value;
    m_MpnIsSet = true;
}
bool Item::mpnIsSet() const
{
    return m_MpnIsSet;
}
void Item::unsetMpn()
{
    m_MpnIsSet = false;
}
std::string Item::getPartNumber() const
{
    return m_Part_number;
}
void Item::setPartNumber(std::string const& value)
{
    m_Part_number = value;
    m_Part_numberIsSet = true;
}
bool Item::partNumberIsSet() const
{
    return m_Part_numberIsSet;
}
void Item::unsetPart_number()
{
    m_Part_numberIsSet = false;
}
std::vector<std::string>& Item::getUpcs()
{
    return m_Upcs;
}
void Item::setUpcs(std::vector<std::string> const& value)
{
    m_Upcs = value;
    m_UpcsIsSet = true;
}
bool Item::upcsIsSet() const
{
    return m_UpcsIsSet;
}
void Item::unsetUpcs()
{
    m_UpcsIsSet = false;
}
std::string Item::getDescription() const
{
    return m_Description;
}
void Item::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Item::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Item::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string Item::getBrand() const
{
    return m_Brand;
}
void Item::setBrand(std::string const& value)
{
    m_Brand = value;
    m_BrandIsSet = true;
}
bool Item::brandIsSet() const
{
    return m_BrandIsSet;
}
void Item::unsetBrand()
{
    m_BrandIsSet = false;
}
std::string Item::getManufacturer() const
{
    return m_Manufacturer;
}
void Item::setManufacturer(std::string const& value)
{
    m_Manufacturer = value;
    m_ManufacturerIsSet = true;
}
bool Item::manufacturerIsSet() const
{
    return m_ManufacturerIsSet;
}
void Item::unsetManufacturer()
{
    m_ManufacturerIsSet = false;
}
std::string Item::getColor() const
{
    return m_Color;
}
void Item::setColor(std::string const& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}
bool Item::colorIsSet() const
{
    return m_ColorIsSet;
}
void Item::unsetColor()
{
    m_ColorIsSet = false;
}
double Item::getNewPrice() const
{
    return m_New_price;
}
void Item::setNewPrice(double const value)
{
    m_New_price = value;
    m_New_priceIsSet = true;
}
bool Item::newPriceIsSet() const
{
    return m_New_priceIsSet;
}
void Item::unsetNew_price()
{
    m_New_priceIsSet = false;
}
double Item::getUsedPrice() const
{
    return m_Used_price;
}
void Item::setUsedPrice(double const value)
{
    m_Used_price = value;
    m_Used_priceIsSet = true;
}
bool Item::usedPriceIsSet() const
{
    return m_Used_priceIsSet;
}
void Item::unsetUsed_price()
{
    m_Used_priceIsSet = false;
}
std::string Item::getCurrencyCode() const
{
    return m_Currency_code;
}
void Item::setCurrencyCode(std::string const& value)
{
    m_Currency_code = value;
    m_Currency_codeIsSet = true;
}
bool Item::currencyCodeIsSet() const
{
    return m_Currency_codeIsSet;
}
void Item::unsetCurrency_code()
{
    m_Currency_codeIsSet = false;
}
std::string Item::getUrl() const
{
    return m_Url;
}
void Item::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool Item::urlIsSet() const
{
    return m_UrlIsSet;
}
void Item::unsetUrl()
{
    m_UrlIsSet = false;
}
std::vector<std::string>& Item::getFeatures()
{
    return m_Features;
}
void Item::setFeatures(std::vector<std::string> const& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}
bool Item::featuresIsSet() const
{
    return m_FeaturesIsSet;
}
void Item::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
std::vector<Object>& Item::getDimensions()
{
    return m_Dimensions;
}
void Item::setDimensions(std::vector<Object> const& value)
{
    m_Dimensions = value;
    m_DimensionsIsSet = true;
}
bool Item::dimensionsIsSet() const
{
    return m_DimensionsIsSet;
}
void Item::unsetDimensions()
{
    m_DimensionsIsSet = false;
}
std::vector<std::string>& Item::getImages()
{
    return m_Images;
}
void Item::setImages(std::vector<std::string> const& value)
{
    m_Images = value;
    m_ImagesIsSet = true;
}
bool Item::imagesIsSet() const
{
    return m_ImagesIsSet;
}
void Item::unsetImages()
{
    m_ImagesIsSet = false;
}
std::vector<Object>& Item::getMatchedItems()
{
    return m_Matched_items;
}
void Item::setMatchedItems(std::vector<Object> const& value)
{
    m_Matched_items = value;
    m_Matched_itemsIsSet = true;
}
bool Item::matchedItemsIsSet() const
{
    return m_Matched_itemsIsSet;
}
void Item::unsetMatched_items()
{
    m_Matched_itemsIsSet = false;
}
std::vector<std::string>& Item::getIsoCountryCodes()
{
    return m_Iso_country_codes;
}
void Item::setIsoCountryCodes(std::vector<std::string> const& value)
{
    m_Iso_country_codes = value;
    m_Iso_country_codesIsSet = true;
}
bool Item::isoCountryCodesIsSet() const
{
    return m_Iso_country_codesIsSet;
}
void Item::unsetIso_country_codes()
{
    m_Iso_country_codesIsSet = false;
}
std::string Item::getCompanyName() const
{
    return m_Company_name;
}
void Item::setCompanyName(std::string const& value)
{
    m_Company_name = value;
    m_Company_nameIsSet = true;
}
bool Item::companyNameIsSet() const
{
    return m_Company_nameIsSet;
}
void Item::unsetCompany_name()
{
    m_Company_nameIsSet = false;
}
std::string Item::getCompanyAddress() const
{
    return m_Company_address;
}
void Item::setCompanyAddress(std::string const& value)
{
    m_Company_address = value;
    m_Company_addressIsSet = true;
}
bool Item::companyAddressIsSet() const
{
    return m_Company_addressIsSet;
}
void Item::unsetCompany_address()
{
    m_Company_addressIsSet = false;
}
std::vector<std::string>& Item::getCategories()
{
    return m_Categories;
}
void Item::setCategories(std::vector<std::string> const& value)
{
    m_Categories = value;
    m_CategoriesIsSet = true;
}
bool Item::categoriesIsSet() const
{
    return m_CategoriesIsSet;
}
void Item::unsetCategories()
{
    m_CategoriesIsSet = false;
}
std::vector<std::string>& Item::getCategoryHierarchies()
{
    return m_Category_hierarchies;
}
void Item::setCategoryHierarchies(std::vector<std::string> const& value)
{
    m_Category_hierarchies = value;
    m_Category_hierarchiesIsSet = true;
}
bool Item::categoryHierarchiesIsSet() const
{
    return m_Category_hierarchiesIsSet;
}
void Item::unsetCategory_hierarchies()
{
    m_Category_hierarchiesIsSet = false;
}

}
}
}
}

