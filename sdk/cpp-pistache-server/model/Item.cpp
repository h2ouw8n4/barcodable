/**
* Barcodable.com API
* Barcodable.com API
*
* OpenAPI spec version: 1.5.0
* Contact: support@barcodable.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Item.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Item::Item()
{
    m_Upc = "";
    m_UpcIsSet = false;
    m_Ean = "";
    m_EanIsSet = false;
    m_Isbn = "";
    m_IsbnIsSet = false;
    m_Asin = "";
    m_AsinIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_Sku = "";
    m_SkuIsSet = false;
    m_Mpn = "";
    m_MpnIsSet = false;
    m_Part_number = "";
    m_Part_numberIsSet = false;
    m_UpcsIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Brand = "";
    m_BrandIsSet = false;
    m_Manufacturer = "";
    m_ManufacturerIsSet = false;
    m_Color = "";
    m_ColorIsSet = false;
    m_New_price = 0.0;
    m_New_priceIsSet = false;
    m_Used_price = 0.0;
    m_Used_priceIsSet = false;
    m_Currency_code = "";
    m_Currency_codeIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    m_FeaturesIsSet = false;
    m_DimensionsIsSet = false;
    m_ImagesIsSet = false;
    m_Matched_itemsIsSet = false;
    m_Iso_country_codesIsSet = false;
    m_Company_name = "";
    m_Company_nameIsSet = false;
    m_Company_address = "";
    m_Company_addressIsSet = false;
    m_CategoriesIsSet = false;
    m_Category_hierarchiesIsSet = false;
    
}

Item::~Item()
{
}

void Item::validate()
{
    // TODO: implement validation
}

nlohmann::json Item::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_UpcIsSet)
    {
        val["upc"] = ModelBase::toJson(m_Upc);
    }
    if(m_EanIsSet)
    {
        val["ean"] = ModelBase::toJson(m_Ean);
    }
    if(m_IsbnIsSet)
    {
        val["isbn"] = ModelBase::toJson(m_Isbn);
    }
    if(m_AsinIsSet)
    {
        val["asin"] = ModelBase::toJson(m_Asin);
    }
    if(m_TitleIsSet)
    {
        val["title"] = ModelBase::toJson(m_Title);
    }
    if(m_SkuIsSet)
    {
        val["sku"] = ModelBase::toJson(m_Sku);
    }
    if(m_MpnIsSet)
    {
        val["mpn"] = ModelBase::toJson(m_Mpn);
    }
    if(m_Part_numberIsSet)
    {
        val["part_number"] = ModelBase::toJson(m_Part_number);
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_Upcs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["upcs"] = jsonArray;
        } 
    }
    if(m_DescriptionIsSet)
    {
        val["description"] = ModelBase::toJson(m_Description);
    }
    if(m_BrandIsSet)
    {
        val["brand"] = ModelBase::toJson(m_Brand);
    }
    if(m_ManufacturerIsSet)
    {
        val["manufacturer"] = ModelBase::toJson(m_Manufacturer);
    }
    if(m_ColorIsSet)
    {
        val["color"] = ModelBase::toJson(m_Color);
    }
    if(m_New_priceIsSet)
    {
        val["new_price"] = m_New_price;
    }
    if(m_Used_priceIsSet)
    {
        val["used_price"] = m_Used_price;
    }
    if(m_Currency_codeIsSet)
    {
        val["currency_code"] = ModelBase::toJson(m_Currency_code);
    }
    if(m_UrlIsSet)
    {
        val["url"] = ModelBase::toJson(m_Url);
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_Features )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["features"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_Dimensions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["dimensions"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_Images )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["images"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_Matched_items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["matched_items"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_Iso_country_codes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["iso_country_codes"] = jsonArray;
        } 
    }
    if(m_Company_nameIsSet)
    {
        val["company_name"] = ModelBase::toJson(m_Company_name);
    }
    if(m_Company_addressIsSet)
    {
        val["company_address"] = ModelBase::toJson(m_Company_address);
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_Categories )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["categories"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_Category_hierarchies )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["category_hierarchies"] = jsonArray;
        } 
    }
    

    return val;
}

void Item::fromJson(const nlohmann::json& val)
{
    if(val.find("upc") != val.end())
    {
        setUpc(val.at("upc"));
    }
    if(val.find("ean") != val.end())
    {
        setEan(val.at("ean"));
    }
    if(val.find("isbn") != val.end())
    {
        setIsbn(val.at("isbn"));
    }
    if(val.find("asin") != val.end())
    {
        setAsin(val.at("asin"));
    }
    if(val.find("title") != val.end())
    {
        setTitle(val.at("title"));
    }
    if(val.find("sku") != val.end())
    {
        setSku(val.at("sku"));
    }
    if(val.find("mpn") != val.end())
    {
        setMpn(val.at("mpn"));
    }
    if(val.find("part_number") != val.end())
    {
        setPartNumber(val.at("part_number"));
    }
    {
        m_Upcs.clear();
        if(val.find("upcs") != val.end())
        {
            for( const auto& item : val["upcs"] )
            {
                m_Upcs.push_back(item);
                
            }
        }
    }
    if(val.find("description") != val.end())
    {
        setDescription(val.at("description"));
    }
    if(val.find("brand") != val.end())
    {
        setBrand(val.at("brand"));
    }
    if(val.find("manufacturer") != val.end())
    {
        setManufacturer(val.at("manufacturer"));
    }
    if(val.find("color") != val.end())
    {
        setColor(val.at("color"));
    }
    if(val.find("new_price") != val.end())
    {
        setNewPrice(val.at("new_price"));
    }
    if(val.find("used_price") != val.end())
    {
        setUsedPrice(val.at("used_price"));
    }
    if(val.find("currency_code") != val.end())
    {
        setCurrencyCode(val.at("currency_code"));
    }
    if(val.find("url") != val.end())
    {
        setUrl(val.at("url"));
    }
    {
        m_Features.clear();
        if(val.find("features") != val.end())
        {
            for( const auto& item : val["features"] )
            {
                m_Features.push_back(item);
                
            }
        }
    }
    {
        m_Dimensions.clear();
        if(val.find("dimensions") != val.end())
        {
            for( const auto& item : val["dimensions"] )
            {
                
                if(item.is_null())
                {
                    m_Dimensions.push_back( Object() );
                }
                else
                {
                    Object newItem;
                    newItem.fromJson(item);
                    m_Dimensions.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_Images.clear();
        if(val.find("images") != val.end())
        {
            for( const auto& item : val["images"] )
            {
                m_Images.push_back(item);
                
            }
        }
    }
    {
        m_Matched_items.clear();
        if(val.find("matched_items") != val.end())
        {
            for( const auto& item : val["matched_items"] )
            {
                
                if(item.is_null())
                {
                    m_Matched_items.push_back( Object() );
                }
                else
                {
                    Object newItem;
                    newItem.fromJson(item);
                    m_Matched_items.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_Iso_country_codes.clear();
        if(val.find("iso_country_codes") != val.end())
        {
            for( const auto& item : val["iso_country_codes"] )
            {
                m_Iso_country_codes.push_back(item);
                
            }
        }
    }
    if(val.find("company_name") != val.end())
    {
        setCompanyName(val.at("company_name"));
    }
    if(val.find("company_address") != val.end())
    {
        setCompanyAddress(val.at("company_address"));
    }
    {
        m_Categories.clear();
        if(val.find("categories") != val.end())
        {
            for( const auto& item : val["categories"] )
            {
                m_Categories.push_back(item);
                
            }
        }
    }
    {
        m_Category_hierarchies.clear();
        if(val.find("category_hierarchies") != val.end())
        {
            for( const auto& item : val["category_hierarchies"] )
            {
                m_Category_hierarchies.push_back(item);
                
            }
        }
    }
    
}


std::string Item::getUpc() const
{
    return m_Upc;
}
void Item::setUpc(std::string const& value)
{
    m_Upc = value;
    m_UpcIsSet = true;
}
bool Item::upcIsSet() const
{
    return m_UpcIsSet;
}
void Item::unsetUpc()
{
    m_UpcIsSet = false;
}
std::string Item::getEan() const
{
    return m_Ean;
}
void Item::setEan(std::string const& value)
{
    m_Ean = value;
    m_EanIsSet = true;
}
bool Item::eanIsSet() const
{
    return m_EanIsSet;
}
void Item::unsetEan()
{
    m_EanIsSet = false;
}
std::string Item::getIsbn() const
{
    return m_Isbn;
}
void Item::setIsbn(std::string const& value)
{
    m_Isbn = value;
    m_IsbnIsSet = true;
}
bool Item::isbnIsSet() const
{
    return m_IsbnIsSet;
}
void Item::unsetIsbn()
{
    m_IsbnIsSet = false;
}
std::string Item::getAsin() const
{
    return m_Asin;
}
void Item::setAsin(std::string const& value)
{
    m_Asin = value;
    m_AsinIsSet = true;
}
bool Item::asinIsSet() const
{
    return m_AsinIsSet;
}
void Item::unsetAsin()
{
    m_AsinIsSet = false;
}
std::string Item::getTitle() const
{
    return m_Title;
}
void Item::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool Item::titleIsSet() const
{
    return m_TitleIsSet;
}
void Item::unsetTitle()
{
    m_TitleIsSet = false;
}
std::string Item::getSku() const
{
    return m_Sku;
}
void Item::setSku(std::string const& value)
{
    m_Sku = value;
    m_SkuIsSet = true;
}
bool Item::skuIsSet() const
{
    return m_SkuIsSet;
}
void Item::unsetSku()
{
    m_SkuIsSet = false;
}
std::string Item::getMpn() const
{
    return m_Mpn;
}
void Item::setMpn(std::string const& value)
{
    m_Mpn = value;
    m_MpnIsSet = true;
}
bool Item::mpnIsSet() const
{
    return m_MpnIsSet;
}
void Item::unsetMpn()
{
    m_MpnIsSet = false;
}
std::string Item::getPartNumber() const
{
    return m_Part_number;
}
void Item::setPartNumber(std::string const& value)
{
    m_Part_number = value;
    m_Part_numberIsSet = true;
}
bool Item::partNumberIsSet() const
{
    return m_Part_numberIsSet;
}
void Item::unsetPart_number()
{
    m_Part_numberIsSet = false;
}
std::vector<std::string>& Item::getUpcs()
{
    return m_Upcs;
}
bool Item::upcsIsSet() const
{
    return m_UpcsIsSet;
}
void Item::unsetUpcs()
{
    m_UpcsIsSet = false;
}
std::string Item::getDescription() const
{
    return m_Description;
}
void Item::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Item::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Item::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string Item::getBrand() const
{
    return m_Brand;
}
void Item::setBrand(std::string const& value)
{
    m_Brand = value;
    m_BrandIsSet = true;
}
bool Item::brandIsSet() const
{
    return m_BrandIsSet;
}
void Item::unsetBrand()
{
    m_BrandIsSet = false;
}
std::string Item::getManufacturer() const
{
    return m_Manufacturer;
}
void Item::setManufacturer(std::string const& value)
{
    m_Manufacturer = value;
    m_ManufacturerIsSet = true;
}
bool Item::manufacturerIsSet() const
{
    return m_ManufacturerIsSet;
}
void Item::unsetManufacturer()
{
    m_ManufacturerIsSet = false;
}
std::string Item::getColor() const
{
    return m_Color;
}
void Item::setColor(std::string const& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}
bool Item::colorIsSet() const
{
    return m_ColorIsSet;
}
void Item::unsetColor()
{
    m_ColorIsSet = false;
}
double Item::getNewPrice() const
{
    return m_New_price;
}
void Item::setNewPrice(double const value)
{
    m_New_price = value;
    m_New_priceIsSet = true;
}
bool Item::newPriceIsSet() const
{
    return m_New_priceIsSet;
}
void Item::unsetNew_price()
{
    m_New_priceIsSet = false;
}
double Item::getUsedPrice() const
{
    return m_Used_price;
}
void Item::setUsedPrice(double const value)
{
    m_Used_price = value;
    m_Used_priceIsSet = true;
}
bool Item::usedPriceIsSet() const
{
    return m_Used_priceIsSet;
}
void Item::unsetUsed_price()
{
    m_Used_priceIsSet = false;
}
std::string Item::getCurrencyCode() const
{
    return m_Currency_code;
}
void Item::setCurrencyCode(std::string const& value)
{
    m_Currency_code = value;
    m_Currency_codeIsSet = true;
}
bool Item::currencyCodeIsSet() const
{
    return m_Currency_codeIsSet;
}
void Item::unsetCurrency_code()
{
    m_Currency_codeIsSet = false;
}
std::string Item::getUrl() const
{
    return m_Url;
}
void Item::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool Item::urlIsSet() const
{
    return m_UrlIsSet;
}
void Item::unsetUrl()
{
    m_UrlIsSet = false;
}
std::vector<std::string>& Item::getFeatures()
{
    return m_Features;
}
bool Item::featuresIsSet() const
{
    return m_FeaturesIsSet;
}
void Item::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
std::vector<Object>& Item::getDimensions()
{
    return m_Dimensions;
}
bool Item::dimensionsIsSet() const
{
    return m_DimensionsIsSet;
}
void Item::unsetDimensions()
{
    m_DimensionsIsSet = false;
}
std::vector<std::string>& Item::getImages()
{
    return m_Images;
}
bool Item::imagesIsSet() const
{
    return m_ImagesIsSet;
}
void Item::unsetImages()
{
    m_ImagesIsSet = false;
}
std::vector<Object>& Item::getMatchedItems()
{
    return m_Matched_items;
}
bool Item::matchedItemsIsSet() const
{
    return m_Matched_itemsIsSet;
}
void Item::unsetMatched_items()
{
    m_Matched_itemsIsSet = false;
}
std::vector<std::string>& Item::getIsoCountryCodes()
{
    return m_Iso_country_codes;
}
bool Item::isoCountryCodesIsSet() const
{
    return m_Iso_country_codesIsSet;
}
void Item::unsetIso_country_codes()
{
    m_Iso_country_codesIsSet = false;
}
std::string Item::getCompanyName() const
{
    return m_Company_name;
}
void Item::setCompanyName(std::string const& value)
{
    m_Company_name = value;
    m_Company_nameIsSet = true;
}
bool Item::companyNameIsSet() const
{
    return m_Company_nameIsSet;
}
void Item::unsetCompany_name()
{
    m_Company_nameIsSet = false;
}
std::string Item::getCompanyAddress() const
{
    return m_Company_address;
}
void Item::setCompanyAddress(std::string const& value)
{
    m_Company_address = value;
    m_Company_addressIsSet = true;
}
bool Item::companyAddressIsSet() const
{
    return m_Company_addressIsSet;
}
void Item::unsetCompany_address()
{
    m_Company_addressIsSet = false;
}
std::vector<std::string>& Item::getCategories()
{
    return m_Categories;
}
bool Item::categoriesIsSet() const
{
    return m_CategoriesIsSet;
}
void Item::unsetCategories()
{
    m_CategoriesIsSet = false;
}
std::vector<std::string>& Item::getCategoryHierarchies()
{
    return m_Category_hierarchies;
}
bool Item::categoryHierarchiesIsSet() const
{
    return m_Category_hierarchiesIsSet;
}
void Item::unsetCategory_hierarchies()
{
    m_Category_hierarchiesIsSet = false;
}

}
}
}
}

