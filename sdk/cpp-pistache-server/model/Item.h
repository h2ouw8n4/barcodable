/**
* Barcodable.com API
* Barcodable.com API
*
* OpenAPI spec version: 1.5.0
* Contact: support@barcodable.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Item.h
 *
 * 
 */

#ifndef Item_H_
#define Item_H_


#include "ModelBase.h"

#include <string>
#include "Object.h"
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Item
    : public ModelBase
{
public:
    Item();
    virtual ~Item();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// Item members

    /// <summary>
    /// 
    /// </summary>
    std::string getUpc() const;
    void setUpc(std::string const& value);
    bool upcIsSet() const;
    void unsetUpc();
    /// <summary>
    /// 
    /// </summary>
    std::string getEan() const;
    void setEan(std::string const& value);
    bool eanIsSet() const;
    void unsetEan();
    /// <summary>
    /// 
    /// </summary>
    std::string getIsbn() const;
    void setIsbn(std::string const& value);
    bool isbnIsSet() const;
    void unsetIsbn();
    /// <summary>
    /// 
    /// </summary>
    std::string getAsin() const;
    void setAsin(std::string const& value);
    bool asinIsSet() const;
    void unsetAsin();
    /// <summary>
    /// 
    /// </summary>
    std::string getTitle() const;
    void setTitle(std::string const& value);
    bool titleIsSet() const;
    void unsetTitle();
    /// <summary>
    /// 
    /// </summary>
    std::string getSku() const;
    void setSku(std::string const& value);
    bool skuIsSet() const;
    void unsetSku();
    /// <summary>
    /// 
    /// </summary>
    std::string getMpn() const;
    void setMpn(std::string const& value);
    bool mpnIsSet() const;
    void unsetMpn();
    /// <summary>
    /// 
    /// </summary>
    std::string getPartNumber() const;
    void setPartNumber(std::string const& value);
    bool partNumberIsSet() const;
    void unsetPart_number();
    /// <summary>
    /// A list of matching upc codes.
    /// </summary>
    std::vector<std::string>& getUpcs();
    bool upcsIsSet() const;
    void unsetUpcs();
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    std::string getBrand() const;
    void setBrand(std::string const& value);
    bool brandIsSet() const;
    void unsetBrand();
    /// <summary>
    /// 
    /// </summary>
    std::string getManufacturer() const;
    void setManufacturer(std::string const& value);
    bool manufacturerIsSet() const;
    void unsetManufacturer();
    /// <summary>
    /// 
    /// </summary>
    std::string getColor() const;
    void setColor(std::string const& value);
    bool colorIsSet() const;
    void unsetColor();
    /// <summary>
    /// 
    /// </summary>
    double getNewPrice() const;
    void setNewPrice(double const value);
    bool newPriceIsSet() const;
    void unsetNew_price();
    /// <summary>
    /// 
    /// </summary>
    double getUsedPrice() const;
    void setUsedPrice(double const value);
    bool usedPriceIsSet() const;
    void unsetUsed_price();
    /// <summary>
    /// 
    /// </summary>
    std::string getCurrencyCode() const;
    void setCurrencyCode(std::string const& value);
    bool currencyCodeIsSet() const;
    void unsetCurrency_code();
    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string const& value);
    bool urlIsSet() const;
    void unsetUrl();
    /// <summary>
    /// A list of product feature descriptions.
    /// </summary>
    std::vector<std::string>& getFeatures();
    bool featuresIsSet() const;
    void unsetFeatures();
    /// <summary>
    /// Product dimensions and weight.  (&#39;meters&#39;, &#39;centimeters&#39;, &#39;millimeters&#39;, &#39;inches&#39;, &#39;feet&#39;, &#39;yards&#39;, &#39;ounces&#39;, &#39;pounds&#39;, &#39;grams&#39;, &#39;milligrams&#39;, &#39;kilograms&#39;)
    /// </summary>
    std::vector<Object>& getDimensions();
    bool dimensionsIsSet() const;
    void unsetDimensions();
    /// <summary>
    /// A list product images.
    /// </summary>
    std::vector<std::string>& getImages();
    bool imagesIsSet() const;
    void unsetImages();
    /// <summary>
    /// Matched items for this product.
    /// </summary>
    std::vector<Object>& getMatchedItems();
    bool matchedItemsIsSet() const;
    void unsetMatched_items();
    /// <summary>
    /// A list of country codes from which this item belongs.
    /// </summary>
    std::vector<std::string>& getIsoCountryCodes();
    bool isoCountryCodesIsSet() const;
    void unsetIso_country_codes();
    /// <summary>
    /// The company name registered to the product&#39;s UPC or EAN.
    /// </summary>
    std::string getCompanyName() const;
    void setCompanyName(std::string const& value);
    bool companyNameIsSet() const;
    void unsetCompany_name();
    /// <summary>
    /// The company address registered to the product&#39;s UPC or EAN.
    /// </summary>
    std::string getCompanyAddress() const;
    void setCompanyAddress(std::string const& value);
    bool companyAddressIsSet() const;
    void unsetCompany_address();
    /// <summary>
    /// A list of categories for this product.
    /// </summary>
    std::vector<std::string>& getCategories();
    bool categoriesIsSet() const;
    void unsetCategories();
    /// <summary>
    /// A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.
    /// </summary>
    std::vector<std::string>& getCategoryHierarchies();
    bool categoryHierarchiesIsSet() const;
    void unsetCategory_hierarchies();

protected:
    std::string m_Upc;
    bool m_UpcIsSet;
    std::string m_Ean;
    bool m_EanIsSet;
    std::string m_Isbn;
    bool m_IsbnIsSet;
    std::string m_Asin;
    bool m_AsinIsSet;
    std::string m_Title;
    bool m_TitleIsSet;
    std::string m_Sku;
    bool m_SkuIsSet;
    std::string m_Mpn;
    bool m_MpnIsSet;
    std::string m_Part_number;
    bool m_Part_numberIsSet;
    std::vector<std::string> m_Upcs;
    bool m_UpcsIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::string m_Brand;
    bool m_BrandIsSet;
    std::string m_Manufacturer;
    bool m_ManufacturerIsSet;
    std::string m_Color;
    bool m_ColorIsSet;
    double m_New_price;
    bool m_New_priceIsSet;
    double m_Used_price;
    bool m_Used_priceIsSet;
    std::string m_Currency_code;
    bool m_Currency_codeIsSet;
    std::string m_Url;
    bool m_UrlIsSet;
    std::vector<std::string> m_Features;
    bool m_FeaturesIsSet;
    std::vector<Object> m_Dimensions;
    bool m_DimensionsIsSet;
    std::vector<std::string> m_Images;
    bool m_ImagesIsSet;
    std::vector<Object> m_Matched_items;
    bool m_Matched_itemsIsSet;
    std::vector<std::string> m_Iso_country_codes;
    bool m_Iso_country_codesIsSet;
    std::string m_Company_name;
    bool m_Company_nameIsSet;
    std::string m_Company_address;
    bool m_Company_addressIsSet;
    std::vector<std::string> m_Categories;
    bool m_CategoriesIsSet;
    std::vector<std::string> m_Category_hierarchies;
    bool m_Category_hierarchiesIsSet;
};

}
}
}
}

#endif /* Item_H_ */
