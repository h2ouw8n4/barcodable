/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InvalidCode', 'model/Item', 'model/NotFound'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InvalidCode'), require('../model/Item'), require('../model/NotFound'));
  } else {
    // Browser globals (root is window)
    if (!root.BarcodablecomApi) {
      root.BarcodablecomApi = {};
    }
    root.BarcodablecomApi.ProductLookupApi = factory(root.BarcodablecomApi.ApiClient, root.BarcodablecomApi.InvalidCode, root.BarcodablecomApi.Item, root.BarcodablecomApi.NotFound);
  }
}(this, function(ApiClient, InvalidCode, Item, NotFound) {
  'use strict';

  /**
   * ProductLookup service.
   * @module api/ProductLookupApi
   * @version 1.5.0
   */

  /**
   * Constructs a new ProductLookupApi. 
   * @alias module:api/ProductLookupApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getItemByASIN operation.
     * @callback module:api/ProductLookupApi~getItemByASINCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Item} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find item by asin code
     * Returns a single item
     * @param {String} asin ASIN code of item to return
     * @param {module:api/ProductLookupApi~getItemByASINCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Item}
     */
    this.getItemByASIN = function(asin, callback) {
      var postBody = null;

      // verify the required parameter 'asin' is set
      if (asin === undefined || asin === null) {
        throw new Error("Missing the required parameter 'asin' when calling getItemByASIN");
      }


      var pathParams = {
        'asin': asin
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Item;

      return this.apiClient.callApi(
        '/api/v1/asin/{asin}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemByEAN operation.
     * @callback module:api/ProductLookupApi~getItemByEANCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Item} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find item by UPC code
     * Returns a single item
     * @param {String} ean EAN code of item to return
     * @param {module:api/ProductLookupApi~getItemByEANCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Item}
     */
    this.getItemByEAN = function(ean, callback) {
      var postBody = null;

      // verify the required parameter 'ean' is set
      if (ean === undefined || ean === null) {
        throw new Error("Missing the required parameter 'ean' when calling getItemByEAN");
      }


      var pathParams = {
        'ean': ean
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Item;

      return this.apiClient.callApi(
        '/api/v1/ean/{ean}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemByUPC operation.
     * @callback module:api/ProductLookupApi~getItemByUPCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Item} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find item by UPC code
     * Returns a single item
     * @param {String} upc UPC code of item to return
     * @param {module:api/ProductLookupApi~getItemByUPCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Item}
     */
    this.getItemByUPC = function(upc, callback) {
      var postBody = null;

      // verify the required parameter 'upc' is set
      if (upc === undefined || upc === null) {
        throw new Error("Missing the required parameter 'upc' when calling getItemByUPC");
      }


      var pathParams = {
        'upc': upc
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Item;

      return this.apiClient.callApi(
        '/api/v1/upc/{upc}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
