/*
 * Barcodable.com API
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InvalidCode;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.NotFound;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductLookupApi {
    private ApiClient localVarApiClient;

    public ProductLookupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductLookupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getItemByASIN
     * @param asin ASIN code of item to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemByASINCall(String asin, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/asin/{asin}"
            .replaceAll("\\{" + "asin" + "\\}", localVarApiClient.escapeString(asin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemByASINValidateBeforeCall(String asin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'asin' is set
        if (asin == null) {
            throw new ApiException("Missing the required parameter 'asin' when calling getItemByASIN(Async)");
        }
        

        okhttp3.Call localVarCall = getItemByASINCall(asin, _callback);
        return localVarCall;

    }

    /**
     * Find item by asin code
     * Returns a single item
     * @param asin ASIN code of item to return (required)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Item getItemByASIN(String asin) throws ApiException {
        ApiResponse<Item> localVarResp = getItemByASINWithHttpInfo(asin);
        return localVarResp.getData();
    }

    /**
     * Find item by asin code
     * Returns a single item
     * @param asin ASIN code of item to return (required)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Item> getItemByASINWithHttpInfo(String asin) throws ApiException {
        okhttp3.Call localVarCall = getItemByASINValidateBeforeCall(asin, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find item by asin code (asynchronously)
     * Returns a single item
     * @param asin ASIN code of item to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemByASINAsync(String asin, final ApiCallback<Item> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemByASINValidateBeforeCall(asin, _callback);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemByEAN
     * @param ean EAN code of item to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemByEANCall(String ean, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ean/{ean}"
            .replaceAll("\\{" + "ean" + "\\}", localVarApiClient.escapeString(ean.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemByEANValidateBeforeCall(String ean, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ean' is set
        if (ean == null) {
            throw new ApiException("Missing the required parameter 'ean' when calling getItemByEAN(Async)");
        }
        

        okhttp3.Call localVarCall = getItemByEANCall(ean, _callback);
        return localVarCall;

    }

    /**
     * Find item by UPC code
     * Returns a single item
     * @param ean EAN code of item to return (required)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Item getItemByEAN(String ean) throws ApiException {
        ApiResponse<Item> localVarResp = getItemByEANWithHttpInfo(ean);
        return localVarResp.getData();
    }

    /**
     * Find item by UPC code
     * Returns a single item
     * @param ean EAN code of item to return (required)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Item> getItemByEANWithHttpInfo(String ean) throws ApiException {
        okhttp3.Call localVarCall = getItemByEANValidateBeforeCall(ean, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find item by UPC code (asynchronously)
     * Returns a single item
     * @param ean EAN code of item to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemByEANAsync(String ean, final ApiCallback<Item> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemByEANValidateBeforeCall(ean, _callback);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemByUPC
     * @param upc UPC code of item to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemByUPCCall(String upc, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/upc/{upc}"
            .replaceAll("\\{" + "upc" + "\\}", localVarApiClient.escapeString(upc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemByUPCValidateBeforeCall(String upc, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'upc' is set
        if (upc == null) {
            throw new ApiException("Missing the required parameter 'upc' when calling getItemByUPC(Async)");
        }
        

        okhttp3.Call localVarCall = getItemByUPCCall(upc, _callback);
        return localVarCall;

    }

    /**
     * Find item by UPC code
     * Returns a single item
     * @param upc UPC code of item to return (required)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Item getItemByUPC(String upc) throws ApiException {
        ApiResponse<Item> localVarResp = getItemByUPCWithHttpInfo(upc);
        return localVarResp.getData();
    }

    /**
     * Find item by UPC code
     * Returns a single item
     * @param upc UPC code of item to return (required)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Item> getItemByUPCWithHttpInfo(String upc) throws ApiException {
        okhttp3.Call localVarCall = getItemByUPCValidateBeforeCall(upc, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find item by UPC code (asynchronously)
     * Returns a single item
     * @param upc UPC code of item to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return &#39;false&#39;. <br>  * X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan. <br>  * X-RateLimit-Remaining - An integer specifying the number of remaining requests per day. <br>  * X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset. <br>  </td></tr>
        <tr><td> 400 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemByUPCAsync(String upc, final ApiCallback<Item> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemByUPCValidateBeforeCall(upc, _callback);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
