/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.InlineResponse200
import org.openapitools.client.model.InlineResponse400
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object ProductConversionApi {

  /**
   * Returns the converted UPC, EAN, and ASIN codes.
   * 
   * Expected answers:
   *   code 200 : InlineResponse200 (successful operation)
   *              Headers :
   *                X-ValidAuthorization - A boolean indicating whether the API key in use is valid. Requests with an invalid subscription, incorrect key, or no key will return 'false'.
   *                X-RateLimit-Limit - An integer specifying the number of requests available per day. This number is definied by your subscription plan.
   *                X-RateLimit-Remaining - An integer specifying the number of remaining requests per day.
   *                X-RateLimit-Reset - A timestamp specifying the time in which the daily rate limit is reset.
   *   code 400 : InlineResponse400 (search results matching criteria)
   * 
   * @param upcEanAsin UPC, EAN, or ASIN
   */
  def convertCode(upcEanAsin: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://virtserver.swaggerhub.com/mindviser/barcodable/1.0.0", "/api/v1/convert/{upc | ean | asin}", "application/json")
      .withPathParam("upc | ean | asin", upcEanAsin)
      .withSuccessResponse[InlineResponse200](200)
      .withErrorResponse[InlineResponse400](400)
      
  object ConvertCodeHeaders { 
    def xValidAuthorization(r: ApiReturnWithHeaders) = r.getBooleanHeader("X-ValidAuthorization")
    def xRateLimitLimit(r: ApiReturnWithHeaders) = r.getIntHeader("X-RateLimit-Limit")
    def xRateLimitRemaining(r: ApiReturnWithHeaders) = r.getIntHeader("X-RateLimit-Remaining")
    def xRateLimitReset(r: ApiReturnWithHeaders) = r.getDateTimeHeader("X-RateLimit-Reset")
  }


}

