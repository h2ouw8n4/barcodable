// @flow
/* eslint-disable no-use-before-define */
/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://virtserver.swaggerhub.com/mindviser/barcodable/1.0.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}


/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type InlineResponse200 = {
    /**
     * A list of UPCs
     * @type {Array<string>}
     * @memberof InlineResponse200
     */
    upcs?: Array<string>;
    /**
     * A list of EANs
     * @type {Array<string>}
     * @memberof InlineResponse200
     */
    eans?: Array<string>;
    /**
     * A list of ASINs
     * @type {Array<string>}
     * @memberof InlineResponse200
     */
    asins?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    message?: string;
}


/**
 * 
 * @export
 */
export type InlineResponse400 = {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse400
     */
    status?: number;
}


/**
 * 
 * @export
 */
export type InvalidCode = {
    /**
     * 
     * @type {string}
     * @memberof InvalidCode
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof InvalidCode
     */
    status?: number;
}


/**
 * 
 * @export
 */
export type Item = {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    upc?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    ean?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    isbn?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    asin?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    sku?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    mpn?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    partNumber?: string;
    /**
     * A list of matching upc codes.
     * @type {Array<string>}
     * @memberof Item
     */
    upcs?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    brand?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    manufacturer?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    color?: string;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    newPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    usedPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    url?: string;
    /**
     * A list of product feature descriptions.
     * @type {Array<string>}
     * @memberof Item
     */
    features?: Array<string>;
    /**
     * Product dimensions and weight.  ('meters', 'centimeters', 'millimeters', 'inches', 'feet', 'yards', 'ounces', 'pounds', 'grams', 'milligrams', 'kilograms')
     * @type {Array<Object>}
     * @memberof Item
     */
    dimensions?: Array<Object>;
    /**
     * A list product images.
     * @type {Array<string>}
     * @memberof Item
     */
    images?: Array<string>;
    /**
     * Matched items for this product.
     * @type {Array<Object>}
     * @memberof Item
     */
    matchedItems?: Array<Object>;
    /**
     * A list of country codes from which this item belongs.
     * @type {Array<string>}
     * @memberof Item
     */
    isoCountryCodes?: Array<string>;
    /**
     * The company name registered to the product's UPC or EAN.
     * @type {string}
     * @memberof Item
     */
    companyName?: string;
    /**
     * The company address registered to the product's UPC or EAN.
     * @type {string}
     * @memberof Item
     */
    companyAddress?: string;
    /**
     * A list of categories for this product.
     * @type {Array<string>}
     * @memberof Item
     */
    categories?: Array<string>;
    /**
     * A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.
     * @type {Array<string>}
     * @memberof Item
     */
    categoryHierarchies?: Array<string>;
}


/**
 * 
 * @export
 */
export type NotFound = {
    /**
     * 
     * @type {string}
     * @memberof NotFound
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof NotFound
     */
    status?: number;
}




/**
 * ProductConversionApi - fetch parameter creator
 * @export
 */
export const ProductConversionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the converted UPC, EAN, and ASIN codes.
         * @summary Convert between UPC, EAN, and ASIN product codes.
         * @throws {RequiredError}
         */
        convertCode(upcEanAsin: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'upcEanAsin' is not null or undefined
            if (upcEanAsin === null || upcEanAsin === undefined) {
                throw new RequiredError('upcEanAsin','Required parameter upcEanAsin was null or undefined when calling convertCode.');
            }
            const localVarPath = `/api/v1/convert/{upc | ean | asin}`
                .replace(`{${"upc | ean | asin"}}`, encodeURIComponent(String(upcEanAsin)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ProductConversionApiType = { 
    convertCode(upcEanAsin: string, options?: RequestOptions): Promise<InlineResponse200>,
}

/**
 * ProductConversionApi - factory function to inject configuration 
 * @export
 */
export const ProductConversionApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ProductConversionApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Returns the converted UPC, EAN, and ASIN codes.
         * @summary Convert between UPC, EAN, and ASIN product codes.
         * @throws {RequiredError}
         */
        convertCode(upcEanAsin: string, options?: RequestOptions = {}): Promise<InlineResponse200> {
            const localVarFetchArgs = ProductConversionApiFetchParamCreator(configuration).convertCode(upcEanAsin, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * ProductLookupApi - fetch parameter creator
 * @export
 */
export const ProductLookupApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single item
         * @summary Find item by asin code
         * @throws {RequiredError}
         */
        getItemByASIN(asin: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'asin' is not null or undefined
            if (asin === null || asin === undefined) {
                throw new RequiredError('asin','Required parameter asin was null or undefined when calling getItemByASIN.');
            }
            const localVarPath = `/api/v1/asin/{asin}`
                .replace(`{${"asin"}}`, encodeURIComponent(String(asin)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single item
         * @summary Find item by UPC code
         * @throws {RequiredError}
         */
        getItemByEAN(ean: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'ean' is not null or undefined
            if (ean === null || ean === undefined) {
                throw new RequiredError('ean','Required parameter ean was null or undefined when calling getItemByEAN.');
            }
            const localVarPath = `/api/v1/ean/{ean}`
                .replace(`{${"ean"}}`, encodeURIComponent(String(ean)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single item
         * @summary Find item by UPC code
         * @throws {RequiredError}
         */
        getItemByUPC(upc: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'upc' is not null or undefined
            if (upc === null || upc === undefined) {
                throw new RequiredError('upc','Required parameter upc was null or undefined when calling getItemByUPC.');
            }
            const localVarPath = `/api/v1/upc/{upc}`
                .replace(`{${"upc"}}`, encodeURIComponent(String(upc)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ProductLookupApiType = { 
    getItemByASIN(asin: string, options?: RequestOptions): Promise<Item>,

    getItemByEAN(ean: string, options?: RequestOptions): Promise<Item>,

    getItemByUPC(upc: string, options?: RequestOptions): Promise<Item>,
}

/**
 * ProductLookupApi - factory function to inject configuration 
 * @export
 */
export const ProductLookupApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ProductLookupApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Returns a single item
         * @summary Find item by asin code
         * @throws {RequiredError}
         */
        getItemByASIN(asin: string, options?: RequestOptions = {}): Promise<Item> {
            const localVarFetchArgs = ProductLookupApiFetchParamCreator(configuration).getItemByASIN(asin, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns a single item
         * @summary Find item by UPC code
         * @throws {RequiredError}
         */
        getItemByEAN(ean: string, options?: RequestOptions = {}): Promise<Item> {
            const localVarFetchArgs = ProductLookupApiFetchParamCreator(configuration).getItemByEAN(ean, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns a single item
         * @summary Find item by UPC code
         * @throws {RequiredError}
         */
        getItemByUPC(upc: string, options?: RequestOptions = {}): Promise<Item> {
            const localVarFetchArgs = ProductLookupApiFetchParamCreator(configuration).getItemByUPC(upc, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

export type ApiTypes = { 
    ProductConversionApi: ProductConversionApiType,

    ProductLookupApi: ProductLookupApiType,
 }
