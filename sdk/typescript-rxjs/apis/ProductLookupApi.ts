// tslint:disable
/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, RequiredError, HttpHeaders, HttpQuery, COLLECTION_FORMATS } from '../runtime';
import {
    InvalidCode,
    Item,
    NotFound,
} from '../models';

export interface GetItemByASINRequest {
    asin: string;
}

export interface GetItemByEANRequest {
    ean: string;
}

export interface GetItemByUPCRequest {
    upc: string;
}

/**
 * no description
 */
export class ProductLookupApi extends BaseAPI {

    /**
     * Returns a single item
     * Find item by asin code
     */
    getItemByASINRaw(requestParameters: GetItemByASINRequest): Observable<Item> {
        if (requestParameters.asin === null || requestParameters.asin === undefined) {
            throw new RequiredError('asin','Required parameter requestParameters.asin was null or undefined when calling getItemByASIN.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<Item>({
            path: `/api/v1/asin/{asin}`.replace(`{${"asin"}}`, encodeURIComponent(String(requestParameters.asin))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Returns a single item
     * Find item by asin code
     */
    getItemByASIN(requestParameters: GetItemByASINRequest): Observable<Item> {
        return this.getItemByASINRaw(requestParameters);
    }

    /**
     * Returns a single item
     * Find item by UPC code
     */
    getItemByEANRaw(requestParameters: GetItemByEANRequest): Observable<Item> {
        if (requestParameters.ean === null || requestParameters.ean === undefined) {
            throw new RequiredError('ean','Required parameter requestParameters.ean was null or undefined when calling getItemByEAN.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<Item>({
            path: `/api/v1/ean/{ean}`.replace(`{${"ean"}}`, encodeURIComponent(String(requestParameters.ean))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Returns a single item
     * Find item by UPC code
     */
    getItemByEAN(requestParameters: GetItemByEANRequest): Observable<Item> {
        return this.getItemByEANRaw(requestParameters);
    }

    /**
     * Returns a single item
     * Find item by UPC code
     */
    getItemByUPCRaw(requestParameters: GetItemByUPCRequest): Observable<Item> {
        if (requestParameters.upc === null || requestParameters.upc === undefined) {
            throw new RequiredError('upc','Required parameter requestParameters.upc was null or undefined when calling getItemByUPC.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<Item>({
            path: `/api/v1/upc/{upc}`.replace(`{${"upc"}}`, encodeURIComponent(String(requestParameters.upc))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Returns a single item
     * Find item by UPC code
     */
    getItemByUPC(requestParameters: GetItemByUPCRequest): Observable<Item> {
        return this.getItemByUPCRaw(requestParameters);
    }

}
