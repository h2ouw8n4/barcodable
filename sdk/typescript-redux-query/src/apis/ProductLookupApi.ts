// tslint:disable
/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    InvalidCode,
    InvalidCodeFromJSON,
    InvalidCodeToJSON,
    Item,
    ItemFromJSON,
    ItemToJSON,
    NotFound,
    NotFoundFromJSON,
    NotFoundToJSON,
} from '../models';

export interface GetItemByASINRequest {
    asin: string;
}

export interface GetItemByEANRequest {
    ean: string;
}

export interface GetItemByUPCRequest {
    upc: string;
}


/**
 * Returns a single item
 * Find item by asin code
 */
function getItemByASINRaw<T>(requestParameters: GetItemByASINRequest, requestConfig: runtime.TypedQueryConfig<T, Item> = {}): QueryConfig<T> {
    if (requestParameters.asin === null || requestParameters.asin === undefined) {
        throw new runtime.RequiredError('asin','Required parameter requestParameters.asin was null or undefined when calling getItemByASIN.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/api/v1/asin/{asin}`.replace(`{${"asin"}}`, encodeURIComponent(String(requestParameters.asin))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ItemFromJSON(body), text);
    }

    return config;
}

/**
* Returns a single item
* Find item by asin code
*/
export function getItemByASIN<T>(requestParameters: GetItemByASINRequest, requestConfig?: runtime.TypedQueryConfig<T, Item>): QueryConfig<T> {
    return getItemByASINRaw(requestParameters, requestConfig);
}

/**
 * Returns a single item
 * Find item by UPC code
 */
function getItemByEANRaw<T>(requestParameters: GetItemByEANRequest, requestConfig: runtime.TypedQueryConfig<T, Item> = {}): QueryConfig<T> {
    if (requestParameters.ean === null || requestParameters.ean === undefined) {
        throw new runtime.RequiredError('ean','Required parameter requestParameters.ean was null or undefined when calling getItemByEAN.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/api/v1/ean/{ean}`.replace(`{${"ean"}}`, encodeURIComponent(String(requestParameters.ean))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ItemFromJSON(body), text);
    }

    return config;
}

/**
* Returns a single item
* Find item by UPC code
*/
export function getItemByEAN<T>(requestParameters: GetItemByEANRequest, requestConfig?: runtime.TypedQueryConfig<T, Item>): QueryConfig<T> {
    return getItemByEANRaw(requestParameters, requestConfig);
}

/**
 * Returns a single item
 * Find item by UPC code
 */
function getItemByUPCRaw<T>(requestParameters: GetItemByUPCRequest, requestConfig: runtime.TypedQueryConfig<T, Item> = {}): QueryConfig<T> {
    if (requestParameters.upc === null || requestParameters.upc === undefined) {
        throw new runtime.RequiredError('upc','Required parameter requestParameters.upc was null or undefined when calling getItemByUPC.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/api/v1/upc/{upc}`.replace(`{${"upc"}}`, encodeURIComponent(String(requestParameters.upc))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ItemFromJSON(body), text);
    }

    return config;
}

/**
* Returns a single item
* Find item by UPC code
*/
export function getItemByUPC<T>(requestParameters: GetItemByUPCRequest, requestConfig?: runtime.TypedQueryConfig<T, Item>): QueryConfig<T> {
    return getItemByUPCRaw(requestParameters, requestConfig);
}

