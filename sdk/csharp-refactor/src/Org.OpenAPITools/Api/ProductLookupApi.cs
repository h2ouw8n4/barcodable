/* 
 * Barcodable.com API
 *
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductLookupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find item by asin code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN code of item to return</param>
        /// <returns>Item</returns>
        Item GetItemByASIN (string asin);

        /// <summary>
        /// Find item by asin code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN code of item to return</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> GetItemByASINWithHttpInfo (string asin);
        /// <summary>
        /// Find item by UPC code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ean">EAN code of item to return</param>
        /// <returns>Item</returns>
        Item GetItemByEAN (string ean);

        /// <summary>
        /// Find item by UPC code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ean">EAN code of item to return</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> GetItemByEANWithHttpInfo (string ean);
        /// <summary>
        /// Find item by UPC code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">UPC code of item to return</param>
        /// <returns>Item</returns>
        Item GetItemByUPC (string upc);

        /// <summary>
        /// Find item by UPC code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">UPC code of item to return</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> GetItemByUPCWithHttpInfo (string upc);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductLookupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Find item by asin code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN code of item to return</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> GetItemByASINAsync (string asin);

        /// <summary>
        /// Find item by asin code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN code of item to return</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> GetItemByASINAsyncWithHttpInfo (string asin);
        /// <summary>
        /// Find item by UPC code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ean">EAN code of item to return</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> GetItemByEANAsync (string ean);

        /// <summary>
        /// Find item by UPC code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ean">EAN code of item to return</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> GetItemByEANAsyncWithHttpInfo (string ean);
        /// <summary>
        /// Find item by UPC code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">UPC code of item to return</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> GetItemByUPCAsync (string upc);

        /// <summary>
        /// Find item by UPC code
        /// </summary>
        /// <remarks>
        /// Returns a single item
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">UPC code of item to return</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> GetItemByUPCAsyncWithHttpInfo (string upc);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductLookupApi : IProductLookupApiSync, IProductLookupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductLookupApi : IProductLookupApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductLookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductLookupApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductLookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductLookupApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductLookupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductLookupApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductLookupApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Find item by asin code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN code of item to return</param>
        /// <returns>Item</returns>
        public Item GetItemByASIN (string asin)
        {
             Org.OpenAPITools.Client.ApiResponse<Item> localVarResponse = GetItemByASINWithHttpInfo(asin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find item by asin code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN code of item to return</param>
        /// <returns>ApiResponse of Item</returns>
        public Org.OpenAPITools.Client.ApiResponse< Item > GetItemByASINWithHttpInfo (string asin)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asin' when calling ProductLookupApi->GetItemByASIN");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarConentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarConentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarConentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (asin != null)
                requestOptions.PathParameters.Add("asin", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asin)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Item >("/api/v1/asin/{asin}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetItemByASIN", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Find item by asin code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN code of item to return</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> GetItemByASINAsync (string asin)
        {
             Org.OpenAPITools.Client.ApiResponse<Item> localVarResponse = await GetItemByASINAsyncWithHttpInfo(asin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find item by asin code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">ASIN code of item to return</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Item>> GetItemByASINAsyncWithHttpInfo (string asin)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asin' when calling ProductLookupApi->GetItemByASIN");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (asin != null)
                requestOptions.PathParameters.Add("asin", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asin)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Item>("/api/v1/asin/{asin}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetItemByASIN", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Find item by UPC code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ean">EAN code of item to return</param>
        /// <returns>Item</returns>
        public Item GetItemByEAN (string ean)
        {
             Org.OpenAPITools.Client.ApiResponse<Item> localVarResponse = GetItemByEANWithHttpInfo(ean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find item by UPC code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ean">EAN code of item to return</param>
        /// <returns>ApiResponse of Item</returns>
        public Org.OpenAPITools.Client.ApiResponse< Item > GetItemByEANWithHttpInfo (string ean)
        {
            // verify the required parameter 'ean' is set
            if (ean == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ean' when calling ProductLookupApi->GetItemByEAN");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarConentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarConentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarConentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ean != null)
                requestOptions.PathParameters.Add("ean", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ean)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Item >("/api/v1/ean/{ean}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetItemByEAN", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Find item by UPC code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ean">EAN code of item to return</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> GetItemByEANAsync (string ean)
        {
             Org.OpenAPITools.Client.ApiResponse<Item> localVarResponse = await GetItemByEANAsyncWithHttpInfo(ean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find item by UPC code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ean">EAN code of item to return</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Item>> GetItemByEANAsyncWithHttpInfo (string ean)
        {
            // verify the required parameter 'ean' is set
            if (ean == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ean' when calling ProductLookupApi->GetItemByEAN");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (ean != null)
                requestOptions.PathParameters.Add("ean", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ean)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Item>("/api/v1/ean/{ean}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetItemByEAN", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Find item by UPC code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">UPC code of item to return</param>
        /// <returns>Item</returns>
        public Item GetItemByUPC (string upc)
        {
             Org.OpenAPITools.Client.ApiResponse<Item> localVarResponse = GetItemByUPCWithHttpInfo(upc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find item by UPC code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">UPC code of item to return</param>
        /// <returns>ApiResponse of Item</returns>
        public Org.OpenAPITools.Client.ApiResponse< Item > GetItemByUPCWithHttpInfo (string upc)
        {
            // verify the required parameter 'upc' is set
            if (upc == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'upc' when calling ProductLookupApi->GetItemByUPC");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarConentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarConentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarConentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (upc != null)
                requestOptions.PathParameters.Add("upc", Org.OpenAPITools.Client.ClientUtils.ParameterToString(upc)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Item >("/api/v1/upc/{upc}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetItemByUPC", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Find item by UPC code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">UPC code of item to return</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> GetItemByUPCAsync (string upc)
        {
             Org.OpenAPITools.Client.ApiResponse<Item> localVarResponse = await GetItemByUPCAsyncWithHttpInfo(upc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find item by UPC code Returns a single item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">UPC code of item to return</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Item>> GetItemByUPCAsyncWithHttpInfo (string upc)
        {
            // verify the required parameter 'upc' is set
            if (upc == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'upc' when calling ProductLookupApi->GetItemByUPC");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (upc != null)
                requestOptions.PathParameters.Add("upc", Org.OpenAPITools.Client.ClientUtils.ParameterToString(upc)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Item>("/api/v1/upc/{upc}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetItemByUPC", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
