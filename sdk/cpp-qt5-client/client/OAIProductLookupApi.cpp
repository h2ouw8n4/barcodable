/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductLookupApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIProductLookupApi::OAIProductLookupApi() {

}

OAIProductLookupApi::~OAIProductLookupApi() {

}

OAIProductLookupApi::OAIProductLookupApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIProductLookupApi::getItemByASIN(const QString& asin) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/v1/asin/{asin}");
    QString asinPathParam("{"); 
    asinPathParam.append("asin").append("}");
    fullPath.replace(asinPathParam, ::OpenAPI::toStringValue(asin));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIProductLookupApi::getItemByASINCallback);

    worker->execute(&input);
}

void
OAIProductLookupApi::getItemByASINCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIItem output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getItemByASINSignal(output);
        emit getItemByASINSignalFull(worker, output);
    } else {
        emit getItemByASINSignalE(output, error_type, error_str);
        emit getItemByASINSignalEFull(worker, error_type, error_str);
    }
}

void
OAIProductLookupApi::getItemByEAN(const QString& ean) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/v1/ean/{ean}");
    QString eanPathParam("{"); 
    eanPathParam.append("ean").append("}");
    fullPath.replace(eanPathParam, ::OpenAPI::toStringValue(ean));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIProductLookupApi::getItemByEANCallback);

    worker->execute(&input);
}

void
OAIProductLookupApi::getItemByEANCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIItem output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getItemByEANSignal(output);
        emit getItemByEANSignalFull(worker, output);
    } else {
        emit getItemByEANSignalE(output, error_type, error_str);
        emit getItemByEANSignalEFull(worker, error_type, error_str);
    }
}

void
OAIProductLookupApi::getItemByUPC(const QString& upc) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/v1/upc/{upc}");
    QString upcPathParam("{"); 
    upcPathParam.append("upc").append("}");
    fullPath.replace(upcPathParam, ::OpenAPI::toStringValue(upc));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIProductLookupApi::getItemByUPCCallback);

    worker->execute(&input);
}

void
OAIProductLookupApi::getItemByUPCCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIItem output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getItemByUPCSignal(output);
        emit getItemByUPCSignalFull(worker, output);
    } else {
        emit getItemByUPCSignalE(output, error_type, error_str);
        emit getItemByUPCSignalEFull(worker, error_type, error_str);
    }
}


}
