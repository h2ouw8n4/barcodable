/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductLookupApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIProductLookupApi::OAIProductLookupApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAIProductLookupApi::~OAIProductLookupApi() {
}

void OAIProductLookupApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAIProductLookupApi::setHost(const QString &host) {
    _host = host;
}

void OAIProductLookupApi::setPort(int port) {
    _port = port;
}

void OAIProductLookupApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAIProductLookupApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIProductLookupApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIProductLookupApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIProductLookupApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIProductLookupApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIProductLookupApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAIProductLookupApi::getItemByASIN(const QString &asin) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/api/v1/asin/{asin}");
    QString asinPathParam("{");
    asinPathParam.append("asin").append("}");
    fullPath.replace(asinPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(asin)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProductLookupApi::getItemByASINCallback);
    connect(this, &OAIProductLookupApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIProductLookupApi::getItemByASINCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIItem output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getItemByASINSignal(output);
        emit getItemByASINSignalFull(worker, output);
    } else {
        emit getItemByASINSignalE(output, error_type, error_str);
        emit getItemByASINSignalEFull(worker, error_type, error_str);
    }
}

void OAIProductLookupApi::getItemByEAN(const QString &ean) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/api/v1/ean/{ean}");
    QString eanPathParam("{");
    eanPathParam.append("ean").append("}");
    fullPath.replace(eanPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(ean)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProductLookupApi::getItemByEANCallback);
    connect(this, &OAIProductLookupApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIProductLookupApi::getItemByEANCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIItem output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getItemByEANSignal(output);
        emit getItemByEANSignalFull(worker, output);
    } else {
        emit getItemByEANSignalE(output, error_type, error_str);
        emit getItemByEANSignalEFull(worker, error_type, error_str);
    }
}

void OAIProductLookupApi::getItemByUPC(const QString &upc) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/api/v1/upc/{upc}");
    QString upcPathParam("{");
    upcPathParam.append("upc").append("}");
    fullPath.replace(upcPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(upc)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProductLookupApi::getItemByUPCCallback);
    connect(this, &OAIProductLookupApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIProductLookupApi::getItemByUPCCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIItem output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getItemByUPCSignal(output);
        emit getItemByUPCSignalFull(worker, output);
    } else {
        emit getItemByUPCSignalE(output, error_type, error_str);
        emit getItemByUPCSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
