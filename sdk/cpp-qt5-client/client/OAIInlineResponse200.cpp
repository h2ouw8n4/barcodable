/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_200.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIInline_response_200::OAIInline_response_200(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_200::OAIInline_response_200() {
    this->init();
}

OAIInline_response_200::~OAIInline_response_200() {

}

void
OAIInline_response_200::init() {
    m_upcs_isSet = false;
    m_upcs_isValid = false;
    m_eans_isSet = false;
    m_eans_isValid = false;
    m_asins_isSet = false;
    m_asins_isValid = false;
    m_message_isSet = false;
    m_message_isValid = false;
}

void
OAIInline_response_200::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_200::fromJsonObject(QJsonObject json) {
    
    m_upcs_isValid = ::OpenAPI::fromJsonValue(upcs, json[QString("upcs")]);
    
    m_eans_isValid = ::OpenAPI::fromJsonValue(eans, json[QString("eans")]);
    
    m_asins_isValid = ::OpenAPI::fromJsonValue(asins, json[QString("asins")]);
    m_message_isValid = ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    
}

QString
OAIInline_response_200::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_200::asJsonObject() const {
    QJsonObject obj;
	
    if(upcs.size() > 0){
        obj.insert(QString("upcs"), ::OpenAPI::toJsonValue(upcs));
    } 
	
    if(eans.size() > 0){
        obj.insert(QString("eans"), ::OpenAPI::toJsonValue(eans));
    } 
	
    if(asins.size() > 0){
        obj.insert(QString("asins"), ::OpenAPI::toJsonValue(asins));
    } 
	if(m_message_isSet){
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
    return obj;
}

QList<QString>
OAIInline_response_200::getUpcs() const {
    return upcs;
}
void
OAIInline_response_200::setUpcs(const QList<QString> &upcs) {
    this->upcs = upcs;
    this->m_upcs_isSet = true;
}

QList<QString>
OAIInline_response_200::getEans() const {
    return eans;
}
void
OAIInline_response_200::setEans(const QList<QString> &eans) {
    this->eans = eans;
    this->m_eans_isSet = true;
}

QList<QString>
OAIInline_response_200::getAsins() const {
    return asins;
}
void
OAIInline_response_200::setAsins(const QList<QString> &asins) {
    this->asins = asins;
    this->m_asins_isSet = true;
}

QString
OAIInline_response_200::getMessage() const {
    return message;
}
void
OAIInline_response_200::setMessage(const QString &message) {
    this->message = message;
    this->m_message_isSet = true;
}

bool
OAIInline_response_200::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(upcs.size() > 0){ isObjectUpdated = true; break;}
    
        if(eans.size() > 0){ isObjectUpdated = true; break;}
    
        if(asins.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_message_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_200::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

