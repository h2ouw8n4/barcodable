/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_400.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIInline_response_400::OAIInline_response_400(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_400::OAIInline_response_400() {
    this->init();
}

OAIInline_response_400::~OAIInline_response_400() {

}

void
OAIInline_response_400::init() {
    m_message_isSet = false;
    m_message_isValid = false;
    m_status_isSet = false;
    m_status_isValid = false;
}

void
OAIInline_response_400::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_400::fromJsonObject(QJsonObject json) {
    m_message_isValid = ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    
    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    
}

QString
OAIInline_response_400::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_400::asJsonObject() const {
    QJsonObject obj;
	if(m_message_isSet){
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
	if(m_status_isSet){
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    return obj;
}

QString
OAIInline_response_400::getMessage() const {
    return message;
}
void
OAIInline_response_400::setMessage(const QString &message) {
    this->message = message;
    this->m_message_isSet = true;
}

qint32
OAIInline_response_400::getStatus() const {
    return status;
}
void
OAIInline_response_400::setStatus(const qint32 &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool
OAIInline_response_400::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_message_isSet){ isObjectUpdated = true; break;}
    
        if(m_status_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_400::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

