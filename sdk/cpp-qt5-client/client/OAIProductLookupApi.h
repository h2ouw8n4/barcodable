/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductLookupApi_H
#define OAI_OAIProductLookupApi_H

#include "OAIHttpRequest.h"

#include "OAIInvalid_code.h"
#include "OAIItem.h"
#include "OAINot_found.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIProductLookupApi : public QObject {
    Q_OBJECT

public:
    OAIProductLookupApi(const QString &scheme = "https", const QString &host = "virtserver.swaggerhub.com", int port = 0, const QString &basePath = "/magicCashew/barcodable/1.0.0", const int timeOut = 0);
    ~OAIProductLookupApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void getItemByASIN(const QString &asin);
    void getItemByEAN(const QString &ean);
    void getItemByUPC(const QString &upc);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void getItemByASINCallback(OAIHttpRequestWorker *worker);
    void getItemByEANCallback(OAIHttpRequestWorker *worker);
    void getItemByUPCCallback(OAIHttpRequestWorker *worker);

signals:

    void getItemByASINSignal(OAIItem summary);
    void getItemByEANSignal(OAIItem summary);
    void getItemByUPCSignal(OAIItem summary);

    void getItemByASINSignalFull(OAIHttpRequestWorker *worker, OAIItem summary);
    void getItemByEANSignalFull(OAIHttpRequestWorker *worker, OAIItem summary);
    void getItemByUPCSignalFull(OAIHttpRequestWorker *worker, OAIItem summary);

    void getItemByASINSignalE(OAIItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemByEANSignalE(OAIItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemByUPCSignalE(OAIItem summary, QNetworkReply::NetworkError error_type, QString error_str);

    void getItemByASINSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemByEANSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemByUPCSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
