/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductConversionApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIProductConversionApi::OAIProductConversionApi() {

}

OAIProductConversionApi::~OAIProductConversionApi() {

}

OAIProductConversionApi::OAIProductConversionApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIProductConversionApi::convertCode(const QString& upc___ean___asin) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/v1/convert/{upc | ean | asin}");
    QString upc___ean___asinPathParam("{"); 
    upc___ean___asinPathParam.append("upc | ean | asin").append("}");
    fullPath.replace(upc___ean___asinPathParam, ::OpenAPI::toStringValue(upc___ean___asin));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIProductConversionApi::convertCodeCallback);

    worker->execute(&input);
}

void
OAIProductConversionApi::convertCodeCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit convertCodeSignal(output);
        emit convertCodeSignalFull(worker, output);
    } else {
        emit convertCodeSignalE(output, error_type, error_str);
        emit convertCodeSignalEFull(worker, error_type, error_str);
    }
}


}
