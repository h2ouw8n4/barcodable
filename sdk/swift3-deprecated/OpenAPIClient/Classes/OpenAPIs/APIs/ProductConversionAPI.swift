//
// ProductConversionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire


open class ProductConversionAPI: APIBase {
    /**
     Convert between UPC, EAN, and ASIN product codes.
     - parameter upcEanAsin: (path) UPC, EAN, or ASIN 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertCode(upcEanAsin: String, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        convertCodeWithRequestBuilder(upcEanAsin: upcEanAsin).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Convert between UPC, EAN, and ASIN product codes.
     - GET /api/v1/convert/{upc | ean | asin}
     - Returns the converted UPC, EAN, and ASIN codes.
     - responseHeaders: [X-ValidAuthorization(Bool), X-RateLimit-Limit(Int32), X-RateLimit-Remaining(Int32), X-RateLimit-Reset(Date)]
     - parameter upcEanAsin: (path) UPC, EAN, or ASIN 
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func convertCodeWithRequestBuilder(upcEanAsin: String) -> RequestBuilder<InlineResponse200> {
        var path = "/api/v1/convert/{upc | ean | asin}"
        let upcEanAsinPreEscape = "\(upcEanAsin)"
        let upcEanAsinPostEscape = upcEanAsinPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{upc | ean | asin}", with: upcEanAsinPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
