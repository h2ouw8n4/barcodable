/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.InvalidCode
import org.openapitools.client.model.Item
import org.openapitools.client.model.NotFound
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.MediaType

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class ProductLookupApi(
  val defBasePath: String = "https://virtserver.swaggerhub.com/mindviser/barcodable/1.0.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ProductLookupApiAsyncHelper(client, config)

  /**
   * Find item by asin code
   * Returns a single item
   *
   * @param asin ASIN code of item to return 
   * @return Item
   */
  def getItemByASIN(asin: String): Option[Item] = {
    val await = Try(Await.result(getItemByASINAsync(asin), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Find item by asin code asynchronously
   * Returns a single item
   *
   * @param asin ASIN code of item to return 
   * @return Future(Item)
   */
  def getItemByASINAsync(asin: String): Future[Item] = {
      helper.getItemByASIN(asin)
  }

  /**
   * Find item by UPC code
   * Returns a single item
   *
   * @param ean EAN code of item to return 
   * @return Item
   */
  def getItemByEAN(ean: String): Option[Item] = {
    val await = Try(Await.result(getItemByEANAsync(ean), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Find item by UPC code asynchronously
   * Returns a single item
   *
   * @param ean EAN code of item to return 
   * @return Future(Item)
   */
  def getItemByEANAsync(ean: String): Future[Item] = {
      helper.getItemByEAN(ean)
  }

  /**
   * Find item by UPC code
   * Returns a single item
   *
   * @param upc UPC code of item to return 
   * @return Item
   */
  def getItemByUPC(upc: String): Option[Item] = {
    val await = Try(Await.result(getItemByUPCAsync(upc), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Find item by UPC code asynchronously
   * Returns a single item
   *
   * @param upc UPC code of item to return 
   * @return Future(Item)
   */
  def getItemByUPCAsync(upc: String): Future[Item] = {
      helper.getItemByUPC(upc)
  }

}

class ProductLookupApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getItemByASIN(asin: String)(implicit reader: ClientResponseReader[Item]): Future[Item] = {
    // create path and map variables
    val path = (addFmt("/api/v1/asin/{asin}")
      replaceAll("\\{" + "asin" + "\\}", asin.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (asin == null) throw new Exception("Missing required parameter 'asin' when calling ProductLookupApi->getItemByASIN")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getItemByEAN(ean: String)(implicit reader: ClientResponseReader[Item]): Future[Item] = {
    // create path and map variables
    val path = (addFmt("/api/v1/ean/{ean}")
      replaceAll("\\{" + "ean" + "\\}", ean.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (ean == null) throw new Exception("Missing required parameter 'ean' when calling ProductLookupApi->getItemByEAN")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getItemByUPC(upc: String)(implicit reader: ClientResponseReader[Item]): Future[Item] = {
    // create path and map variables
    val path = (addFmt("/api/v1/upc/{upc}")
      replaceAll("\\{" + "upc" + "\\}", upc.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (upc == null) throw new Exception("Missing required parameter 'upc' when calling ProductLookupApi->getItemByUPC")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
