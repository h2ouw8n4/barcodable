/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.ProductLookupApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Barcodable.com API
 * Version: 1.5.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.ProductLookupApi');

goog.require('API.Client.invalid_code');
goog.require('API.Client.item');
goog.require('API.Client.not_found');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.ProductLookupApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ProductLookupApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ProductLookupApiBasePath')) :
                   'https://virtserver.swaggerhub.com/magicCashew/barcodable/1.0.0';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ProductLookupApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ProductLookupApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.ProductLookupApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Find item by asin code
 * Returns a single item
 * @param {!string} asin ASIN code of item to return
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.item>}
 */
API.Client.ProductLookupApi.prototype.getItemByASIN = function(asin, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/v1/asin/{asin}'
      .replace('{' + 'asin' + '}', String(asin));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'asin' is set
  if (!asin) {
    throw new Error('Missing required parameter asin when calling getItemByASIN');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Find item by UPC code
 * Returns a single item
 * @param {!string} ean EAN code of item to return
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.item>}
 */
API.Client.ProductLookupApi.prototype.getItemByEAN = function(ean, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/v1/ean/{ean}'
      .replace('{' + 'ean' + '}', String(ean));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'ean' is set
  if (!ean) {
    throw new Error('Missing required parameter ean when calling getItemByEAN');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Find item by UPC code
 * Returns a single item
 * @param {!string} upc UPC code of item to return
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.item>}
 */
API.Client.ProductLookupApi.prototype.getItemByUPC = function(upc, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/v1/upc/{upc}'
      .replace('{' + 'upc' + '}', String(upc));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'upc' is set
  if (!upc) {
    throw new Error('Missing required parameter upc when calling getItemByUPC');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
