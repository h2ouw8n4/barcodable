/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIItem.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->init();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->init();
}

OAIItem::~OAIItem() {

}

void
OAIItem::init() {
    m_upc_isSet = false;
    m_upc_isValid = false;
    m_ean_isSet = false;
    m_ean_isValid = false;
    m_isbn_isSet = false;
    m_isbn_isValid = false;
    m_asin_isSet = false;
    m_asin_isValid = false;
    m_title_isSet = false;
    m_title_isValid = false;
    m_sku_isSet = false;
    m_sku_isValid = false;
    m_mpn_isSet = false;
    m_mpn_isValid = false;
    m_part_number_isSet = false;
    m_part_number_isValid = false;
    m_upcs_isSet = false;
    m_upcs_isValid = false;
    m_description_isSet = false;
    m_description_isValid = false;
    m_brand_isSet = false;
    m_brand_isValid = false;
    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;
    m_color_isSet = false;
    m_color_isValid = false;
    m_new_price_isSet = false;
    m_new_price_isValid = false;
    m_used_price_isSet = false;
    m_used_price_isValid = false;
    m_currency_code_isSet = false;
    m_currency_code_isValid = false;
    m_url_isSet = false;
    m_url_isValid = false;
    m_features_isSet = false;
    m_features_isValid = false;
    m_dimensions_isSet = false;
    m_dimensions_isValid = false;
    m_images_isSet = false;
    m_images_isValid = false;
    m_matched_items_isSet = false;
    m_matched_items_isValid = false;
    m_iso_country_codes_isSet = false;
    m_iso_country_codes_isValid = false;
    m_company_name_isSet = false;
    m_company_name_isValid = false;
    m_company_address_isSet = false;
    m_company_address_isValid = false;
    m_categories_isSet = false;
    m_categories_isValid = false;
    m_category_hierarchies_isSet = false;
    m_category_hierarchies_isValid = false;
}

void
OAIItem::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIItem::fromJsonObject(QJsonObject json) {
    m_upc_isValid = ::OpenAPI::fromJsonValue(upc, json[QString("upc")]);
    
    m_ean_isValid = ::OpenAPI::fromJsonValue(ean, json[QString("ean")]);
    
    m_isbn_isValid = ::OpenAPI::fromJsonValue(isbn, json[QString("isbn")]);
    
    m_asin_isValid = ::OpenAPI::fromJsonValue(asin, json[QString("asin")]);
    
    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    
    m_sku_isValid = ::OpenAPI::fromJsonValue(sku, json[QString("sku")]);
    
    m_mpn_isValid = ::OpenAPI::fromJsonValue(mpn, json[QString("mpn")]);
    
    m_part_number_isValid = ::OpenAPI::fromJsonValue(part_number, json[QString("part_number")]);
    
    
    m_upcs_isValid = ::OpenAPI::fromJsonValue(upcs, json[QString("upcs")]);
    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    
    m_brand_isValid = ::OpenAPI::fromJsonValue(brand, json[QString("brand")]);
    
    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(manufacturer, json[QString("manufacturer")]);
    
    m_color_isValid = ::OpenAPI::fromJsonValue(color, json[QString("color")]);
    
    m_new_price_isValid = ::OpenAPI::fromJsonValue(new_price, json[QString("new_price")]);
    
    m_used_price_isValid = ::OpenAPI::fromJsonValue(used_price, json[QString("used_price")]);
    
    m_currency_code_isValid = ::OpenAPI::fromJsonValue(currency_code, json[QString("currency_code")]);
    
    m_url_isValid = ::OpenAPI::fromJsonValue(url, json[QString("url")]);
    
    
    m_features_isValid = ::OpenAPI::fromJsonValue(features, json[QString("features")]);
    
    m_dimensions_isValid = ::OpenAPI::fromJsonValue(dimensions, json[QString("dimensions")]);
    
    m_images_isValid = ::OpenAPI::fromJsonValue(images, json[QString("images")]);
    
    m_matched_items_isValid = ::OpenAPI::fromJsonValue(matched_items, json[QString("matched_items")]);
    
    m_iso_country_codes_isValid = ::OpenAPI::fromJsonValue(iso_country_codes, json[QString("iso_country_codes")]);
    m_company_name_isValid = ::OpenAPI::fromJsonValue(company_name, json[QString("company_name")]);
    
    m_company_address_isValid = ::OpenAPI::fromJsonValue(company_address, json[QString("company_address")]);
    
    
    m_categories_isValid = ::OpenAPI::fromJsonValue(categories, json[QString("categories")]);
    
    m_category_hierarchies_isValid = ::OpenAPI::fromJsonValue(category_hierarchies, json[QString("category_hierarchies")]);
}

QString
OAIItem::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIItem::asJsonObject() const {
    QJsonObject obj;
	if(m_upc_isSet){
        obj.insert(QString("upc"), ::OpenAPI::toJsonValue(upc));
    }
	if(m_ean_isSet){
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(ean));
    }
	if(m_isbn_isSet){
        obj.insert(QString("isbn"), ::OpenAPI::toJsonValue(isbn));
    }
	if(m_asin_isSet){
        obj.insert(QString("asin"), ::OpenAPI::toJsonValue(asin));
    }
	if(m_title_isSet){
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
	if(m_sku_isSet){
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(sku));
    }
	if(m_mpn_isSet){
        obj.insert(QString("mpn"), ::OpenAPI::toJsonValue(mpn));
    }
	if(m_part_number_isSet){
        obj.insert(QString("part_number"), ::OpenAPI::toJsonValue(part_number));
    }
	
    if(upcs.size() > 0){
        obj.insert(QString("upcs"), ::OpenAPI::toJsonValue(upcs));
    } 
	if(m_description_isSet){
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
	if(m_brand_isSet){
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(brand));
    }
	if(m_manufacturer_isSet){
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(manufacturer));
    }
	if(m_color_isSet){
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(color));
    }
	if(new_price.isSet()){
        obj.insert(QString("new_price"), ::OpenAPI::toJsonValue(new_price));
    }
	if(used_price.isSet()){
        obj.insert(QString("used_price"), ::OpenAPI::toJsonValue(used_price));
    }
	if(m_currency_code_isSet){
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(currency_code));
    }
	if(m_url_isSet){
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(url));
    }
	
    if(features.size() > 0){
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(features));
    } 
	
    if(dimensions.size() > 0){
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(dimensions));
    } 
	
    if(images.size() > 0){
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(images));
    } 
	
    if(matched_items.size() > 0){
        obj.insert(QString("matched_items"), ::OpenAPI::toJsonValue(matched_items));
    } 
	
    if(iso_country_codes.size() > 0){
        obj.insert(QString("iso_country_codes"), ::OpenAPI::toJsonValue(iso_country_codes));
    } 
	if(m_company_name_isSet){
        obj.insert(QString("company_name"), ::OpenAPI::toJsonValue(company_name));
    }
	if(m_company_address_isSet){
        obj.insert(QString("company_address"), ::OpenAPI::toJsonValue(company_address));
    }
	
    if(categories.size() > 0){
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(categories));
    } 
	
    if(category_hierarchies.size() > 0){
        obj.insert(QString("category_hierarchies"), ::OpenAPI::toJsonValue(category_hierarchies));
    } 
    return obj;
}

QString
OAIItem::getUpc() const {
    return upc;
}
void
OAIItem::setUpc(const QString &upc) {
    this->upc = upc;
    this->m_upc_isSet = true;
}

QString
OAIItem::getEan() const {
    return ean;
}
void
OAIItem::setEan(const QString &ean) {
    this->ean = ean;
    this->m_ean_isSet = true;
}

QString
OAIItem::getIsbn() const {
    return isbn;
}
void
OAIItem::setIsbn(const QString &isbn) {
    this->isbn = isbn;
    this->m_isbn_isSet = true;
}

QString
OAIItem::getAsin() const {
    return asin;
}
void
OAIItem::setAsin(const QString &asin) {
    this->asin = asin;
    this->m_asin_isSet = true;
}

QString
OAIItem::getTitle() const {
    return title;
}
void
OAIItem::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

QString
OAIItem::getSku() const {
    return sku;
}
void
OAIItem::setSku(const QString &sku) {
    this->sku = sku;
    this->m_sku_isSet = true;
}

QString
OAIItem::getMpn() const {
    return mpn;
}
void
OAIItem::setMpn(const QString &mpn) {
    this->mpn = mpn;
    this->m_mpn_isSet = true;
}

QString
OAIItem::getPartNumber() const {
    return part_number;
}
void
OAIItem::setPartNumber(const QString &part_number) {
    this->part_number = part_number;
    this->m_part_number_isSet = true;
}

QList<QString>
OAIItem::getUpcs() const {
    return upcs;
}
void
OAIItem::setUpcs(const QList<QString> &upcs) {
    this->upcs = upcs;
    this->m_upcs_isSet = true;
}

QString
OAIItem::getDescription() const {
    return description;
}
void
OAIItem::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString
OAIItem::getBrand() const {
    return brand;
}
void
OAIItem::setBrand(const QString &brand) {
    this->brand = brand;
    this->m_brand_isSet = true;
}

QString
OAIItem::getManufacturer() const {
    return manufacturer;
}
void
OAIItem::setManufacturer(const QString &manufacturer) {
    this->manufacturer = manufacturer;
    this->m_manufacturer_isSet = true;
}

QString
OAIItem::getColor() const {
    return color;
}
void
OAIItem::setColor(const QString &color) {
    this->color = color;
    this->m_color_isSet = true;
}

OAINumber
OAIItem::getNewPrice() const {
    return new_price;
}
void
OAIItem::setNewPrice(const OAINumber &new_price) {
    this->new_price = new_price;
    this->m_new_price_isSet = true;
}

OAINumber
OAIItem::getUsedPrice() const {
    return used_price;
}
void
OAIItem::setUsedPrice(const OAINumber &used_price) {
    this->used_price = used_price;
    this->m_used_price_isSet = true;
}

QString
OAIItem::getCurrencyCode() const {
    return currency_code;
}
void
OAIItem::setCurrencyCode(const QString &currency_code) {
    this->currency_code = currency_code;
    this->m_currency_code_isSet = true;
}

QString
OAIItem::getUrl() const {
    return url;
}
void
OAIItem::setUrl(const QString &url) {
    this->url = url;
    this->m_url_isSet = true;
}

QList<QString>
OAIItem::getFeatures() const {
    return features;
}
void
OAIItem::setFeatures(const QList<QString> &features) {
    this->features = features;
    this->m_features_isSet = true;
}

QList<OAIObject>
OAIItem::getDimensions() const {
    return dimensions;
}
void
OAIItem::setDimensions(const QList<OAIObject> &dimensions) {
    this->dimensions = dimensions;
    this->m_dimensions_isSet = true;
}

QList<QString>
OAIItem::getImages() const {
    return images;
}
void
OAIItem::setImages(const QList<QString> &images) {
    this->images = images;
    this->m_images_isSet = true;
}

QList<OAIObject>
OAIItem::getMatchedItems() const {
    return matched_items;
}
void
OAIItem::setMatchedItems(const QList<OAIObject> &matched_items) {
    this->matched_items = matched_items;
    this->m_matched_items_isSet = true;
}

QList<QString>
OAIItem::getIsoCountryCodes() const {
    return iso_country_codes;
}
void
OAIItem::setIsoCountryCodes(const QList<QString> &iso_country_codes) {
    this->iso_country_codes = iso_country_codes;
    this->m_iso_country_codes_isSet = true;
}

QString
OAIItem::getCompanyName() const {
    return company_name;
}
void
OAIItem::setCompanyName(const QString &company_name) {
    this->company_name = company_name;
    this->m_company_name_isSet = true;
}

QString
OAIItem::getCompanyAddress() const {
    return company_address;
}
void
OAIItem::setCompanyAddress(const QString &company_address) {
    this->company_address = company_address;
    this->m_company_address_isSet = true;
}

QList<QString>
OAIItem::getCategories() const {
    return categories;
}
void
OAIItem::setCategories(const QList<QString> &categories) {
    this->categories = categories;
    this->m_categories_isSet = true;
}

QList<QString>
OAIItem::getCategoryHierarchies() const {
    return category_hierarchies;
}
void
OAIItem::setCategoryHierarchies(const QList<QString> &category_hierarchies) {
    this->category_hierarchies = category_hierarchies;
    this->m_category_hierarchies_isSet = true;
}

bool
OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_upc_isSet){ isObjectUpdated = true; break;}
    
        if(m_ean_isSet){ isObjectUpdated = true; break;}
    
        if(m_isbn_isSet){ isObjectUpdated = true; break;}
    
        if(m_asin_isSet){ isObjectUpdated = true; break;}
    
        if(m_title_isSet){ isObjectUpdated = true; break;}
    
        if(m_sku_isSet){ isObjectUpdated = true; break;}
    
        if(m_mpn_isSet){ isObjectUpdated = true; break;}
    
        if(m_part_number_isSet){ isObjectUpdated = true; break;}
    
        if(upcs.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_description_isSet){ isObjectUpdated = true; break;}
    
        if(m_brand_isSet){ isObjectUpdated = true; break;}
    
        if(m_manufacturer_isSet){ isObjectUpdated = true; break;}
    
        if(m_color_isSet){ isObjectUpdated = true; break;}
    
        if(new_price.isSet()){ isObjectUpdated = true; break;}
    
        if(used_price.isSet()){ isObjectUpdated = true; break;}
    
        if(m_currency_code_isSet){ isObjectUpdated = true; break;}
    
        if(m_url_isSet){ isObjectUpdated = true; break;}
    
        if(features.size() > 0){ isObjectUpdated = true; break;}
    
        if(dimensions.size() > 0){ isObjectUpdated = true; break;}
    
        if(images.size() > 0){ isObjectUpdated = true; break;}
    
        if(matched_items.size() > 0){ isObjectUpdated = true; break;}
    
        if(iso_country_codes.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_company_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_company_address_isSet){ isObjectUpdated = true; break;}
    
        if(categories.size() > 0){ isObjectUpdated = true; break;}
    
        if(category_hierarchies.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

