/* 
 * Barcodable.com API
 *
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Item
    /// </summary>
    [DataContract]
    public partial class Item :  IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="upc">upc.</param>
        /// <param name="ean">ean.</param>
        /// <param name="isbn">isbn.</param>
        /// <param name="asin">asin.</param>
        /// <param name="title">title.</param>
        /// <param name="sku">sku.</param>
        /// <param name="mpn">mpn.</param>
        /// <param name="partNumber">partNumber.</param>
        /// <param name="upcs">A list of matching upc codes..</param>
        /// <param name="description">description.</param>
        /// <param name="brand">brand.</param>
        /// <param name="manufacturer">manufacturer.</param>
        /// <param name="color">color.</param>
        /// <param name="newPrice">newPrice.</param>
        /// <param name="usedPrice">usedPrice.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="url">url.</param>
        /// <param name="features">A list of product feature descriptions..</param>
        /// <param name="dimensions">Product dimensions and weight.  (&#39;meters&#39;, &#39;centimeters&#39;, &#39;millimeters&#39;, &#39;inches&#39;, &#39;feet&#39;, &#39;yards&#39;, &#39;ounces&#39;, &#39;pounds&#39;, &#39;grams&#39;, &#39;milligrams&#39;, &#39;kilograms&#39;).</param>
        /// <param name="images">A list product images..</param>
        /// <param name="matchedItems">Matched items for this product..</param>
        /// <param name="isoCountryCodes">A list of country codes from which this item belongs..</param>
        /// <param name="companyName">The company name registered to the product&#39;s UPC or EAN..</param>
        /// <param name="companyAddress">The company address registered to the product&#39;s UPC or EAN..</param>
        /// <param name="categories">A list of categories for this product..</param>
        /// <param name="categoryHierarchies">A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category..</param>
        public Item(string upc = default(string), string ean = default(string), string isbn = default(string), string asin = default(string), string title = default(string), string sku = default(string), string mpn = default(string), string partNumber = default(string), List<string> upcs = default(List<string>), string description = default(string), string brand = default(string), string manufacturer = default(string), string color = default(string), decimal newPrice = default(decimal), decimal usedPrice = default(decimal), string currencyCode = default(string), string url = default(string), List<string> features = default(List<string>), List<Object> dimensions = default(List<Object>), List<string> images = default(List<string>), List<Object> matchedItems = default(List<Object>), List<string> isoCountryCodes = default(List<string>), string companyName = default(string), string companyAddress = default(string), List<string> categories = default(List<string>), List<string> categoryHierarchies = default(List<string>))
        {
            this.Upc = upc;
            this.Ean = ean;
            this.Isbn = isbn;
            this.Asin = asin;
            this.Title = title;
            this.Sku = sku;
            this.Mpn = mpn;
            this.PartNumber = partNumber;
            this.Upcs = upcs;
            this.Description = description;
            this.Brand = brand;
            this.Manufacturer = manufacturer;
            this.Color = color;
            this.NewPrice = newPrice;
            this.UsedPrice = usedPrice;
            this.CurrencyCode = currencyCode;
            this.Url = url;
            this.Features = features;
            this.Dimensions = dimensions;
            this.Images = images;
            this.MatchedItems = matchedItems;
            this.IsoCountryCodes = isoCountryCodes;
            this.CompanyName = companyName;
            this.CompanyAddress = companyAddress;
            this.Categories = categories;
            this.CategoryHierarchies = categoryHierarchies;
        }
        
        /// <summary>
        /// Gets or Sets Upc
        /// </summary>
        [DataMember(Name="upc", EmitDefaultValue=false)]
        public string Upc { get; set; }

        /// <summary>
        /// Gets or Sets Ean
        /// </summary>
        [DataMember(Name="ean", EmitDefaultValue=false)]
        public string Ean { get; set; }

        /// <summary>
        /// Gets or Sets Isbn
        /// </summary>
        [DataMember(Name="isbn", EmitDefaultValue=false)]
        public string Isbn { get; set; }

        /// <summary>
        /// Gets or Sets Asin
        /// </summary>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or Sets Mpn
        /// </summary>
        [DataMember(Name="mpn", EmitDefaultValue=false)]
        public string Mpn { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name="part_number", EmitDefaultValue=false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// A list of matching upc codes.
        /// </summary>
        /// <value>A list of matching upc codes.</value>
        [DataMember(Name="upcs", EmitDefaultValue=false)]
        public List<string> Upcs { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets NewPrice
        /// </summary>
        [DataMember(Name="new_price", EmitDefaultValue=false)]
        public decimal NewPrice { get; set; }

        /// <summary>
        /// Gets or Sets UsedPrice
        /// </summary>
        [DataMember(Name="used_price", EmitDefaultValue=false)]
        public decimal UsedPrice { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// A list of product feature descriptions.
        /// </summary>
        /// <value>A list of product feature descriptions.</value>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public List<string> Features { get; set; }

        /// <summary>
        /// Product dimensions and weight.  (&#39;meters&#39;, &#39;centimeters&#39;, &#39;millimeters&#39;, &#39;inches&#39;, &#39;feet&#39;, &#39;yards&#39;, &#39;ounces&#39;, &#39;pounds&#39;, &#39;grams&#39;, &#39;milligrams&#39;, &#39;kilograms&#39;)
        /// </summary>
        /// <value>Product dimensions and weight.  (&#39;meters&#39;, &#39;centimeters&#39;, &#39;millimeters&#39;, &#39;inches&#39;, &#39;feet&#39;, &#39;yards&#39;, &#39;ounces&#39;, &#39;pounds&#39;, &#39;grams&#39;, &#39;milligrams&#39;, &#39;kilograms&#39;)</value>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public List<Object> Dimensions { get; set; }

        /// <summary>
        /// A list product images.
        /// </summary>
        /// <value>A list product images.</value>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<string> Images { get; set; }

        /// <summary>
        /// Matched items for this product.
        /// </summary>
        /// <value>Matched items for this product.</value>
        [DataMember(Name="matched_items", EmitDefaultValue=false)]
        public List<Object> MatchedItems { get; set; }

        /// <summary>
        /// A list of country codes from which this item belongs.
        /// </summary>
        /// <value>A list of country codes from which this item belongs.</value>
        [DataMember(Name="iso_country_codes", EmitDefaultValue=false)]
        public List<string> IsoCountryCodes { get; set; }

        /// <summary>
        /// The company name registered to the product&#39;s UPC or EAN.
        /// </summary>
        /// <value>The company name registered to the product&#39;s UPC or EAN.</value>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The company address registered to the product&#39;s UPC or EAN.
        /// </summary>
        /// <value>The company address registered to the product&#39;s UPC or EAN.</value>
        [DataMember(Name="company_address", EmitDefaultValue=false)]
        public string CompanyAddress { get; set; }

        /// <summary>
        /// A list of categories for this product.
        /// </summary>
        /// <value>A list of categories for this product.</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.
        /// </summary>
        /// <value>A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.</value>
        [DataMember(Name="category_hierarchies", EmitDefaultValue=false)]
        public List<string> CategoryHierarchies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("  Ean: ").Append(Ean).Append("\n");
            sb.Append("  Isbn: ").Append(Isbn).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  Upcs: ").Append(Upcs).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  NewPrice: ").Append(NewPrice).Append("\n");
            sb.Append("  UsedPrice: ").Append(UsedPrice).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  MatchedItems: ").Append(MatchedItems).Append("\n");
            sb.Append("  IsoCountryCodes: ").Append(IsoCountryCodes).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  CategoryHierarchies: ").Append(CategoryHierarchies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Upc == input.Upc ||
                    (this.Upc != null &&
                    this.Upc.Equals(input.Upc))
                ) && 
                (
                    this.Ean == input.Ean ||
                    (this.Ean != null &&
                    this.Ean.Equals(input.Ean))
                ) && 
                (
                    this.Isbn == input.Isbn ||
                    (this.Isbn != null &&
                    this.Isbn.Equals(input.Isbn))
                ) && 
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Mpn == input.Mpn ||
                    (this.Mpn != null &&
                    this.Mpn.Equals(input.Mpn))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.Upcs == input.Upcs ||
                    this.Upcs != null &&
                    input.Upcs != null &&
                    this.Upcs.SequenceEqual(input.Upcs)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.NewPrice == input.NewPrice ||
                    (this.NewPrice != null &&
                    this.NewPrice.Equals(input.NewPrice))
                ) && 
                (
                    this.UsedPrice == input.UsedPrice ||
                    (this.UsedPrice != null &&
                    this.UsedPrice.Equals(input.UsedPrice))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    this.Dimensions != null &&
                    input.Dimensions != null &&
                    this.Dimensions.SequenceEqual(input.Dimensions)
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.MatchedItems == input.MatchedItems ||
                    this.MatchedItems != null &&
                    input.MatchedItems != null &&
                    this.MatchedItems.SequenceEqual(input.MatchedItems)
                ) && 
                (
                    this.IsoCountryCodes == input.IsoCountryCodes ||
                    this.IsoCountryCodes != null &&
                    input.IsoCountryCodes != null &&
                    this.IsoCountryCodes.SequenceEqual(input.IsoCountryCodes)
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.CompanyAddress == input.CompanyAddress ||
                    (this.CompanyAddress != null &&
                    this.CompanyAddress.Equals(input.CompanyAddress))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.CategoryHierarchies == input.CategoryHierarchies ||
                    this.CategoryHierarchies != null &&
                    input.CategoryHierarchies != null &&
                    this.CategoryHierarchies.SequenceEqual(input.CategoryHierarchies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Upc != null)
                    hashCode = hashCode * 59 + this.Upc.GetHashCode();
                if (this.Ean != null)
                    hashCode = hashCode * 59 + this.Ean.GetHashCode();
                if (this.Isbn != null)
                    hashCode = hashCode * 59 + this.Isbn.GetHashCode();
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Mpn != null)
                    hashCode = hashCode * 59 + this.Mpn.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.Upcs != null)
                    hashCode = hashCode * 59 + this.Upcs.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.NewPrice != null)
                    hashCode = hashCode * 59 + this.NewPrice.GetHashCode();
                if (this.UsedPrice != null)
                    hashCode = hashCode * 59 + this.UsedPrice.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.MatchedItems != null)
                    hashCode = hashCode * 59 + this.MatchedItems.GetHashCode();
                if (this.IsoCountryCodes != null)
                    hashCode = hashCode * 59 + this.IsoCountryCodes.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyAddress != null)
                    hashCode = hashCode * 59 + this.CompanyAddress.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.CategoryHierarchies != null)
                    hashCode = hashCode * 59 + this.CategoryHierarchies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
