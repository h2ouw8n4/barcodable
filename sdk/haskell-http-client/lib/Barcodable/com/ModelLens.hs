{-
   Barcodable.com API

   Barcodable.com API

   OpenAPI Version: 3.0.0
   Barcodable.com API API version: 1.5.0
   Contact: support@barcodable.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Barcodable.com.Lens
-}

{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Barcodable.com.ModelLens where

import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Data, Typeable)
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Data.Time as TI

import Data.Text (Text)

import Prelude (($), (.),(<$>),(<*>),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

import Barcodable.com.Model
import Barcodable.com.Core


-- * InlineResponse200

-- | 'inlineResponse200Upcs' Lens
inlineResponse200UpcsL :: Lens_' InlineResponse200 (Maybe [Text])
inlineResponse200UpcsL f InlineResponse200{..} = (\inlineResponse200Upcs -> InlineResponse200 { inlineResponse200Upcs, ..} ) <$> f inlineResponse200Upcs
{-# INLINE inlineResponse200UpcsL #-}

-- | 'inlineResponse200Eans' Lens
inlineResponse200EansL :: Lens_' InlineResponse200 (Maybe [Text])
inlineResponse200EansL f InlineResponse200{..} = (\inlineResponse200Eans -> InlineResponse200 { inlineResponse200Eans, ..} ) <$> f inlineResponse200Eans
{-# INLINE inlineResponse200EansL #-}

-- | 'inlineResponse200Asins' Lens
inlineResponse200AsinsL :: Lens_' InlineResponse200 (Maybe [Text])
inlineResponse200AsinsL f InlineResponse200{..} = (\inlineResponse200Asins -> InlineResponse200 { inlineResponse200Asins, ..} ) <$> f inlineResponse200Asins
{-# INLINE inlineResponse200AsinsL #-}

-- | 'inlineResponse200Message' Lens
inlineResponse200MessageL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200MessageL f InlineResponse200{..} = (\inlineResponse200Message -> InlineResponse200 { inlineResponse200Message, ..} ) <$> f inlineResponse200Message
{-# INLINE inlineResponse200MessageL #-}



-- * InlineResponse400

-- | 'inlineResponse400Message' Lens
inlineResponse400MessageL :: Lens_' InlineResponse400 (Maybe Text)
inlineResponse400MessageL f InlineResponse400{..} = (\inlineResponse400Message -> InlineResponse400 { inlineResponse400Message, ..} ) <$> f inlineResponse400Message
{-# INLINE inlineResponse400MessageL #-}

-- | 'inlineResponse400Status' Lens
inlineResponse400StatusL :: Lens_' InlineResponse400 (Maybe Int)
inlineResponse400StatusL f InlineResponse400{..} = (\inlineResponse400Status -> InlineResponse400 { inlineResponse400Status, ..} ) <$> f inlineResponse400Status
{-# INLINE inlineResponse400StatusL #-}



-- * InvalidCode

-- | 'invalidCodeMessage' Lens
invalidCodeMessageL :: Lens_' InvalidCode (Maybe Text)
invalidCodeMessageL f InvalidCode{..} = (\invalidCodeMessage -> InvalidCode { invalidCodeMessage, ..} ) <$> f invalidCodeMessage
{-# INLINE invalidCodeMessageL #-}

-- | 'invalidCodeStatus' Lens
invalidCodeStatusL :: Lens_' InvalidCode (Maybe Int)
invalidCodeStatusL f InvalidCode{..} = (\invalidCodeStatus -> InvalidCode { invalidCodeStatus, ..} ) <$> f invalidCodeStatus
{-# INLINE invalidCodeStatusL #-}



-- * Item

-- | 'itemUpc' Lens
itemUpcL :: Lens_' Item (Maybe Text)
itemUpcL f Item{..} = (\itemUpc -> Item { itemUpc, ..} ) <$> f itemUpc
{-# INLINE itemUpcL #-}

-- | 'itemEan' Lens
itemEanL :: Lens_' Item (Maybe Text)
itemEanL f Item{..} = (\itemEan -> Item { itemEan, ..} ) <$> f itemEan
{-# INLINE itemEanL #-}

-- | 'itemIsbn' Lens
itemIsbnL :: Lens_' Item (Maybe Text)
itemIsbnL f Item{..} = (\itemIsbn -> Item { itemIsbn, ..} ) <$> f itemIsbn
{-# INLINE itemIsbnL #-}

-- | 'itemAsin' Lens
itemAsinL :: Lens_' Item (Maybe Text)
itemAsinL f Item{..} = (\itemAsin -> Item { itemAsin, ..} ) <$> f itemAsin
{-# INLINE itemAsinL #-}

-- | 'itemTitle' Lens
itemTitleL :: Lens_' Item (Maybe Text)
itemTitleL f Item{..} = (\itemTitle -> Item { itemTitle, ..} ) <$> f itemTitle
{-# INLINE itemTitleL #-}

-- | 'itemSku' Lens
itemSkuL :: Lens_' Item (Maybe Text)
itemSkuL f Item{..} = (\itemSku -> Item { itemSku, ..} ) <$> f itemSku
{-# INLINE itemSkuL #-}

-- | 'itemMpn' Lens
itemMpnL :: Lens_' Item (Maybe Text)
itemMpnL f Item{..} = (\itemMpn -> Item { itemMpn, ..} ) <$> f itemMpn
{-# INLINE itemMpnL #-}

-- | 'itemPartNumber' Lens
itemPartNumberL :: Lens_' Item (Maybe Text)
itemPartNumberL f Item{..} = (\itemPartNumber -> Item { itemPartNumber, ..} ) <$> f itemPartNumber
{-# INLINE itemPartNumberL #-}

-- | 'itemUpcs' Lens
itemUpcsL :: Lens_' Item (Maybe [Text])
itemUpcsL f Item{..} = (\itemUpcs -> Item { itemUpcs, ..} ) <$> f itemUpcs
{-# INLINE itemUpcsL #-}

-- | 'itemDescription' Lens
itemDescriptionL :: Lens_' Item (Maybe Text)
itemDescriptionL f Item{..} = (\itemDescription -> Item { itemDescription, ..} ) <$> f itemDescription
{-# INLINE itemDescriptionL #-}

-- | 'itemBrand' Lens
itemBrandL :: Lens_' Item (Maybe Text)
itemBrandL f Item{..} = (\itemBrand -> Item { itemBrand, ..} ) <$> f itemBrand
{-# INLINE itemBrandL #-}

-- | 'itemManufacturer' Lens
itemManufacturerL :: Lens_' Item (Maybe Text)
itemManufacturerL f Item{..} = (\itemManufacturer -> Item { itemManufacturer, ..} ) <$> f itemManufacturer
{-# INLINE itemManufacturerL #-}

-- | 'itemColor' Lens
itemColorL :: Lens_' Item (Maybe Text)
itemColorL f Item{..} = (\itemColor -> Item { itemColor, ..} ) <$> f itemColor
{-# INLINE itemColorL #-}

-- | 'itemNewPrice' Lens
itemNewPriceL :: Lens_' Item (Maybe Double)
itemNewPriceL f Item{..} = (\itemNewPrice -> Item { itemNewPrice, ..} ) <$> f itemNewPrice
{-# INLINE itemNewPriceL #-}

-- | 'itemUsedPrice' Lens
itemUsedPriceL :: Lens_' Item (Maybe Double)
itemUsedPriceL f Item{..} = (\itemUsedPrice -> Item { itemUsedPrice, ..} ) <$> f itemUsedPrice
{-# INLINE itemUsedPriceL #-}

-- | 'itemCurrencyCode' Lens
itemCurrencyCodeL :: Lens_' Item (Maybe Text)
itemCurrencyCodeL f Item{..} = (\itemCurrencyCode -> Item { itemCurrencyCode, ..} ) <$> f itemCurrencyCode
{-# INLINE itemCurrencyCodeL #-}

-- | 'itemUrl' Lens
itemUrlL :: Lens_' Item (Maybe Text)
itemUrlL f Item{..} = (\itemUrl -> Item { itemUrl, ..} ) <$> f itemUrl
{-# INLINE itemUrlL #-}

-- | 'itemFeatures' Lens
itemFeaturesL :: Lens_' Item (Maybe [Text])
itemFeaturesL f Item{..} = (\itemFeatures -> Item { itemFeatures, ..} ) <$> f itemFeatures
{-# INLINE itemFeaturesL #-}

-- | 'itemDimensions' Lens
itemDimensionsL :: Lens_' Item (Maybe [A.Value])
itemDimensionsL f Item{..} = (\itemDimensions -> Item { itemDimensions, ..} ) <$> f itemDimensions
{-# INLINE itemDimensionsL #-}

-- | 'itemImages' Lens
itemImagesL :: Lens_' Item (Maybe [Text])
itemImagesL f Item{..} = (\itemImages -> Item { itemImages, ..} ) <$> f itemImages
{-# INLINE itemImagesL #-}

-- | 'itemMatchedItems' Lens
itemMatchedItemsL :: Lens_' Item (Maybe [A.Value])
itemMatchedItemsL f Item{..} = (\itemMatchedItems -> Item { itemMatchedItems, ..} ) <$> f itemMatchedItems
{-# INLINE itemMatchedItemsL #-}

-- | 'itemIsoCountryCodes' Lens
itemIsoCountryCodesL :: Lens_' Item (Maybe [Text])
itemIsoCountryCodesL f Item{..} = (\itemIsoCountryCodes -> Item { itemIsoCountryCodes, ..} ) <$> f itemIsoCountryCodes
{-# INLINE itemIsoCountryCodesL #-}

-- | 'itemCompanyName' Lens
itemCompanyNameL :: Lens_' Item (Maybe Text)
itemCompanyNameL f Item{..} = (\itemCompanyName -> Item { itemCompanyName, ..} ) <$> f itemCompanyName
{-# INLINE itemCompanyNameL #-}

-- | 'itemCompanyAddress' Lens
itemCompanyAddressL :: Lens_' Item (Maybe Text)
itemCompanyAddressL f Item{..} = (\itemCompanyAddress -> Item { itemCompanyAddress, ..} ) <$> f itemCompanyAddress
{-# INLINE itemCompanyAddressL #-}

-- | 'itemCategories' Lens
itemCategoriesL :: Lens_' Item (Maybe [Text])
itemCategoriesL f Item{..} = (\itemCategories -> Item { itemCategories, ..} ) <$> f itemCategories
{-# INLINE itemCategoriesL #-}

-- | 'itemCategoryHierarchies' Lens
itemCategoryHierarchiesL :: Lens_' Item (Maybe [Text])
itemCategoryHierarchiesL f Item{..} = (\itemCategoryHierarchies -> Item { itemCategoryHierarchies, ..} ) <$> f itemCategoryHierarchies
{-# INLINE itemCategoryHierarchiesL #-}



-- * NotFound

-- | 'notFoundMessage' Lens
notFoundMessageL :: Lens_' NotFound (Maybe Text)
notFoundMessageL f NotFound{..} = (\notFoundMessage -> NotFound { notFoundMessage, ..} ) <$> f notFoundMessage
{-# INLINE notFoundMessageL #-}

-- | 'notFoundStatus' Lens
notFoundStatusL :: Lens_' NotFound (Maybe Int)
notFoundStatusL f NotFound{..} = (\notFoundStatus -> NotFound { notFoundStatus, ..} ) <$> f notFoundStatus
{-# INLINE notFoundStatusL #-}


