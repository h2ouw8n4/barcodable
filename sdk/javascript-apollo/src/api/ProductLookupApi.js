/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import InvalidCode from '../model/InvalidCode';
import Item from '../model/Item';
import NotFound from '../model/NotFound';

/**
* ProductLookup service.
* @module api/ProductLookupApi
* @version 1.5.0
*/
export default class ProductLookupApi extends ApiClient {

    /**
    * Constructs a new ProductLookupApi. 
    * @alias module:api/ProductLookupApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Find item by asin code
     * Returns a single item
     * @param {String} asin ASIN code of item to return
     * @return {Promise<Item>}
     */
    async getItemByASIN(asin) {
      let postBody = null;
      // verify the required parameter 'asin' is set
      if (asin === undefined || asin === null) {
        throw new Error("Missing the required parameter 'asin' when calling getItemByASIN");
      }

      let pathParams = {
        'asin': asin
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Item;

      return this.callApi(
        '/api/v1/asin/{asin}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find item by UPC code
     * Returns a single item
     * @param {String} ean EAN code of item to return
     * @return {Promise<Item>}
     */
    async getItemByEAN(ean) {
      let postBody = null;
      // verify the required parameter 'ean' is set
      if (ean === undefined || ean === null) {
        throw new Error("Missing the required parameter 'ean' when calling getItemByEAN");
      }

      let pathParams = {
        'ean': ean
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Item;

      return this.callApi(
        '/api/v1/ean/{ean}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find item by UPC code
     * Returns a single item
     * @param {String} upc UPC code of item to return
     * @return {Promise<Item>}
     */
    async getItemByUPC(upc) {
      let postBody = null;
      // verify the required parameter 'upc' is set
      if (upc === undefined || upc === null) {
        throw new Error("Missing the required parameter 'upc' when calling getItemByUPC");
      }

      let pathParams = {
        'upc': upc
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Item;

      return this.callApi(
        '/api/v1/upc/{upc}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
