/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Inline_response_200.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Inline_response_200::Inline_response_200()
{
    m_UpcsIsSet = false;
    m_EansIsSet = false;
    m_AsinsIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
}

Inline_response_200::~Inline_response_200()
{
}

void Inline_response_200::validate()
{
    // TODO: implement validation
}

web::json::value Inline_response_200::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Upcs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("upcs")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Eans )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("eans")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Asins )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("asins")] = web::json::value::array(jsonArray);
        }
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }

    return val;
}

void Inline_response_200::fromJson(const web::json::value& val)
{
    {
        m_Upcs.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("upcs")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("upcs")).as_array() )
        {
            m_Upcs.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Eans.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("eans")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("eans")).as_array() )
        {
            m_Eans.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Asins.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("asins")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("asins")).as_array() )
        {
            m_Asins.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            setMessage(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Inline_response_200::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Upcs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upcs"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Eans )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eans"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Asins )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("asins"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
}

void Inline_response_200::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Upcs.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("upcs")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("upcs"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Upcs.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Eans.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("eans")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("eans"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Eans.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Asins.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("asins")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("asins"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Asins.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        setMessage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("message"))));
    }
}

std::vector<utility::string_t>& Inline_response_200::getUpcs()
{
    return m_Upcs;
}

void Inline_response_200::setUpcs(const std::vector<utility::string_t>& value)
{
    m_Upcs = value;
    m_UpcsIsSet = true;
}

bool Inline_response_200::upcsIsSet() const
{
    return m_UpcsIsSet;
}

void Inline_response_200::unsetUpcs()
{
    m_UpcsIsSet = false;
}

std::vector<utility::string_t>& Inline_response_200::getEans()
{
    return m_Eans;
}

void Inline_response_200::setEans(const std::vector<utility::string_t>& value)
{
    m_Eans = value;
    m_EansIsSet = true;
}

bool Inline_response_200::eansIsSet() const
{
    return m_EansIsSet;
}

void Inline_response_200::unsetEans()
{
    m_EansIsSet = false;
}

std::vector<utility::string_t>& Inline_response_200::getAsins()
{
    return m_Asins;
}

void Inline_response_200::setAsins(const std::vector<utility::string_t>& value)
{
    m_Asins = value;
    m_AsinsIsSet = true;
}

bool Inline_response_200::asinsIsSet() const
{
    return m_AsinsIsSet;
}

void Inline_response_200::unsetAsins()
{
    m_AsinsIsSet = false;
}

utility::string_t Inline_response_200::getMessage() const
{
    return m_Message;
}

void Inline_response_200::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool Inline_response_200::messageIsSet() const
{
    return m_MessageIsSet;
}

void Inline_response_200::unsetMessage()
{
    m_MessageIsSet = false;
}

}
}
}
}

