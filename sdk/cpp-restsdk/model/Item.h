/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Item.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Item_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Item_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Item
    : public ModelBase
{
public:
    Item();
    virtual ~Item();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Item members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUpc() const;
    bool upcIsSet() const;
    void unsetUpc();

    void setUpc(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEan() const;
    bool eanIsSet() const;
    void unsetEan();

    void setEan(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIsbn() const;
    bool isbnIsSet() const;
    void unsetIsbn();

    void setIsbn(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAsin() const;
    bool asinIsSet() const;
    void unsetAsin();

    void setAsin(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle() const;
    bool titleIsSet() const;
    void unsetTitle();

    void setTitle(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSku() const;
    bool skuIsSet() const;
    void unsetSku();

    void setSku(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMpn() const;
    bool mpnIsSet() const;
    void unsetMpn();

    void setMpn(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartNumber() const;
    bool partNumberIsSet() const;
    void unsetPart_number();

    void setPartNumber(const utility::string_t& value);

    /// <summary>
    /// A list of matching upc codes.
    /// </summary>
    std::vector<utility::string_t>& getUpcs();
    bool upcsIsSet() const;
    void unsetUpcs();

    void setUpcs(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBrand() const;
    bool brandIsSet() const;
    void unsetBrand();

    void setBrand(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getManufacturer() const;
    bool manufacturerIsSet() const;
    void unsetManufacturer();

    void setManufacturer(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getColor() const;
    bool colorIsSet() const;
    void unsetColor();

    void setColor(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getNewPrice() const;
    bool newPriceIsSet() const;
    void unsetNew_price();

    void setNewPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    double getUsedPrice() const;
    bool usedPriceIsSet() const;
    void unsetUsed_price();

    void setUsedPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrencyCode() const;
    bool currencyCodeIsSet() const;
    void unsetCurrency_code();

    void setCurrencyCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();

    void setUrl(const utility::string_t& value);

    /// <summary>
    /// A list of product feature descriptions.
    /// </summary>
    std::vector<utility::string_t>& getFeatures();
    bool featuresIsSet() const;
    void unsetFeatures();

    void setFeatures(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Product dimensions and weight.  (&#39;meters&#39;, &#39;centimeters&#39;, &#39;millimeters&#39;, &#39;inches&#39;, &#39;feet&#39;, &#39;yards&#39;, &#39;ounces&#39;, &#39;pounds&#39;, &#39;grams&#39;, &#39;milligrams&#39;, &#39;kilograms&#39;)
    /// </summary>
    std::vector<std::shared_ptr<Object>>& getDimensions();
    bool dimensionsIsSet() const;
    void unsetDimensions();

    void setDimensions(const std::vector<std::shared_ptr<Object>>& value);

    /// <summary>
    /// A list product images.
    /// </summary>
    std::vector<utility::string_t>& getImages();
    bool imagesIsSet() const;
    void unsetImages();

    void setImages(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Matched items for this product.
    /// </summary>
    std::vector<std::shared_ptr<Object>>& getMatchedItems();
    bool matchedItemsIsSet() const;
    void unsetMatched_items();

    void setMatchedItems(const std::vector<std::shared_ptr<Object>>& value);

    /// <summary>
    /// A list of country codes from which this item belongs.
    /// </summary>
    std::vector<utility::string_t>& getIsoCountryCodes();
    bool isoCountryCodesIsSet() const;
    void unsetIso_country_codes();

    void setIsoCountryCodes(const std::vector<utility::string_t>& value);

    /// <summary>
    /// The company name registered to the product&#39;s UPC or EAN.
    /// </summary>
    utility::string_t getCompanyName() const;
    bool companyNameIsSet() const;
    void unsetCompany_name();

    void setCompanyName(const utility::string_t& value);

    /// <summary>
    /// The company address registered to the product&#39;s UPC or EAN.
    /// </summary>
    utility::string_t getCompanyAddress() const;
    bool companyAddressIsSet() const;
    void unsetCompany_address();

    void setCompanyAddress(const utility::string_t& value);

    /// <summary>
    /// A list of categories for this product.
    /// </summary>
    std::vector<utility::string_t>& getCategories();
    bool categoriesIsSet() const;
    void unsetCategories();

    void setCategories(const std::vector<utility::string_t>& value);

    /// <summary>
    /// A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.
    /// </summary>
    std::vector<utility::string_t>& getCategoryHierarchies();
    bool categoryHierarchiesIsSet() const;
    void unsetCategory_hierarchies();

    void setCategoryHierarchies(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Upc;
    bool m_UpcIsSet;
    utility::string_t m_Ean;
    bool m_EanIsSet;
    utility::string_t m_Isbn;
    bool m_IsbnIsSet;
    utility::string_t m_Asin;
    bool m_AsinIsSet;
    utility::string_t m_Title;
    bool m_TitleIsSet;
    utility::string_t m_Sku;
    bool m_SkuIsSet;
    utility::string_t m_Mpn;
    bool m_MpnIsSet;
    utility::string_t m_Part_number;
    bool m_Part_numberIsSet;
    std::vector<utility::string_t> m_Upcs;
    bool m_UpcsIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Brand;
    bool m_BrandIsSet;
    utility::string_t m_Manufacturer;
    bool m_ManufacturerIsSet;
    utility::string_t m_Color;
    bool m_ColorIsSet;
    double m_New_price;
    bool m_New_priceIsSet;
    double m_Used_price;
    bool m_Used_priceIsSet;
    utility::string_t m_Currency_code;
    bool m_Currency_codeIsSet;
    utility::string_t m_Url;
    bool m_UrlIsSet;
    std::vector<utility::string_t> m_Features;
    bool m_FeaturesIsSet;
    std::vector<std::shared_ptr<Object>> m_Dimensions;
    bool m_DimensionsIsSet;
    std::vector<utility::string_t> m_Images;
    bool m_ImagesIsSet;
    std::vector<std::shared_ptr<Object>> m_Matched_items;
    bool m_Matched_itemsIsSet;
    std::vector<utility::string_t> m_Iso_country_codes;
    bool m_Iso_country_codesIsSet;
    utility::string_t m_Company_name;
    bool m_Company_nameIsSet;
    utility::string_t m_Company_address;
    bool m_Company_addressIsSet;
    std::vector<utility::string_t> m_Categories;
    bool m_CategoriesIsSet;
    std::vector<utility::string_t> m_Category_hierarchies;
    bool m_Category_hierarchiesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Item_H_ */
