/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Item.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Item::Item()
{
    m_Upc = utility::conversions::to_string_t("");
    m_UpcIsSet = false;
    m_Ean = utility::conversions::to_string_t("");
    m_EanIsSet = false;
    m_Isbn = utility::conversions::to_string_t("");
    m_IsbnIsSet = false;
    m_Asin = utility::conversions::to_string_t("");
    m_AsinIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Sku = utility::conversions::to_string_t("");
    m_SkuIsSet = false;
    m_Mpn = utility::conversions::to_string_t("");
    m_MpnIsSet = false;
    m_Part_number = utility::conversions::to_string_t("");
    m_Part_numberIsSet = false;
    m_UpcsIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Brand = utility::conversions::to_string_t("");
    m_BrandIsSet = false;
    m_Manufacturer = utility::conversions::to_string_t("");
    m_ManufacturerIsSet = false;
    m_Color = utility::conversions::to_string_t("");
    m_ColorIsSet = false;
    m_New_price = 0.0;
    m_New_priceIsSet = false;
    m_Used_price = 0.0;
    m_Used_priceIsSet = false;
    m_Currency_code = utility::conversions::to_string_t("");
    m_Currency_codeIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_FeaturesIsSet = false;
    m_DimensionsIsSet = false;
    m_ImagesIsSet = false;
    m_Matched_itemsIsSet = false;
    m_Iso_country_codesIsSet = false;
    m_Company_name = utility::conversions::to_string_t("");
    m_Company_nameIsSet = false;
    m_Company_address = utility::conversions::to_string_t("");
    m_Company_addressIsSet = false;
    m_CategoriesIsSet = false;
    m_Category_hierarchiesIsSet = false;
}

Item::~Item()
{
}

void Item::validate()
{
    // TODO: implement validation
}

web::json::value Item::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_UpcIsSet)
    {
        val[utility::conversions::to_string_t("upc")] = ModelBase::toJson(m_Upc);
    }
    if(m_EanIsSet)
    {
        val[utility::conversions::to_string_t("ean")] = ModelBase::toJson(m_Ean);
    }
    if(m_IsbnIsSet)
    {
        val[utility::conversions::to_string_t("isbn")] = ModelBase::toJson(m_Isbn);
    }
    if(m_AsinIsSet)
    {
        val[utility::conversions::to_string_t("asin")] = ModelBase::toJson(m_Asin);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_SkuIsSet)
    {
        val[utility::conversions::to_string_t("sku")] = ModelBase::toJson(m_Sku);
    }
    if(m_MpnIsSet)
    {
        val[utility::conversions::to_string_t("mpn")] = ModelBase::toJson(m_Mpn);
    }
    if(m_Part_numberIsSet)
    {
        val[utility::conversions::to_string_t("part_number")] = ModelBase::toJson(m_Part_number);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Upcs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("upcs")] = web::json::value::array(jsonArray);
        }
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_BrandIsSet)
    {
        val[utility::conversions::to_string_t("brand")] = ModelBase::toJson(m_Brand);
    }
    if(m_ManufacturerIsSet)
    {
        val[utility::conversions::to_string_t("manufacturer")] = ModelBase::toJson(m_Manufacturer);
    }
    if(m_ColorIsSet)
    {
        val[utility::conversions::to_string_t("color")] = ModelBase::toJson(m_Color);
    }
    if(m_New_priceIsSet)
    {
        val[utility::conversions::to_string_t("new_price")] = ModelBase::toJson(m_New_price);
    }
    if(m_Used_priceIsSet)
    {
        val[utility::conversions::to_string_t("used_price")] = ModelBase::toJson(m_Used_price);
    }
    if(m_Currency_codeIsSet)
    {
        val[utility::conversions::to_string_t("currency_code")] = ModelBase::toJson(m_Currency_code);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Features )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("features")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Dimensions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("dimensions")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Images )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("images")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Matched_items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("matched_items")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Iso_country_codes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("iso_country_codes")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Company_nameIsSet)
    {
        val[utility::conversions::to_string_t("company_name")] = ModelBase::toJson(m_Company_name);
    }
    if(m_Company_addressIsSet)
    {
        val[utility::conversions::to_string_t("company_address")] = ModelBase::toJson(m_Company_address);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Categories )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("categories")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Category_hierarchies )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("category_hierarchies")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Item::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("upc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("upc"));
        if(!fieldValue.is_null())
        {
            setUpc(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ean")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ean"));
        if(!fieldValue.is_null())
        {
            setEan(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isbn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isbn"));
        if(!fieldValue.is_null())
        {
            setIsbn(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("asin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("asin"));
        if(!fieldValue.is_null())
        {
            setAsin(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            setTitle(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sku")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sku"));
        if(!fieldValue.is_null())
        {
            setSku(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mpn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mpn"));
        if(!fieldValue.is_null())
        {
            setMpn(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("part_number")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("part_number"));
        if(!fieldValue.is_null())
        {
            setPartNumber(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Upcs.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("upcs")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("upcs")).as_array() )
        {
            m_Upcs.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            setDescription(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("brand")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("brand"));
        if(!fieldValue.is_null())
        {
            setBrand(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("manufacturer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("manufacturer"));
        if(!fieldValue.is_null())
        {
            setManufacturer(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("color")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("color"));
        if(!fieldValue.is_null())
        {
            setColor(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("new_price")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("new_price"));
        if(!fieldValue.is_null())
        {
            setNewPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("used_price")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("used_price"));
        if(!fieldValue.is_null())
        {
            setUsedPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currency_code")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("currency_code"));
        if(!fieldValue.is_null())
        {
            setCurrencyCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("url"));
        if(!fieldValue.is_null())
        {
            setUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Features.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("features")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("features")).as_array() )
        {
            m_Features.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Dimensions.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("dimensions")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("dimensions")).as_array() )
        {
            if(item.is_null())
            {
                m_Dimensions.push_back( std::shared_ptr<Object>(nullptr) );
            }
            else
            {
                std::shared_ptr<Object> newItem(nullptr);
                newItem->fromJson(item);
                m_Dimensions.push_back( newItem );
            }
        }
        }
    }
    {
        m_Images.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("images")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("images")).as_array() )
        {
            m_Images.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Matched_items.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("matched_items")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("matched_items")).as_array() )
        {
            if(item.is_null())
            {
                m_Matched_items.push_back( std::shared_ptr<Object>(nullptr) );
            }
            else
            {
                std::shared_ptr<Object> newItem(nullptr);
                newItem->fromJson(item);
                m_Matched_items.push_back( newItem );
            }
        }
        }
    }
    {
        m_Iso_country_codes.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("iso_country_codes")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("iso_country_codes")).as_array() )
        {
            m_Iso_country_codes.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("company_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("company_name"));
        if(!fieldValue.is_null())
        {
            setCompanyName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("company_address")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("company_address"));
        if(!fieldValue.is_null())
        {
            setCompanyAddress(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Categories.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("categories")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("categories")).as_array() )
        {
            m_Categories.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Category_hierarchies.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("category_hierarchies")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("category_hierarchies")).as_array() )
        {
            m_Category_hierarchies.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

void Item::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_UpcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upc"), m_Upc));
    }
    if(m_EanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ean"), m_Ean));
    }
    if(m_IsbnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isbn"), m_Isbn));
    }
    if(m_AsinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("asin"), m_Asin));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
    if(m_SkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sku"), m_Sku));
    }
    if(m_MpnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mpn"), m_Mpn));
    }
    if(m_Part_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("part_number"), m_Part_number));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Upcs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upcs"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_BrandIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("brand"), m_Brand));
    }
    if(m_ManufacturerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("manufacturer"), m_Manufacturer));
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("color"), m_Color));
    }
    if(m_New_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("new_price"), m_New_price));
    }
    if(m_Used_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("used_price"), m_Used_price));
    }
    if(m_Currency_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency_code"), m_Currency_code));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Features )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("features"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Dimensions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dimensions"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Images )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("images"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Matched_items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("matched_items"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Iso_country_codes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iso_country_codes"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_Company_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("company_name"), m_Company_name));
    }
    if(m_Company_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("company_address"), m_Company_address));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Categories )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("categories"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Category_hierarchies )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("category_hierarchies"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void Item::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("upc")))
    {
        setUpc(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("upc"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ean")))
    {
        setEan(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ean"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isbn")))
    {
        setIsbn(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isbn"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("asin")))
    {
        setAsin(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("asin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("title"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sku")))
    {
        setSku(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sku"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mpn")))
    {
        setMpn(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("mpn"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("part_number")))
    {
        setPartNumber(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("part_number"))));
    }
    {
        m_Upcs.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("upcs")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("upcs"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Upcs.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("brand")))
    {
        setBrand(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("brand"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("manufacturer")))
    {
        setManufacturer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("manufacturer"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("color")))
    {
        setColor(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("color"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("new_price")))
    {
        setNewPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("new_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("used_price")))
    {
        setUsedPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("used_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currency_code")))
    {
        setCurrencyCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency_code"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("url"))));
    }
    {
        m_Features.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("features")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("features"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Features.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Dimensions.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("dimensions")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dimensions"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Dimensions.push_back( std::shared_ptr<Object>(nullptr) );
            }
            else
            {
                std::shared_ptr<Object> newItem(nullptr);
                newItem->fromJson(item);
                m_Dimensions.push_back( newItem );
            }
        }
        }
    }
    {
        m_Images.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("images")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("images"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Images.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Matched_items.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("matched_items")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("matched_items"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Matched_items.push_back( std::shared_ptr<Object>(nullptr) );
            }
            else
            {
                std::shared_ptr<Object> newItem(nullptr);
                newItem->fromJson(item);
                m_Matched_items.push_back( newItem );
            }
        }
        }
    }
    {
        m_Iso_country_codes.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("iso_country_codes")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("iso_country_codes"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Iso_country_codes.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("company_name")))
    {
        setCompanyName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("company_name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("company_address")))
    {
        setCompanyAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("company_address"))));
    }
    {
        m_Categories.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("categories")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("categories"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Categories.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Category_hierarchies.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("category_hierarchies")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("category_hierarchies"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Category_hierarchies.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

utility::string_t Item::getUpc() const
{
    return m_Upc;
}

void Item::setUpc(const utility::string_t& value)
{
    m_Upc = value;
    m_UpcIsSet = true;
}

bool Item::upcIsSet() const
{
    return m_UpcIsSet;
}

void Item::unsetUpc()
{
    m_UpcIsSet = false;
}

utility::string_t Item::getEan() const
{
    return m_Ean;
}

void Item::setEan(const utility::string_t& value)
{
    m_Ean = value;
    m_EanIsSet = true;
}

bool Item::eanIsSet() const
{
    return m_EanIsSet;
}

void Item::unsetEan()
{
    m_EanIsSet = false;
}

utility::string_t Item::getIsbn() const
{
    return m_Isbn;
}

void Item::setIsbn(const utility::string_t& value)
{
    m_Isbn = value;
    m_IsbnIsSet = true;
}

bool Item::isbnIsSet() const
{
    return m_IsbnIsSet;
}

void Item::unsetIsbn()
{
    m_IsbnIsSet = false;
}

utility::string_t Item::getAsin() const
{
    return m_Asin;
}

void Item::setAsin(const utility::string_t& value)
{
    m_Asin = value;
    m_AsinIsSet = true;
}

bool Item::asinIsSet() const
{
    return m_AsinIsSet;
}

void Item::unsetAsin()
{
    m_AsinIsSet = false;
}

utility::string_t Item::getTitle() const
{
    return m_Title;
}

void Item::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool Item::titleIsSet() const
{
    return m_TitleIsSet;
}

void Item::unsetTitle()
{
    m_TitleIsSet = false;
}

utility::string_t Item::getSku() const
{
    return m_Sku;
}

void Item::setSku(const utility::string_t& value)
{
    m_Sku = value;
    m_SkuIsSet = true;
}

bool Item::skuIsSet() const
{
    return m_SkuIsSet;
}

void Item::unsetSku()
{
    m_SkuIsSet = false;
}

utility::string_t Item::getMpn() const
{
    return m_Mpn;
}

void Item::setMpn(const utility::string_t& value)
{
    m_Mpn = value;
    m_MpnIsSet = true;
}

bool Item::mpnIsSet() const
{
    return m_MpnIsSet;
}

void Item::unsetMpn()
{
    m_MpnIsSet = false;
}

utility::string_t Item::getPartNumber() const
{
    return m_Part_number;
}

void Item::setPartNumber(const utility::string_t& value)
{
    m_Part_number = value;
    m_Part_numberIsSet = true;
}

bool Item::partNumberIsSet() const
{
    return m_Part_numberIsSet;
}

void Item::unsetPart_number()
{
    m_Part_numberIsSet = false;
}

std::vector<utility::string_t>& Item::getUpcs()
{
    return m_Upcs;
}

void Item::setUpcs(const std::vector<utility::string_t>& value)
{
    m_Upcs = value;
    m_UpcsIsSet = true;
}

bool Item::upcsIsSet() const
{
    return m_UpcsIsSet;
}

void Item::unsetUpcs()
{
    m_UpcsIsSet = false;
}

utility::string_t Item::getDescription() const
{
    return m_Description;
}

void Item::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Item::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Item::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t Item::getBrand() const
{
    return m_Brand;
}

void Item::setBrand(const utility::string_t& value)
{
    m_Brand = value;
    m_BrandIsSet = true;
}

bool Item::brandIsSet() const
{
    return m_BrandIsSet;
}

void Item::unsetBrand()
{
    m_BrandIsSet = false;
}

utility::string_t Item::getManufacturer() const
{
    return m_Manufacturer;
}

void Item::setManufacturer(const utility::string_t& value)
{
    m_Manufacturer = value;
    m_ManufacturerIsSet = true;
}

bool Item::manufacturerIsSet() const
{
    return m_ManufacturerIsSet;
}

void Item::unsetManufacturer()
{
    m_ManufacturerIsSet = false;
}

utility::string_t Item::getColor() const
{
    return m_Color;
}

void Item::setColor(const utility::string_t& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}

bool Item::colorIsSet() const
{
    return m_ColorIsSet;
}

void Item::unsetColor()
{
    m_ColorIsSet = false;
}

double Item::getNewPrice() const
{
    return m_New_price;
}

void Item::setNewPrice(double value)
{
    m_New_price = value;
    m_New_priceIsSet = true;
}

bool Item::newPriceIsSet() const
{
    return m_New_priceIsSet;
}

void Item::unsetNew_price()
{
    m_New_priceIsSet = false;
}

double Item::getUsedPrice() const
{
    return m_Used_price;
}

void Item::setUsedPrice(double value)
{
    m_Used_price = value;
    m_Used_priceIsSet = true;
}

bool Item::usedPriceIsSet() const
{
    return m_Used_priceIsSet;
}

void Item::unsetUsed_price()
{
    m_Used_priceIsSet = false;
}

utility::string_t Item::getCurrencyCode() const
{
    return m_Currency_code;
}

void Item::setCurrencyCode(const utility::string_t& value)
{
    m_Currency_code = value;
    m_Currency_codeIsSet = true;
}

bool Item::currencyCodeIsSet() const
{
    return m_Currency_codeIsSet;
}

void Item::unsetCurrency_code()
{
    m_Currency_codeIsSet = false;
}

utility::string_t Item::getUrl() const
{
    return m_Url;
}

void Item::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool Item::urlIsSet() const
{
    return m_UrlIsSet;
}

void Item::unsetUrl()
{
    m_UrlIsSet = false;
}

std::vector<utility::string_t>& Item::getFeatures()
{
    return m_Features;
}

void Item::setFeatures(const std::vector<utility::string_t>& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool Item::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void Item::unsetFeatures()
{
    m_FeaturesIsSet = false;
}

std::vector<std::shared_ptr<Object>>& Item::getDimensions()
{
    return m_Dimensions;
}

void Item::setDimensions(const std::vector<std::shared_ptr<Object>>& value)
{
    m_Dimensions = value;
    m_DimensionsIsSet = true;
}

bool Item::dimensionsIsSet() const
{
    return m_DimensionsIsSet;
}

void Item::unsetDimensions()
{
    m_DimensionsIsSet = false;
}

std::vector<utility::string_t>& Item::getImages()
{
    return m_Images;
}

void Item::setImages(const std::vector<utility::string_t>& value)
{
    m_Images = value;
    m_ImagesIsSet = true;
}

bool Item::imagesIsSet() const
{
    return m_ImagesIsSet;
}

void Item::unsetImages()
{
    m_ImagesIsSet = false;
}

std::vector<std::shared_ptr<Object>>& Item::getMatchedItems()
{
    return m_Matched_items;
}

void Item::setMatchedItems(const std::vector<std::shared_ptr<Object>>& value)
{
    m_Matched_items = value;
    m_Matched_itemsIsSet = true;
}

bool Item::matchedItemsIsSet() const
{
    return m_Matched_itemsIsSet;
}

void Item::unsetMatched_items()
{
    m_Matched_itemsIsSet = false;
}

std::vector<utility::string_t>& Item::getIsoCountryCodes()
{
    return m_Iso_country_codes;
}

void Item::setIsoCountryCodes(const std::vector<utility::string_t>& value)
{
    m_Iso_country_codes = value;
    m_Iso_country_codesIsSet = true;
}

bool Item::isoCountryCodesIsSet() const
{
    return m_Iso_country_codesIsSet;
}

void Item::unsetIso_country_codes()
{
    m_Iso_country_codesIsSet = false;
}

utility::string_t Item::getCompanyName() const
{
    return m_Company_name;
}

void Item::setCompanyName(const utility::string_t& value)
{
    m_Company_name = value;
    m_Company_nameIsSet = true;
}

bool Item::companyNameIsSet() const
{
    return m_Company_nameIsSet;
}

void Item::unsetCompany_name()
{
    m_Company_nameIsSet = false;
}

utility::string_t Item::getCompanyAddress() const
{
    return m_Company_address;
}

void Item::setCompanyAddress(const utility::string_t& value)
{
    m_Company_address = value;
    m_Company_addressIsSet = true;
}

bool Item::companyAddressIsSet() const
{
    return m_Company_addressIsSet;
}

void Item::unsetCompany_address()
{
    m_Company_addressIsSet = false;
}

std::vector<utility::string_t>& Item::getCategories()
{
    return m_Categories;
}

void Item::setCategories(const std::vector<utility::string_t>& value)
{
    m_Categories = value;
    m_CategoriesIsSet = true;
}

bool Item::categoriesIsSet() const
{
    return m_CategoriesIsSet;
}

void Item::unsetCategories()
{
    m_CategoriesIsSet = false;
}

std::vector<utility::string_t>& Item::getCategoryHierarchies()
{
    return m_Category_hierarchies;
}

void Item::setCategoryHierarchies(const std::vector<utility::string_t>& value)
{
    m_Category_hierarchies = value;
    m_Category_hierarchiesIsSet = true;
}

bool Item::categoryHierarchiesIsSet() const
{
    return m_Category_hierarchiesIsSet;
}

void Item::unsetCategory_hierarchies()
{
    m_Category_hierarchiesIsSet = false;
}

}
}
}
}

