/* 
 * Barcodable.com API
 *
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ProductLookupApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ProductLookupApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ProductLookupApiClient<C> {
        ProductLookupApiClient {
            configuration: configuration,
        }
    }
}

pub trait ProductLookupApi {
    fn get_item_by_asin(&self, asin: &str) -> Box<Future<Item = ::models::Item, Error = Error<serde_json::Value>>>;
    fn get_item_by_ean(&self, ean: &str) -> Box<Future<Item = ::models::Item, Error = Error<serde_json::Value>>>;
    fn get_item_by_upc(&self, upc: &str) -> Box<Future<Item = ::models::Item, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>ProductLookupApi for ProductLookupApiClient<C> {
    fn get_item_by_asin(&self, asin: &str) -> Box<Future<Item = ::models::Item, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/asin/{asin}".to_string())
            .with_path_param("asin".to_string(), asin.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_item_by_ean(&self, ean: &str) -> Box<Future<Item = ::models::Item, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/ean/{ean}".to_string())
            .with_path_param("ean".to_string(), ean.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_item_by_upc(&self, upc: &str) -> Box<Future<Item = ::models::Item, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/upc/{upc}".to_string())
            .with_path_param("upc".to_string(), upc.to_string())
            .execute(self.configuration.borrow())
    }

}
