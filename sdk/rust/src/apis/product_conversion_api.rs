/* 
 * Barcodable.com API
 *
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ProductConversionApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ProductConversionApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ProductConversionApiClient<C> {
        ProductConversionApiClient {
            configuration: configuration,
        }
    }
}

pub trait ProductConversionApi {
    fn convert_code(&self, upc___ean___asin: &str) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>ProductConversionApi for ProductConversionApiClient<C> {
    fn convert_code(&self, upc___ean___asin: &str) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/convert/{upc | ean | asin}".to_string())
            .with_path_param("upc | ean | asin".to_string(), upc___ean___asin.to_string())
            .execute(self.configuration.borrow())
    }

}
