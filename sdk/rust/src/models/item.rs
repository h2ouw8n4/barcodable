/* 
 * Barcodable.com API
 *
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Item {
  #[serde(rename = "upc")]
  upc: Option<String>,
  #[serde(rename = "ean")]
  ean: Option<String>,
  #[serde(rename = "isbn")]
  isbn: Option<String>,
  #[serde(rename = "asin")]
  asin: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "sku")]
  sku: Option<String>,
  #[serde(rename = "mpn")]
  mpn: Option<String>,
  #[serde(rename = "part_number")]
  part_number: Option<String>,
  /// A list of matching upc codes.
  #[serde(rename = "upcs")]
  upcs: Option<Vec<String>>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "brand")]
  brand: Option<String>,
  #[serde(rename = "manufacturer")]
  manufacturer: Option<String>,
  #[serde(rename = "color")]
  color: Option<String>,
  #[serde(rename = "new_price")]
  new_price: Option<f32>,
  #[serde(rename = "used_price")]
  used_price: Option<f32>,
  #[serde(rename = "currency_code")]
  currency_code: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  /// A list of product feature descriptions.
  #[serde(rename = "features")]
  features: Option<Vec<String>>,
  /// Product dimensions and weight.  ('meters', 'centimeters', 'millimeters', 'inches', 'feet', 'yards', 'ounces', 'pounds', 'grams', 'milligrams', 'kilograms')
  #[serde(rename = "dimensions")]
  dimensions: Option<Vec<Value>>,
  /// A list product images.
  #[serde(rename = "images")]
  images: Option<Vec<String>>,
  /// Matched items for this product.
  #[serde(rename = "matched_items")]
  matched_items: Option<Vec<Value>>,
  /// A list of country codes from which this item belongs.
  #[serde(rename = "iso_country_codes")]
  iso_country_codes: Option<Vec<String>>,
  /// The company name registered to the product's UPC or EAN.
  #[serde(rename = "company_name")]
  company_name: Option<String>,
  /// The company address registered to the product's UPC or EAN.
  #[serde(rename = "company_address")]
  company_address: Option<String>,
  /// A list of categories for this product.
  #[serde(rename = "categories")]
  categories: Option<Vec<String>>,
  /// A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.
  #[serde(rename = "category_hierarchies")]
  category_hierarchies: Option<Vec<String>>
}

impl Item {
  pub fn new() -> Item {
    Item {
      upc: None,
      ean: None,
      isbn: None,
      asin: None,
      title: None,
      sku: None,
      mpn: None,
      part_number: None,
      upcs: None,
      description: None,
      brand: None,
      manufacturer: None,
      color: None,
      new_price: None,
      used_price: None,
      currency_code: None,
      url: None,
      features: None,
      dimensions: None,
      images: None,
      matched_items: None,
      iso_country_codes: None,
      company_name: None,
      company_address: None,
      categories: None,
      category_hierarchies: None
    }
  }

  pub fn set_upc(&mut self, upc: String) {
    self.upc = Some(upc);
  }

  pub fn with_upc(mut self, upc: String) -> Item {
    self.upc = Some(upc);
    self
  }

  pub fn upc(&self) -> Option<&String> {
    self.upc.as_ref()
  }

  pub fn reset_upc(&mut self) {
    self.upc = None;
  }

  pub fn set_ean(&mut self, ean: String) {
    self.ean = Some(ean);
  }

  pub fn with_ean(mut self, ean: String) -> Item {
    self.ean = Some(ean);
    self
  }

  pub fn ean(&self) -> Option<&String> {
    self.ean.as_ref()
  }

  pub fn reset_ean(&mut self) {
    self.ean = None;
  }

  pub fn set_isbn(&mut self, isbn: String) {
    self.isbn = Some(isbn);
  }

  pub fn with_isbn(mut self, isbn: String) -> Item {
    self.isbn = Some(isbn);
    self
  }

  pub fn isbn(&self) -> Option<&String> {
    self.isbn.as_ref()
  }

  pub fn reset_isbn(&mut self) {
    self.isbn = None;
  }

  pub fn set_asin(&mut self, asin: String) {
    self.asin = Some(asin);
  }

  pub fn with_asin(mut self, asin: String) -> Item {
    self.asin = Some(asin);
    self
  }

  pub fn asin(&self) -> Option<&String> {
    self.asin.as_ref()
  }

  pub fn reset_asin(&mut self) {
    self.asin = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> Item {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_sku(&mut self, sku: String) {
    self.sku = Some(sku);
  }

  pub fn with_sku(mut self, sku: String) -> Item {
    self.sku = Some(sku);
    self
  }

  pub fn sku(&self) -> Option<&String> {
    self.sku.as_ref()
  }

  pub fn reset_sku(&mut self) {
    self.sku = None;
  }

  pub fn set_mpn(&mut self, mpn: String) {
    self.mpn = Some(mpn);
  }

  pub fn with_mpn(mut self, mpn: String) -> Item {
    self.mpn = Some(mpn);
    self
  }

  pub fn mpn(&self) -> Option<&String> {
    self.mpn.as_ref()
  }

  pub fn reset_mpn(&mut self) {
    self.mpn = None;
  }

  pub fn set_part_number(&mut self, part_number: String) {
    self.part_number = Some(part_number);
  }

  pub fn with_part_number(mut self, part_number: String) -> Item {
    self.part_number = Some(part_number);
    self
  }

  pub fn part_number(&self) -> Option<&String> {
    self.part_number.as_ref()
  }

  pub fn reset_part_number(&mut self) {
    self.part_number = None;
  }

  pub fn set_upcs(&mut self, upcs: Vec<String>) {
    self.upcs = Some(upcs);
  }

  pub fn with_upcs(mut self, upcs: Vec<String>) -> Item {
    self.upcs = Some(upcs);
    self
  }

  pub fn upcs(&self) -> Option<&Vec<String>> {
    self.upcs.as_ref()
  }

  pub fn reset_upcs(&mut self) {
    self.upcs = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Item {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_brand(&mut self, brand: String) {
    self.brand = Some(brand);
  }

  pub fn with_brand(mut self, brand: String) -> Item {
    self.brand = Some(brand);
    self
  }

  pub fn brand(&self) -> Option<&String> {
    self.brand.as_ref()
  }

  pub fn reset_brand(&mut self) {
    self.brand = None;
  }

  pub fn set_manufacturer(&mut self, manufacturer: String) {
    self.manufacturer = Some(manufacturer);
  }

  pub fn with_manufacturer(mut self, manufacturer: String) -> Item {
    self.manufacturer = Some(manufacturer);
    self
  }

  pub fn manufacturer(&self) -> Option<&String> {
    self.manufacturer.as_ref()
  }

  pub fn reset_manufacturer(&mut self) {
    self.manufacturer = None;
  }

  pub fn set_color(&mut self, color: String) {
    self.color = Some(color);
  }

  pub fn with_color(mut self, color: String) -> Item {
    self.color = Some(color);
    self
  }

  pub fn color(&self) -> Option<&String> {
    self.color.as_ref()
  }

  pub fn reset_color(&mut self) {
    self.color = None;
  }

  pub fn set_new_price(&mut self, new_price: f32) {
    self.new_price = Some(new_price);
  }

  pub fn with_new_price(mut self, new_price: f32) -> Item {
    self.new_price = Some(new_price);
    self
  }

  pub fn new_price(&self) -> Option<&f32> {
    self.new_price.as_ref()
  }

  pub fn reset_new_price(&mut self) {
    self.new_price = None;
  }

  pub fn set_used_price(&mut self, used_price: f32) {
    self.used_price = Some(used_price);
  }

  pub fn with_used_price(mut self, used_price: f32) -> Item {
    self.used_price = Some(used_price);
    self
  }

  pub fn used_price(&self) -> Option<&f32> {
    self.used_price.as_ref()
  }

  pub fn reset_used_price(&mut self) {
    self.used_price = None;
  }

  pub fn set_currency_code(&mut self, currency_code: String) {
    self.currency_code = Some(currency_code);
  }

  pub fn with_currency_code(mut self, currency_code: String) -> Item {
    self.currency_code = Some(currency_code);
    self
  }

  pub fn currency_code(&self) -> Option<&String> {
    self.currency_code.as_ref()
  }

  pub fn reset_currency_code(&mut self) {
    self.currency_code = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> Item {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_features(&mut self, features: Vec<String>) {
    self.features = Some(features);
  }

  pub fn with_features(mut self, features: Vec<String>) -> Item {
    self.features = Some(features);
    self
  }

  pub fn features(&self) -> Option<&Vec<String>> {
    self.features.as_ref()
  }

  pub fn reset_features(&mut self) {
    self.features = None;
  }

  pub fn set_dimensions(&mut self, dimensions: Vec<Value>) {
    self.dimensions = Some(dimensions);
  }

  pub fn with_dimensions(mut self, dimensions: Vec<Value>) -> Item {
    self.dimensions = Some(dimensions);
    self
  }

  pub fn dimensions(&self) -> Option<&Vec<Value>> {
    self.dimensions.as_ref()
  }

  pub fn reset_dimensions(&mut self) {
    self.dimensions = None;
  }

  pub fn set_images(&mut self, images: Vec<String>) {
    self.images = Some(images);
  }

  pub fn with_images(mut self, images: Vec<String>) -> Item {
    self.images = Some(images);
    self
  }

  pub fn images(&self) -> Option<&Vec<String>> {
    self.images.as_ref()
  }

  pub fn reset_images(&mut self) {
    self.images = None;
  }

  pub fn set_matched_items(&mut self, matched_items: Vec<Value>) {
    self.matched_items = Some(matched_items);
  }

  pub fn with_matched_items(mut self, matched_items: Vec<Value>) -> Item {
    self.matched_items = Some(matched_items);
    self
  }

  pub fn matched_items(&self) -> Option<&Vec<Value>> {
    self.matched_items.as_ref()
  }

  pub fn reset_matched_items(&mut self) {
    self.matched_items = None;
  }

  pub fn set_iso_country_codes(&mut self, iso_country_codes: Vec<String>) {
    self.iso_country_codes = Some(iso_country_codes);
  }

  pub fn with_iso_country_codes(mut self, iso_country_codes: Vec<String>) -> Item {
    self.iso_country_codes = Some(iso_country_codes);
    self
  }

  pub fn iso_country_codes(&self) -> Option<&Vec<String>> {
    self.iso_country_codes.as_ref()
  }

  pub fn reset_iso_country_codes(&mut self) {
    self.iso_country_codes = None;
  }

  pub fn set_company_name(&mut self, company_name: String) {
    self.company_name = Some(company_name);
  }

  pub fn with_company_name(mut self, company_name: String) -> Item {
    self.company_name = Some(company_name);
    self
  }

  pub fn company_name(&self) -> Option<&String> {
    self.company_name.as_ref()
  }

  pub fn reset_company_name(&mut self) {
    self.company_name = None;
  }

  pub fn set_company_address(&mut self, company_address: String) {
    self.company_address = Some(company_address);
  }

  pub fn with_company_address(mut self, company_address: String) -> Item {
    self.company_address = Some(company_address);
    self
  }

  pub fn company_address(&self) -> Option<&String> {
    self.company_address.as_ref()
  }

  pub fn reset_company_address(&mut self) {
    self.company_address = None;
  }

  pub fn set_categories(&mut self, categories: Vec<String>) {
    self.categories = Some(categories);
  }

  pub fn with_categories(mut self, categories: Vec<String>) -> Item {
    self.categories = Some(categories);
    self
  }

  pub fn categories(&self) -> Option<&Vec<String>> {
    self.categories.as_ref()
  }

  pub fn reset_categories(&mut self) {
    self.categories = None;
  }

  pub fn set_category_hierarchies(&mut self, category_hierarchies: Vec<String>) {
    self.category_hierarchies = Some(category_hierarchies);
  }

  pub fn with_category_hierarchies(mut self, category_hierarchies: Vec<String>) -> Item {
    self.category_hierarchies = Some(category_hierarchies);
    self
  }

  pub fn category_hierarchies(&self) -> Option<&Vec<String>> {
    self.category_hierarchies.as_ref()
  }

  pub fn reset_category_hierarchies(&mut self) {
    self.category_hierarchies = None;
  }

}



