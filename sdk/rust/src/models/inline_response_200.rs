/* 
 * Barcodable.com API
 *
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse200 {
  /// A list of UPCs
  #[serde(rename = "upcs")]
  upcs: Option<Vec<String>>,
  /// A list of EANs
  #[serde(rename = "eans")]
  eans: Option<Vec<String>>,
  /// A list of ASINs
  #[serde(rename = "asins")]
  asins: Option<Vec<String>>,
  #[serde(rename = "message")]
  message: Option<String>
}

impl InlineResponse200 {
  pub fn new() -> InlineResponse200 {
    InlineResponse200 {
      upcs: None,
      eans: None,
      asins: None,
      message: None
    }
  }

  pub fn set_upcs(&mut self, upcs: Vec<String>) {
    self.upcs = Some(upcs);
  }

  pub fn with_upcs(mut self, upcs: Vec<String>) -> InlineResponse200 {
    self.upcs = Some(upcs);
    self
  }

  pub fn upcs(&self) -> Option<&Vec<String>> {
    self.upcs.as_ref()
  }

  pub fn reset_upcs(&mut self) {
    self.upcs = None;
  }

  pub fn set_eans(&mut self, eans: Vec<String>) {
    self.eans = Some(eans);
  }

  pub fn with_eans(mut self, eans: Vec<String>) -> InlineResponse200 {
    self.eans = Some(eans);
    self
  }

  pub fn eans(&self) -> Option<&Vec<String>> {
    self.eans.as_ref()
  }

  pub fn reset_eans(&mut self) {
    self.eans = None;
  }

  pub fn set_asins(&mut self, asins: Vec<String>) {
    self.asins = Some(asins);
  }

  pub fn with_asins(mut self, asins: Vec<String>) -> InlineResponse200 {
    self.asins = Some(asins);
    self
  }

  pub fn asins(&self) -> Option<&Vec<String>> {
    self.asins.as_ref()
  }

  pub fn reset_asins(&mut self) {
    self.asins = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> InlineResponse200 {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

}



