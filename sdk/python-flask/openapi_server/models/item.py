# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, upc=None, ean=None, isbn=None, asin=None, title=None, sku=None, mpn=None, part_number=None, upcs=None, description=None, brand=None, manufacturer=None, color=None, new_price=None, used_price=None, currency_code=None, url=None, features=None, dimensions=None, images=None, matched_items=None, iso_country_codes=None, company_name=None, company_address=None, categories=None, category_hierarchies=None):  # noqa: E501
        """Item - a model defined in OpenAPI

        :param upc: The upc of this Item.  # noqa: E501
        :type upc: str
        :param ean: The ean of this Item.  # noqa: E501
        :type ean: str
        :param isbn: The isbn of this Item.  # noqa: E501
        :type isbn: str
        :param asin: The asin of this Item.  # noqa: E501
        :type asin: str
        :param title: The title of this Item.  # noqa: E501
        :type title: str
        :param sku: The sku of this Item.  # noqa: E501
        :type sku: str
        :param mpn: The mpn of this Item.  # noqa: E501
        :type mpn: str
        :param part_number: The part_number of this Item.  # noqa: E501
        :type part_number: str
        :param upcs: The upcs of this Item.  # noqa: E501
        :type upcs: List[str]
        :param description: The description of this Item.  # noqa: E501
        :type description: str
        :param brand: The brand of this Item.  # noqa: E501
        :type brand: str
        :param manufacturer: The manufacturer of this Item.  # noqa: E501
        :type manufacturer: str
        :param color: The color of this Item.  # noqa: E501
        :type color: str
        :param new_price: The new_price of this Item.  # noqa: E501
        :type new_price: float
        :param used_price: The used_price of this Item.  # noqa: E501
        :type used_price: float
        :param currency_code: The currency_code of this Item.  # noqa: E501
        :type currency_code: str
        :param url: The url of this Item.  # noqa: E501
        :type url: str
        :param features: The features of this Item.  # noqa: E501
        :type features: List[str]
        :param dimensions: The dimensions of this Item.  # noqa: E501
        :type dimensions: List[object]
        :param images: The images of this Item.  # noqa: E501
        :type images: List[str]
        :param matched_items: The matched_items of this Item.  # noqa: E501
        :type matched_items: List[object]
        :param iso_country_codes: The iso_country_codes of this Item.  # noqa: E501
        :type iso_country_codes: List[str]
        :param company_name: The company_name of this Item.  # noqa: E501
        :type company_name: str
        :param company_address: The company_address of this Item.  # noqa: E501
        :type company_address: str
        :param categories: The categories of this Item.  # noqa: E501
        :type categories: List[str]
        :param category_hierarchies: The category_hierarchies of this Item.  # noqa: E501
        :type category_hierarchies: List[str]
        """
        self.openapi_types = {
            'upc': str,
            'ean': str,
            'isbn': str,
            'asin': str,
            'title': str,
            'sku': str,
            'mpn': str,
            'part_number': str,
            'upcs': List[str],
            'description': str,
            'brand': str,
            'manufacturer': str,
            'color': str,
            'new_price': float,
            'used_price': float,
            'currency_code': str,
            'url': str,
            'features': List[str],
            'dimensions': List[object],
            'images': List[str],
            'matched_items': List[object],
            'iso_country_codes': List[str],
            'company_name': str,
            'company_address': str,
            'categories': List[str],
            'category_hierarchies': List[str]
        }

        self.attribute_map = {
            'upc': 'upc',
            'ean': 'ean',
            'isbn': 'isbn',
            'asin': 'asin',
            'title': 'title',
            'sku': 'sku',
            'mpn': 'mpn',
            'part_number': 'part_number',
            'upcs': 'upcs',
            'description': 'description',
            'brand': 'brand',
            'manufacturer': 'manufacturer',
            'color': 'color',
            'new_price': 'new_price',
            'used_price': 'used_price',
            'currency_code': 'currency_code',
            'url': 'url',
            'features': 'features',
            'dimensions': 'dimensions',
            'images': 'images',
            'matched_items': 'matched_items',
            'iso_country_codes': 'iso_country_codes',
            'company_name': 'company_name',
            'company_address': 'company_address',
            'categories': 'categories',
            'category_hierarchies': 'category_hierarchies'
        }

        self._upc = upc
        self._ean = ean
        self._isbn = isbn
        self._asin = asin
        self._title = title
        self._sku = sku
        self._mpn = mpn
        self._part_number = part_number
        self._upcs = upcs
        self._description = description
        self._brand = brand
        self._manufacturer = manufacturer
        self._color = color
        self._new_price = new_price
        self._used_price = used_price
        self._currency_code = currency_code
        self._url = url
        self._features = features
        self._dimensions = dimensions
        self._images = images
        self._matched_items = matched_items
        self._iso_country_codes = iso_country_codes
        self._company_name = company_name
        self._company_address = company_address
        self._categories = categories
        self._category_hierarchies = category_hierarchies

    @classmethod
    def from_dict(cls, dikt) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def upc(self):
        """Gets the upc of this Item.


        :return: The upc of this Item.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this Item.


        :param upc: The upc of this Item.
        :type upc: str
        """

        self._upc = upc

    @property
    def ean(self):
        """Gets the ean of this Item.


        :return: The ean of this Item.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this Item.


        :param ean: The ean of this Item.
        :type ean: str
        """

        self._ean = ean

    @property
    def isbn(self):
        """Gets the isbn of this Item.


        :return: The isbn of this Item.
        :rtype: str
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn):
        """Sets the isbn of this Item.


        :param isbn: The isbn of this Item.
        :type isbn: str
        """

        self._isbn = isbn

    @property
    def asin(self):
        """Gets the asin of this Item.


        :return: The asin of this Item.
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this Item.


        :param asin: The asin of this Item.
        :type asin: str
        """

        self._asin = asin

    @property
    def title(self):
        """Gets the title of this Item.


        :return: The title of this Item.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Item.


        :param title: The title of this Item.
        :type title: str
        """

        self._title = title

    @property
    def sku(self):
        """Gets the sku of this Item.


        :return: The sku of this Item.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Item.


        :param sku: The sku of this Item.
        :type sku: str
        """

        self._sku = sku

    @property
    def mpn(self):
        """Gets the mpn of this Item.


        :return: The mpn of this Item.
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this Item.


        :param mpn: The mpn of this Item.
        :type mpn: str
        """

        self._mpn = mpn

    @property
    def part_number(self):
        """Gets the part_number of this Item.


        :return: The part_number of this Item.
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this Item.


        :param part_number: The part_number of this Item.
        :type part_number: str
        """

        self._part_number = part_number

    @property
    def upcs(self):
        """Gets the upcs of this Item.

        A list of matching upc codes.  # noqa: E501

        :return: The upcs of this Item.
        :rtype: List[str]
        """
        return self._upcs

    @upcs.setter
    def upcs(self, upcs):
        """Sets the upcs of this Item.

        A list of matching upc codes.  # noqa: E501

        :param upcs: The upcs of this Item.
        :type upcs: List[str]
        """

        self._upcs = upcs

    @property
    def description(self):
        """Gets the description of this Item.


        :return: The description of this Item.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item.


        :param description: The description of this Item.
        :type description: str
        """

        self._description = description

    @property
    def brand(self):
        """Gets the brand of this Item.


        :return: The brand of this Item.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Item.


        :param brand: The brand of this Item.
        :type brand: str
        """

        self._brand = brand

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Item.


        :return: The manufacturer of this Item.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Item.


        :param manufacturer: The manufacturer of this Item.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def color(self):
        """Gets the color of this Item.


        :return: The color of this Item.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Item.


        :param color: The color of this Item.
        :type color: str
        """

        self._color = color

    @property
    def new_price(self):
        """Gets the new_price of this Item.


        :return: The new_price of this Item.
        :rtype: float
        """
        return self._new_price

    @new_price.setter
    def new_price(self, new_price):
        """Sets the new_price of this Item.


        :param new_price: The new_price of this Item.
        :type new_price: float
        """

        self._new_price = new_price

    @property
    def used_price(self):
        """Gets the used_price of this Item.


        :return: The used_price of this Item.
        :rtype: float
        """
        return self._used_price

    @used_price.setter
    def used_price(self, used_price):
        """Sets the used_price of this Item.


        :param used_price: The used_price of this Item.
        :type used_price: float
        """

        self._used_price = used_price

    @property
    def currency_code(self):
        """Gets the currency_code of this Item.


        :return: The currency_code of this Item.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Item.


        :param currency_code: The currency_code of this Item.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def url(self):
        """Gets the url of this Item.


        :return: The url of this Item.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Item.


        :param url: The url of this Item.
        :type url: str
        """

        self._url = url

    @property
    def features(self):
        """Gets the features of this Item.

        A list of product feature descriptions.  # noqa: E501

        :return: The features of this Item.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Item.

        A list of product feature descriptions.  # noqa: E501

        :param features: The features of this Item.
        :type features: List[str]
        """

        self._features = features

    @property
    def dimensions(self):
        """Gets the dimensions of this Item.

        Product dimensions and weight.  ('meters', 'centimeters', 'millimeters', 'inches', 'feet', 'yards', 'ounces', 'pounds', 'grams', 'milligrams', 'kilograms')  # noqa: E501

        :return: The dimensions of this Item.
        :rtype: List[object]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Item.

        Product dimensions and weight.  ('meters', 'centimeters', 'millimeters', 'inches', 'feet', 'yards', 'ounces', 'pounds', 'grams', 'milligrams', 'kilograms')  # noqa: E501

        :param dimensions: The dimensions of this Item.
        :type dimensions: List[object]
        """

        self._dimensions = dimensions

    @property
    def images(self):
        """Gets the images of this Item.

        A list product images.  # noqa: E501

        :return: The images of this Item.
        :rtype: List[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Item.

        A list product images.  # noqa: E501

        :param images: The images of this Item.
        :type images: List[str]
        """

        self._images = images

    @property
    def matched_items(self):
        """Gets the matched_items of this Item.

        Matched items for this product.  # noqa: E501

        :return: The matched_items of this Item.
        :rtype: List[object]
        """
        return self._matched_items

    @matched_items.setter
    def matched_items(self, matched_items):
        """Sets the matched_items of this Item.

        Matched items for this product.  # noqa: E501

        :param matched_items: The matched_items of this Item.
        :type matched_items: List[object]
        """

        self._matched_items = matched_items

    @property
    def iso_country_codes(self):
        """Gets the iso_country_codes of this Item.

        A list of country codes from which this item belongs.  # noqa: E501

        :return: The iso_country_codes of this Item.
        :rtype: List[str]
        """
        return self._iso_country_codes

    @iso_country_codes.setter
    def iso_country_codes(self, iso_country_codes):
        """Sets the iso_country_codes of this Item.

        A list of country codes from which this item belongs.  # noqa: E501

        :param iso_country_codes: The iso_country_codes of this Item.
        :type iso_country_codes: List[str]
        """

        self._iso_country_codes = iso_country_codes

    @property
    def company_name(self):
        """Gets the company_name of this Item.

        The company name registered to the product's UPC or EAN.  # noqa: E501

        :return: The company_name of this Item.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Item.

        The company name registered to the product's UPC or EAN.  # noqa: E501

        :param company_name: The company_name of this Item.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def company_address(self):
        """Gets the company_address of this Item.

        The company address registered to the product's UPC or EAN.  # noqa: E501

        :return: The company_address of this Item.
        :rtype: str
        """
        return self._company_address

    @company_address.setter
    def company_address(self, company_address):
        """Sets the company_address of this Item.

        The company address registered to the product's UPC or EAN.  # noqa: E501

        :param company_address: The company_address of this Item.
        :type company_address: str
        """

        self._company_address = company_address

    @property
    def categories(self):
        """Gets the categories of this Item.

        A list of categories for this product.  # noqa: E501

        :return: The categories of this Item.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Item.

        A list of categories for this product.  # noqa: E501

        :param categories: The categories of this Item.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def category_hierarchies(self):
        """Gets the category_hierarchies of this Item.

        A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.  # noqa: E501

        :return: The category_hierarchies of this Item.
        :rtype: List[str]
        """
        return self._category_hierarchies

    @category_hierarchies.setter
    def category_hierarchies(self, category_hierarchies):
        """Sets the category_hierarchies of this Item.

        A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.  # noqa: E501

        :param category_hierarchies: The category_hierarchies of this Item.
        :type category_hierarchies: List[str]
        """

        self._category_hierarchies = category_hierarchies
