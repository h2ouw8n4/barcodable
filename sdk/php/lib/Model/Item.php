<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Barcodable.com API
 *
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Item implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'upc' => 'string',
        'ean' => 'string',
        'isbn' => 'string',
        'asin' => 'string',
        'title' => 'string',
        'sku' => 'string',
        'mpn' => 'string',
        'part_number' => 'string',
        'upcs' => 'string[]',
        'description' => 'string',
        'brand' => 'string',
        'manufacturer' => 'string',
        'color' => 'string',
        'new_price' => 'float',
        'used_price' => 'float',
        'currency_code' => 'string',
        'url' => 'string',
        'features' => 'string[]',
        'dimensions' => 'object[]',
        'images' => 'string[]',
        'matched_items' => 'object[]',
        'iso_country_codes' => 'string[]',
        'company_name' => 'string',
        'company_address' => 'string',
        'categories' => 'string[]',
        'category_hierarchies' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'upc' => null,
        'ean' => null,
        'isbn' => null,
        'asin' => null,
        'title' => null,
        'sku' => null,
        'mpn' => null,
        'part_number' => null,
        'upcs' => null,
        'description' => null,
        'brand' => null,
        'manufacturer' => null,
        'color' => null,
        'new_price' => null,
        'used_price' => null,
        'currency_code' => null,
        'url' => null,
        'features' => null,
        'dimensions' => null,
        'images' => null,
        'matched_items' => null,
        'iso_country_codes' => null,
        'company_name' => null,
        'company_address' => null,
        'categories' => null,
        'category_hierarchies' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'upc' => 'upc',
        'ean' => 'ean',
        'isbn' => 'isbn',
        'asin' => 'asin',
        'title' => 'title',
        'sku' => 'sku',
        'mpn' => 'mpn',
        'part_number' => 'part_number',
        'upcs' => 'upcs',
        'description' => 'description',
        'brand' => 'brand',
        'manufacturer' => 'manufacturer',
        'color' => 'color',
        'new_price' => 'new_price',
        'used_price' => 'used_price',
        'currency_code' => 'currency_code',
        'url' => 'url',
        'features' => 'features',
        'dimensions' => 'dimensions',
        'images' => 'images',
        'matched_items' => 'matched_items',
        'iso_country_codes' => 'iso_country_codes',
        'company_name' => 'company_name',
        'company_address' => 'company_address',
        'categories' => 'categories',
        'category_hierarchies' => 'category_hierarchies'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'upc' => 'setUpc',
        'ean' => 'setEan',
        'isbn' => 'setIsbn',
        'asin' => 'setAsin',
        'title' => 'setTitle',
        'sku' => 'setSku',
        'mpn' => 'setMpn',
        'part_number' => 'setPartNumber',
        'upcs' => 'setUpcs',
        'description' => 'setDescription',
        'brand' => 'setBrand',
        'manufacturer' => 'setManufacturer',
        'color' => 'setColor',
        'new_price' => 'setNewPrice',
        'used_price' => 'setUsedPrice',
        'currency_code' => 'setCurrencyCode',
        'url' => 'setUrl',
        'features' => 'setFeatures',
        'dimensions' => 'setDimensions',
        'images' => 'setImages',
        'matched_items' => 'setMatchedItems',
        'iso_country_codes' => 'setIsoCountryCodes',
        'company_name' => 'setCompanyName',
        'company_address' => 'setCompanyAddress',
        'categories' => 'setCategories',
        'category_hierarchies' => 'setCategoryHierarchies'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'upc' => 'getUpc',
        'ean' => 'getEan',
        'isbn' => 'getIsbn',
        'asin' => 'getAsin',
        'title' => 'getTitle',
        'sku' => 'getSku',
        'mpn' => 'getMpn',
        'part_number' => 'getPartNumber',
        'upcs' => 'getUpcs',
        'description' => 'getDescription',
        'brand' => 'getBrand',
        'manufacturer' => 'getManufacturer',
        'color' => 'getColor',
        'new_price' => 'getNewPrice',
        'used_price' => 'getUsedPrice',
        'currency_code' => 'getCurrencyCode',
        'url' => 'getUrl',
        'features' => 'getFeatures',
        'dimensions' => 'getDimensions',
        'images' => 'getImages',
        'matched_items' => 'getMatchedItems',
        'iso_country_codes' => 'getIsoCountryCodes',
        'company_name' => 'getCompanyName',
        'company_address' => 'getCompanyAddress',
        'categories' => 'getCategories',
        'category_hierarchies' => 'getCategoryHierarchies'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['isbn'] = isset($data['isbn']) ? $data['isbn'] : null;
        $this->container['asin'] = isset($data['asin']) ? $data['asin'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['mpn'] = isset($data['mpn']) ? $data['mpn'] : null;
        $this->container['part_number'] = isset($data['part_number']) ? $data['part_number'] : null;
        $this->container['upcs'] = isset($data['upcs']) ? $data['upcs'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['new_price'] = isset($data['new_price']) ? $data['new_price'] : null;
        $this->container['used_price'] = isset($data['used_price']) ? $data['used_price'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['matched_items'] = isset($data['matched_items']) ? $data['matched_items'] : null;
        $this->container['iso_country_codes'] = isset($data['iso_country_codes']) ? $data['iso_country_codes'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_address'] = isset($data['company_address']) ? $data['company_address'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['category_hierarchies'] = isset($data['category_hierarchies']) ? $data['category_hierarchies'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets upc
     *
     * @return string|null
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string|null $upc upc
     *
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean ean
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets isbn
     *
     * @return string|null
     */
    public function getIsbn()
    {
        return $this->container['isbn'];
    }

    /**
     * Sets isbn
     *
     * @param string|null $isbn isbn
     *
     * @return $this
     */
    public function setIsbn($isbn)
    {
        $this->container['isbn'] = $isbn;

        return $this;
    }

    /**
     * Gets asin
     *
     * @return string|null
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string|null $asin asin
     *
     * @return $this
     */
    public function setAsin($asin)
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string|null
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string|null $mpn mpn
     *
     * @return $this
     */
    public function setMpn($mpn)
    {
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string|null $part_number part_number
     *
     * @return $this
     */
    public function setPartNumber($part_number)
    {
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets upcs
     *
     * @return string[]|null
     */
    public function getUpcs()
    {
        return $this->container['upcs'];
    }

    /**
     * Sets upcs
     *
     * @param string[]|null $upcs A list of matching upc codes.
     *
     * @return $this
     */
    public function setUpcs($upcs)
    {
        $this->container['upcs'] = $upcs;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand brand
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer manufacturer
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets new_price
     *
     * @return float|null
     */
    public function getNewPrice()
    {
        return $this->container['new_price'];
    }

    /**
     * Sets new_price
     *
     * @param float|null $new_price new_price
     *
     * @return $this
     */
    public function setNewPrice($new_price)
    {
        $this->container['new_price'] = $new_price;

        return $this;
    }

    /**
     * Gets used_price
     *
     * @return float|null
     */
    public function getUsedPrice()
    {
        return $this->container['used_price'];
    }

    /**
     * Sets used_price
     *
     * @param float|null $used_price used_price
     *
     * @return $this
     */
    public function setUsedPrice($used_price)
    {
        $this->container['used_price'] = $used_price;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[]|null $features A list of product feature descriptions.
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return object[]|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param object[]|null $dimensions Product dimensions and weight.  ('meters', 'centimeters', 'millimeters', 'inches', 'feet', 'yards', 'ounces', 'pounds', 'grams', 'milligrams', 'kilograms')
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[]|null $images A list product images.
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets matched_items
     *
     * @return object[]|null
     */
    public function getMatchedItems()
    {
        return $this->container['matched_items'];
    }

    /**
     * Sets matched_items
     *
     * @param object[]|null $matched_items Matched items for this product.
     *
     * @return $this
     */
    public function setMatchedItems($matched_items)
    {
        $this->container['matched_items'] = $matched_items;

        return $this;
    }

    /**
     * Gets iso_country_codes
     *
     * @return string[]|null
     */
    public function getIsoCountryCodes()
    {
        return $this->container['iso_country_codes'];
    }

    /**
     * Sets iso_country_codes
     *
     * @param string[]|null $iso_country_codes A list of country codes from which this item belongs.
     *
     * @return $this
     */
    public function setIsoCountryCodes($iso_country_codes)
    {
        $this->container['iso_country_codes'] = $iso_country_codes;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name The company name registered to the product's UPC or EAN.
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_address
     *
     * @return string|null
     */
    public function getCompanyAddress()
    {
        return $this->container['company_address'];
    }

    /**
     * Sets company_address
     *
     * @param string|null $company_address The company address registered to the product's UPC or EAN.
     *
     * @return $this
     */
    public function setCompanyAddress($company_address)
    {
        $this->container['company_address'] = $company_address;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories A list of categories for this product.
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets category_hierarchies
     *
     * @return string[]|null
     */
    public function getCategoryHierarchies()
    {
        return $this->container['category_hierarchies'];
    }

    /**
     * Sets category_hierarchies
     *
     * @param string[]|null $category_hierarchies A list of category hierarchies for this product. Categories are listed in order of generic category to most specific category.
     *
     * @return $this
     */
    public function setCategoryHierarchies($category_hierarchies)
    {
        $this->container['category_hierarchies'] = $category_hierarchies;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


