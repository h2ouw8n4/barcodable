/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class ProductLookupApi {
    protected basePath = 'https://virtserver.swaggerhub.com/mindviser/barcodable/1.0.0';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * Returns a single item
     * @summary Find item by asin code
     * @param asin ASIN code of item to return
     */
    public getItemByASIN (asin: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Item> {
        const localVarPath = this.basePath + '/api/v1/asin/{asin}'
            .replace('{' + 'asin' + '}', encodeURIComponent(String(asin)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'asin' is not null or undefined
        if (asin === null || asin === undefined) {
            throw new Error('Required parameter asin was null or undefined when calling getItemByASIN.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Returns a single item
     * @summary Find item by UPC code
     * @param ean EAN code of item to return
     */
    public getItemByEAN (ean: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Item> {
        const localVarPath = this.basePath + '/api/v1/ean/{ean}'
            .replace('{' + 'ean' + '}', encodeURIComponent(String(ean)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'ean' is not null or undefined
        if (ean === null || ean === undefined) {
            throw new Error('Required parameter ean was null or undefined when calling getItemByEAN.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Returns a single item
     * @summary Find item by UPC code
     * @param upc UPC code of item to return
     */
    public getItemByUPC (upc: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Item> {
        const localVarPath = this.basePath + '/api/v1/upc/{upc}'
            .replace('{' + 'upc' + '}', encodeURIComponent(String(upc)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'upc' is not null or undefined
        if (upc === null || upc === undefined) {
            throw new Error('Required parameter upc was null or undefined when calling getItemByUPC.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
