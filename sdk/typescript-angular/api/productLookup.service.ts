/**
 * Barcodable.com API
 * Barcodable.com API
 *
 * OpenAPI spec version: 1.5.0
 * Contact: support@barcodable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { InvalidCode } from '../model/invalidCode';
import { Item } from '../model/item';
import { NotFound } from '../model/notFound';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ProductLookupService {

    protected basePath = 'https://virtserver.swaggerhub.com/magicCashew/barcodable/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Find item by asin code
     * Returns a single item
     * @param asin ASIN code of item to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemByASIN(asin: string, observe?: 'body', reportProgress?: boolean): Observable<Item>;
    public getItemByASIN(asin: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Item>>;
    public getItemByASIN(asin: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Item>>;
    public getItemByASIN(asin: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (asin === null || asin === undefined) {
            throw new Error('Required parameter asin was null or undefined when calling getItemByASIN.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Item>(`${this.configuration.basePath}/api/v1/asin/${encodeURIComponent(String(asin))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find item by UPC code
     * Returns a single item
     * @param ean EAN code of item to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemByEAN(ean: string, observe?: 'body', reportProgress?: boolean): Observable<Item>;
    public getItemByEAN(ean: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Item>>;
    public getItemByEAN(ean: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Item>>;
    public getItemByEAN(ean: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ean === null || ean === undefined) {
            throw new Error('Required parameter ean was null or undefined when calling getItemByEAN.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Item>(`${this.configuration.basePath}/api/v1/ean/${encodeURIComponent(String(ean))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find item by UPC code
     * Returns a single item
     * @param upc UPC code of item to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemByUPC(upc: string, observe?: 'body', reportProgress?: boolean): Observable<Item>;
    public getItemByUPC(upc: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Item>>;
    public getItemByUPC(upc: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Item>>;
    public getItemByUPC(upc: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (upc === null || upc === undefined) {
            throw new Error('Required parameter upc was null or undefined when calling getItemByUPC.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Item>(`${this.configuration.basePath}/api/v1/upc/${encodeURIComponent(String(upc))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
